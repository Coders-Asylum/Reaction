{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { IconButton } from '../../Button';\nimport { Layer } from '../../Layer';\nimport { Overlay } from '../../Overlay';\nimport { Popup } from '../../Popup';\nimport { allowScrollOnElement, allowOverscrollOnElement, classNamesFunction, divProperties, elementContains, getId, getNativeProps, getRTL, css, warnDeprecations, Async, EventGroup, initializeComponentRef } from '../../Utilities';\nimport { FocusTrapZone } from '../FocusTrapZone/index';\nimport { PanelType } from './Panel.types';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Panel';\nvar PanelVisibilityState;\n\n(function (PanelVisibilityState) {\n  PanelVisibilityState[PanelVisibilityState[\"closed\"] = 0] = \"closed\";\n  PanelVisibilityState[PanelVisibilityState[\"animatingOpen\"] = 1] = \"animatingOpen\";\n  PanelVisibilityState[PanelVisibilityState[\"open\"] = 2] = \"open\";\n  PanelVisibilityState[PanelVisibilityState[\"animatingClosed\"] = 3] = \"animatingClosed\";\n})(PanelVisibilityState || (PanelVisibilityState = {}));\n\nvar PanelBase =\n/** @class */\nfunction (_super) {\n  __extends(PanelBase, _super);\n\n  function PanelBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._panel = React.createRef();\n    _this._animationCallback = null;\n    _this._hasCustomNavigation = !!(_this.props.onRenderNavigation || _this.props.onRenderNavigationContent);\n\n    _this.dismiss = function (ev) {\n      if (_this.props.onDismiss && _this.isActive) {\n        _this.props.onDismiss(ev);\n      }\n\n      if (!ev || ev && !ev.defaultPrevented) {\n        _this.close();\n      }\n    }; // Allow the user to scroll within the panel but not on the body\n\n\n    _this._allowScrollOnPanel = function (elt) {\n      if (elt) {\n        if (_this._allowTouchBodyScroll) {\n          allowOverscrollOnElement(elt, _this._events);\n        } else {\n          allowScrollOnElement(elt, _this._events);\n        }\n      } else {\n        _this._events.off(_this._scrollableContent);\n      }\n\n      _this._scrollableContent = elt;\n    };\n\n    _this._onRenderNavigation = function (props) {\n      if (!_this.props.onRenderNavigationContent && !_this.props.onRenderNavigation && !_this.props.hasCloseButton) {\n        return null;\n      }\n\n      var _a = _this.props.onRenderNavigationContent,\n          onRenderNavigationContent = _a === void 0 ? _this._onRenderNavigationContent : _a;\n      return React.createElement(\"div\", {\n        className: _this._classNames.navigation\n      }, onRenderNavigationContent(props, _this._onRenderNavigationContent));\n    };\n\n    _this._onRenderNavigationContent = function (props) {\n      var _a;\n\n      var closeButtonAriaLabel = props.closeButtonAriaLabel,\n          hasCloseButton = props.hasCloseButton,\n          _b = props.onRenderHeader,\n          onRenderHeader = _b === void 0 ? _this._onRenderHeader : _b;\n\n      if (hasCloseButton) {\n        var iconButtonStyles = (_a = _this._classNames.subComponentStyles) === null || _a === void 0 ? void 0 : _a.closeButton();\n        return React.createElement(React.Fragment, null, !_this._hasCustomNavigation && onRenderHeader(_this.props, _this._onRenderHeader, _this._headerTextId), React.createElement(IconButton, {\n          styles: iconButtonStyles,\n          className: _this._classNames.closeButton,\n          onClick: _this._onPanelClick,\n          ariaLabel: closeButtonAriaLabel,\n          title: closeButtonAriaLabel,\n          \"data-is-visible\": true,\n          iconProps: {\n            iconName: 'Cancel'\n          }\n        }));\n      }\n\n      return null;\n    };\n\n    _this._onRenderHeader = function (props, defaultRender, headerTextId) {\n      var headerText = props.headerText,\n          _a = props.headerTextProps,\n          headerTextProps = _a === void 0 ? {} : _a;\n\n      if (headerText) {\n        return React.createElement(\"div\", {\n          className: _this._classNames.header\n        }, React.createElement(\"div\", __assign({\n          id: headerTextId,\n          role: \"heading\",\n          \"aria-level\": 1\n        }, headerTextProps, {\n          className: css(_this._classNames.headerText, headerTextProps.className)\n        }), headerText));\n      }\n\n      return null;\n    };\n\n    _this._onRenderBody = function (props) {\n      return React.createElement(\"div\", {\n        className: _this._classNames.content\n      }, props.children);\n    };\n\n    _this._onRenderFooter = function (props) {\n      var _a = _this.props.onRenderFooterContent,\n          onRenderFooterContent = _a === void 0 ? null : _a;\n\n      if (onRenderFooterContent) {\n        return React.createElement(\"div\", {\n          className: _this._classNames.footer\n        }, React.createElement(\"div\", {\n          className: _this._classNames.footerInner\n        }, onRenderFooterContent()));\n      }\n\n      return null;\n    };\n\n    _this._animateTo = function (newVisibilityState) {\n      if (newVisibilityState === PanelVisibilityState.open && _this.props.onOpen) {\n        _this.props.onOpen();\n      }\n\n      _this._animationCallback = _this._async.setTimeout(function () {\n        _this.setState({\n          visibility: newVisibilityState\n        });\n\n        _this._onTransitionComplete();\n      }, 200);\n    };\n\n    _this._clearExistingAnimationTimer = function () {\n      if (_this._animationCallback !== null) {\n        _this._async.clearTimeout(_this._animationCallback);\n      }\n    };\n\n    _this._onPanelClick = function (ev) {\n      _this.dismiss(ev);\n    };\n\n    _this._onTransitionComplete = function () {\n      _this._updateFooterPosition();\n\n      if (_this.state.visibility === PanelVisibilityState.open && _this.props.onOpened) {\n        _this.props.onOpened();\n      }\n\n      if (_this.state.visibility === PanelVisibilityState.closed && _this.props.onDismissed) {\n        _this.props.onDismissed();\n      }\n    };\n\n    var _a = _this.props.allowTouchBodyScroll,\n        allowTouchBodyScroll = _a === void 0 ? false : _a;\n    _this._allowTouchBodyScroll = allowTouchBodyScroll;\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      ignoreExternalFocusing: 'focusTrapZoneProps',\n      forceFocusInsideTrap: 'focusTrapZoneProps',\n      firstFocusableSelector: 'focusTrapZoneProps'\n    });\n    _this.state = {\n      isFooterSticky: false,\n      // intentionally ignore props so animation takes place during componentDidMount\n      visibility: PanelVisibilityState.closed,\n      id: getId('Panel')\n    };\n    return _this;\n  }\n\n  PanelBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    if (nextProps.isOpen === undefined) {\n      return null; // no state update\n    }\n\n    if (nextProps.isOpen && (prevState.visibility === PanelVisibilityState.closed || prevState.visibility === PanelVisibilityState.animatingClosed)) {\n      return {\n        visibility: PanelVisibilityState.animatingOpen\n      };\n    }\n\n    if (!nextProps.isOpen && (prevState.visibility === PanelVisibilityState.open || prevState.visibility === PanelVisibilityState.animatingOpen)) {\n      return {\n        visibility: PanelVisibilityState.animatingClosed\n      };\n    }\n\n    return null;\n  };\n\n  PanelBase.prototype.componentDidMount = function () {\n    this._events.on(window, 'resize', this._updateFooterPosition);\n\n    if (this._shouldListenForOuterClick(this.props)) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n\n    if (this.props.isOpen) {\n      this.setState({\n        visibility: PanelVisibilityState.animatingOpen\n      });\n    }\n  };\n\n  PanelBase.prototype.componentDidUpdate = function (previousProps, previousState) {\n    var shouldListenOnOuterClick = this._shouldListenForOuterClick(this.props);\n\n    var previousShouldListenOnOuterClick = this._shouldListenForOuterClick(previousProps);\n\n    if (this.state.visibility !== previousState.visibility) {\n      this._clearExistingAnimationTimer();\n\n      if (this.state.visibility === PanelVisibilityState.animatingOpen) {\n        this._animateTo(PanelVisibilityState.open);\n      } else if (this.state.visibility === PanelVisibilityState.animatingClosed) {\n        this._animateTo(PanelVisibilityState.closed);\n      }\n    }\n\n    if (shouldListenOnOuterClick && !previousShouldListenOnOuterClick) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    } else if (!shouldListenOnOuterClick && previousShouldListenOnOuterClick) {\n      this._events.off(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n  };\n\n  PanelBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n\n    this._events.dispose();\n  };\n\n  PanelBase.prototype.render = function () {\n    var _a = this.props,\n        _b = _a.className,\n        className = _b === void 0 ? '' : _b,\n        elementToFocusOnDismiss = _a.elementToFocusOnDismiss,\n\n    /* eslint-disable deprecation/deprecation */\n    firstFocusableSelector = _a.firstFocusableSelector,\n        focusTrapZoneProps = _a.focusTrapZoneProps,\n        forceFocusInsideTrap = _a.forceFocusInsideTrap,\n        hasCloseButton = _a.hasCloseButton,\n        headerText = _a.headerText,\n        _c = _a.headerClassName,\n        headerClassName = _c === void 0 ? '' : _c,\n        ignoreExternalFocusing = _a.ignoreExternalFocusing,\n        isBlocking = _a.isBlocking,\n        isFooterAtBottom = _a.isFooterAtBottom,\n        isLightDismiss = _a.isLightDismiss,\n        isHiddenOnDismiss = _a.isHiddenOnDismiss,\n        layerProps = _a.layerProps,\n        overlayProps = _a.overlayProps,\n        popupProps = _a.popupProps,\n        type = _a.type,\n        styles = _a.styles,\n        theme = _a.theme,\n        customWidth = _a.customWidth,\n        _d = _a.onLightDismissClick,\n        onLightDismissClick = _d === void 0 ? this._onPanelClick : _d,\n        _e = _a.onRenderNavigation,\n        onRenderNavigation = _e === void 0 ? this._onRenderNavigation : _e,\n        _f = _a.onRenderHeader,\n        onRenderHeader = _f === void 0 ? this._onRenderHeader : _f,\n        _g = _a.onRenderBody,\n        onRenderBody = _g === void 0 ? this._onRenderBody : _g,\n        _h = _a.onRenderFooter,\n        onRenderFooter = _h === void 0 ? this._onRenderFooter : _h;\n    var _j = this.state,\n        isFooterSticky = _j.isFooterSticky,\n        visibility = _j.visibility,\n        id = _j.id;\n    var isLeft = type === PanelType.smallFixedNear || type === PanelType.customNear ? true : false;\n    var isRTL = getRTL(theme);\n    var isOnRightSide = isRTL ? isLeft : !isLeft;\n    var customWidthStyles = type === PanelType.custom || type === PanelType.customNear ? {\n      width: customWidth\n    } : {};\n    var nativeProps = getNativeProps(this.props, divProperties);\n    var isOpen = this.isActive;\n    var isAnimating = visibility === PanelVisibilityState.animatingClosed || visibility === PanelVisibilityState.animatingOpen;\n    this._headerTextId = headerText && id + '-headerText';\n\n    if (!isOpen && !isAnimating && !isHiddenOnDismiss) {\n      return null;\n    }\n\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      focusTrapZoneClassName: focusTrapZoneProps ? focusTrapZoneProps.className : undefined,\n      hasCloseButton: hasCloseButton,\n      headerClassName: headerClassName,\n      isAnimating: isAnimating,\n      isFooterSticky: isFooterSticky,\n      isFooterAtBottom: isFooterAtBottom,\n      isOnRightSide: isOnRightSide,\n      isOpen: isOpen,\n      isHiddenOnDismiss: isHiddenOnDismiss,\n      type: type,\n      hasCustomNavigation: this._hasCustomNavigation\n    });\n\n    var _k = this,\n        _classNames = _k._classNames,\n        _allowTouchBodyScroll = _k._allowTouchBodyScroll;\n\n    var overlay;\n\n    if (isBlocking && isOpen) {\n      overlay = React.createElement(Overlay, __assign({\n        className: _classNames.overlay,\n        isDarkThemed: false,\n        onClick: isLightDismiss ? onLightDismissClick : undefined,\n        allowTouchBodyScroll: _allowTouchBodyScroll\n      }, overlayProps));\n    }\n\n    return React.createElement(Layer, __assign({}, layerProps), React.createElement(Popup, __assign({\n      role: \"dialog\",\n      \"aria-modal\": isBlocking ? 'true' : undefined,\n      ariaLabelledBy: this._headerTextId ? this._headerTextId : undefined,\n      onDismiss: this.dismiss,\n      className: _classNames.hiddenPanel,\n      enableAriaHiddenSiblings: isOpen ? true : undefined\n    }, popupProps), React.createElement(\"div\", __assign({\n      \"aria-hidden\": !isOpen && isAnimating\n    }, nativeProps, {\n      ref: this._panel,\n      className: _classNames.root\n    }), overlay, React.createElement(FocusTrapZone, __assign({\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      forceFocusInsideTrap: !isBlocking || isHiddenOnDismiss && !isOpen ? false : forceFocusInsideTrap,\n      firstFocusableSelector: firstFocusableSelector,\n      isClickableOutsideFocusTrap: true\n    }, focusTrapZoneProps, {\n      className: _classNames.main,\n      style: customWidthStyles,\n      elementToFocusOnDismiss: elementToFocusOnDismiss\n    }), React.createElement(\"div\", {\n      className: _classNames.contentInner\n    }, React.createElement(\"div\", {\n      ref: this._allowScrollOnPanel,\n      className: _classNames.scrollableContent,\n      \"data-is-scrollable\": true\n    }, React.createElement(\"div\", {\n      className: _classNames.commands,\n      \"data-is-visible\": true\n    }, onRenderNavigation(this.props, this._onRenderNavigation)), (this._hasCustomNavigation || !hasCloseButton) && onRenderHeader(this.props, this._onRenderHeader, this._headerTextId), onRenderBody(this.props, this._onRenderBody), onRenderFooter(this.props, this._onRenderFooter)))))));\n  };\n\n  PanelBase.prototype.open = function () {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n\n    if (this.isActive) {\n      return;\n    }\n\n    this.setState({\n      visibility: PanelVisibilityState.animatingOpen\n    });\n  };\n\n  PanelBase.prototype.close = function () {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n\n    if (!this.isActive) {\n      return;\n    }\n\n    this.setState({\n      visibility: PanelVisibilityState.animatingClosed\n    });\n  };\n\n  Object.defineProperty(PanelBase.prototype, \"isActive\", {\n    /** isActive is true when panel is open or opening. */\n    get: function get() {\n      return this.state.visibility === PanelVisibilityState.open || this.state.visibility === PanelVisibilityState.animatingOpen;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  PanelBase.prototype._shouldListenForOuterClick = function (props) {\n    return !!props.isBlocking && !!props.isOpen;\n  };\n\n  PanelBase.prototype._updateFooterPosition = function () {\n    var scrollableContent = this._scrollableContent;\n\n    if (scrollableContent) {\n      var height = scrollableContent.clientHeight;\n      var innerHeight_1 = scrollableContent.scrollHeight;\n      this.setState({\n        isFooterSticky: height < innerHeight_1 ? true : false\n      });\n    }\n  };\n\n  PanelBase.prototype._dismissOnOuterClick = function (ev) {\n    var panel = this._panel.current;\n\n    if (this.isActive && panel && !ev.defaultPrevented) {\n      if (!elementContains(panel, ev.target)) {\n        if (this.props.onOuterClick) {\n          this.props.onOuterClick(ev);\n        } else {\n          this.dismiss(ev);\n        }\n      }\n    }\n  };\n\n  PanelBase.defaultProps = {\n    isHiddenOnDismiss: false,\n    isOpen: undefined,\n    isBlocking: true,\n    hasCloseButton: true,\n    type: PanelType.smallFixedFar\n  };\n  return PanelBase;\n}(React.Component);\n\nexport { PanelBase };","map":{"version":3,"mappings":"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","names":["React","IconButton","Layer","Overlay","Popup","allowScrollOnElement","allowOverscrollOnElement","classNamesFunction","divProperties","elementContains","getId","getNativeProps","getRTL","css","warnDeprecations","Async","EventGroup","initializeComponentRef","FocusTrapZone","PanelType","getClassNames","COMPONENT_NAME","PanelVisibilityState","__extends","props","_super","_this","createRef","onRenderNavigation","onRenderNavigationContent","ev","onDismiss","isActive","defaultPrevented","close","elt","_allowTouchBodyScroll","_events","off","_scrollableContent","hasCloseButton","_onRenderNavigationContent","_a","className","_classNames","navigation","_b","onRenderHeader","_onRenderHeader","iconButtonStyles","subComponentStyles","closeButton","_hasCustomNavigation","_headerTextId","styles","onClick","_onPanelClick","ariaLabel","closeButtonAriaLabel","title","iconProps","iconName","defaultRender","headerTextId","headerTextProps","headerText","header","id","role","content","children","onRenderFooterContent","footer","footerInner","newVisibilityState","open","onOpen","_animationCallback","_async","setTimeout","setState","visibility","_onTransitionComplete","clearTimeout","dismiss","_updateFooterPosition","state","onOpened","closed","onDismissed","allowTouchBodyScroll","ignoreExternalFocusing","forceFocusInsideTrap","firstFocusableSelector","isFooterSticky","PanelBase","nextProps","prevState","isOpen","undefined","animatingClosed","animatingOpen","on","window","_shouldListenForOuterClick","document","body","_dismissOnOuterClick","previousProps","previousState","shouldListenOnOuterClick","previousShouldListenOnOuterClick","_clearExistingAnimationTimer","_animateTo","dispose","elementToFocusOnDismiss","focusTrapZoneProps","_c","headerClassName","isBlocking","isFooterAtBottom","isLightDismiss","isHiddenOnDismiss","layerProps","overlayProps","popupProps","type","theme","customWidth","_d","onLightDismissClick","_e","_onRenderNavigation","_f","_g","onRenderBody","_onRenderBody","_h","onRenderFooter","_onRenderFooter","isLeft","smallFixedNear","customNear","isRTL","isOnRightSide","customWidthStyles","custom","width","nativeProps","isAnimating","focusTrapZoneClassName","hasCustomNavigation","overlay","__assign","isDarkThemed","ariaLabelledBy","hiddenPanel","enableAriaHiddenSiblings","ref","_panel","root","isClickableOutsideFocusTrap","main","style","contentInner","_allowScrollOnPanel","scrollableContent","commands","Object","height","clientHeight","innerHeight_1","scrollHeight","panel","current","target","onOuterClick","smallFixedFar","Component"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/Panel/Panel.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IconButton } from '../../Button';\nimport { Layer } from '../../Layer';\nimport { Overlay } from '../../Overlay';\nimport { Popup } from '../../Popup';\nimport {\n  allowScrollOnElement,\n  allowOverscrollOnElement,\n  classNamesFunction,\n  divProperties,\n  elementContains,\n  getId,\n  getNativeProps,\n  getRTL,\n  css,\n  warnDeprecations,\n  Async,\n  EventGroup,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { FocusTrapZone } from '../FocusTrapZone/index';\nimport { PanelType } from './Panel.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IPanel, IPanelProps, IPanelStyleProps, IPanelStyles } from './Panel.types';\n\nconst getClassNames = classNamesFunction<IPanelStyleProps, IPanelStyles>();\nconst COMPONENT_NAME = 'Panel';\n\nenum PanelVisibilityState {\n  closed,\n  animatingOpen,\n  open,\n  animatingClosed,\n}\n\ninterface IPanelState {\n  isFooterSticky?: boolean;\n  id?: string;\n  visibility: PanelVisibilityState;\n}\n\nexport class PanelBase extends React.Component<IPanelProps, IPanelState> implements IPanel {\n  public static defaultProps: IPanelProps = {\n    isHiddenOnDismiss: false,\n    isOpen: undefined,\n    isBlocking: true,\n    hasCloseButton: true,\n    type: PanelType.smallFixedFar,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _panel = React.createRef<HTMLDivElement>();\n  private _classNames: IProcessedStyleSet<IPanelStyles>;\n  private _scrollableContent: HTMLDivElement | null;\n  private _animationCallback: number | null = null;\n  private _hasCustomNavigation: boolean = !!(this.props.onRenderNavigation || this.props.onRenderNavigationContent);\n  private _headerTextId: string | undefined;\n  private _allowTouchBodyScroll: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<IPanelProps>,\n    prevState: Readonly<IPanelState>,\n  ): Partial<IPanelState> | null {\n    if (nextProps.isOpen === undefined) {\n      return null; // no state update\n    }\n    if (\n      nextProps.isOpen &&\n      (prevState.visibility === PanelVisibilityState.closed ||\n        prevState.visibility === PanelVisibilityState.animatingClosed)\n    ) {\n      return { visibility: PanelVisibilityState.animatingOpen };\n    }\n    if (\n      !nextProps.isOpen &&\n      (prevState.visibility === PanelVisibilityState.open ||\n        prevState.visibility === PanelVisibilityState.animatingOpen)\n    ) {\n      return { visibility: PanelVisibilityState.animatingClosed };\n    }\n    return null;\n  }\n\n  constructor(props: IPanelProps) {\n    super(props);\n\n    const { allowTouchBodyScroll = false } = this.props;\n    this._allowTouchBodyScroll = allowTouchBodyScroll;\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    initializeComponentRef(this);\n\n    warnDeprecations(COMPONENT_NAME, props, {\n      ignoreExternalFocusing: 'focusTrapZoneProps',\n      forceFocusInsideTrap: 'focusTrapZoneProps',\n      firstFocusableSelector: 'focusTrapZoneProps',\n    });\n\n    this.state = {\n      isFooterSticky: false,\n      // intentionally ignore props so animation takes place during componentDidMount\n      visibility: PanelVisibilityState.closed,\n      id: getId('Panel'),\n    };\n  }\n\n  public componentDidMount(): void {\n    this._events.on(window, 'resize', this._updateFooterPosition);\n\n    if (this._shouldListenForOuterClick(this.props)) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n\n    if (this.props.isOpen) {\n      this.setState({ visibility: PanelVisibilityState.animatingOpen });\n    }\n  }\n\n  public componentDidUpdate(previousProps: IPanelProps, previousState: IPanelState): void {\n    const shouldListenOnOuterClick = this._shouldListenForOuterClick(this.props);\n    const previousShouldListenOnOuterClick = this._shouldListenForOuterClick(previousProps);\n\n    if (this.state.visibility !== previousState.visibility) {\n      this._clearExistingAnimationTimer();\n      if (this.state.visibility === PanelVisibilityState.animatingOpen) {\n        this._animateTo(PanelVisibilityState.open);\n      } else if (this.state.visibility === PanelVisibilityState.animatingClosed) {\n        this._animateTo(PanelVisibilityState.closed);\n      }\n    }\n\n    if (shouldListenOnOuterClick && !previousShouldListenOnOuterClick) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    } else if (!shouldListenOnOuterClick && previousShouldListenOnOuterClick) {\n      this._events.off(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      className = '',\n      elementToFocusOnDismiss,\n      /* eslint-disable deprecation/deprecation */\n      firstFocusableSelector,\n      focusTrapZoneProps,\n      forceFocusInsideTrap,\n      hasCloseButton,\n      headerText,\n      headerClassName = '',\n      ignoreExternalFocusing,\n      isBlocking,\n      isFooterAtBottom,\n      isLightDismiss,\n      isHiddenOnDismiss,\n      layerProps,\n      overlayProps,\n      popupProps,\n      type,\n      styles,\n      theme,\n      customWidth,\n      onLightDismissClick = this._onPanelClick,\n      onRenderNavigation = this._onRenderNavigation,\n      onRenderHeader = this._onRenderHeader,\n      onRenderBody = this._onRenderBody,\n      onRenderFooter = this._onRenderFooter,\n    } = this.props;\n    const { isFooterSticky, visibility, id } = this.state;\n    const isLeft = type === PanelType.smallFixedNear || type === PanelType.customNear ? true : false;\n    const isRTL = getRTL(theme);\n    const isOnRightSide = isRTL ? isLeft : !isLeft;\n    const customWidthStyles = type === PanelType.custom || type === PanelType.customNear ? { width: customWidth } : {};\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n    const isOpen = this.isActive;\n    const isAnimating =\n      visibility === PanelVisibilityState.animatingClosed || visibility === PanelVisibilityState.animatingOpen;\n\n    this._headerTextId = headerText && id + '-headerText';\n\n    if (!isOpen && !isAnimating && !isHiddenOnDismiss) {\n      return null;\n    }\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      focusTrapZoneClassName: focusTrapZoneProps ? focusTrapZoneProps.className : undefined,\n      hasCloseButton,\n      headerClassName,\n      isAnimating,\n      isFooterSticky,\n      isFooterAtBottom,\n      isOnRightSide,\n      isOpen,\n      isHiddenOnDismiss,\n      type,\n      hasCustomNavigation: this._hasCustomNavigation,\n    });\n\n    const { _classNames, _allowTouchBodyScroll } = this;\n\n    let overlay;\n    if (isBlocking && isOpen) {\n      overlay = (\n        <Overlay\n          className={_classNames.overlay}\n          isDarkThemed={false}\n          onClick={isLightDismiss ? onLightDismissClick : undefined}\n          allowTouchBodyScroll={_allowTouchBodyScroll}\n          {...overlayProps}\n        />\n      );\n    }\n\n    return (\n      <Layer {...layerProps}>\n        <Popup\n          role=\"dialog\"\n          aria-modal={isBlocking ? 'true' : undefined}\n          ariaLabelledBy={this._headerTextId ? this._headerTextId : undefined}\n          onDismiss={this.dismiss}\n          className={_classNames.hiddenPanel}\n          enableAriaHiddenSiblings={isOpen ? true : undefined}\n          {...popupProps}\n        >\n          <div aria-hidden={!isOpen && isAnimating} {...nativeProps} ref={this._panel} className={_classNames.root}>\n            {overlay}\n            <FocusTrapZone\n              ignoreExternalFocusing={ignoreExternalFocusing}\n              forceFocusInsideTrap={!isBlocking || (isHiddenOnDismiss && !isOpen) ? false : forceFocusInsideTrap}\n              firstFocusableSelector={firstFocusableSelector}\n              isClickableOutsideFocusTrap={true}\n              {...focusTrapZoneProps}\n              className={_classNames.main}\n              style={customWidthStyles}\n              elementToFocusOnDismiss={elementToFocusOnDismiss}\n            >\n              <div className={_classNames.contentInner}>\n                <div ref={this._allowScrollOnPanel} className={_classNames.scrollableContent} data-is-scrollable={true}>\n                  <div className={_classNames.commands} data-is-visible={true}>\n                    {onRenderNavigation(this.props, this._onRenderNavigation)}\n                  </div>\n                  {(this._hasCustomNavigation || !hasCloseButton) &&\n                    onRenderHeader(this.props, this._onRenderHeader, this._headerTextId)}\n                  {onRenderBody(this.props, this._onRenderBody)}\n                  {onRenderFooter(this.props, this._onRenderFooter)}\n                </div>\n              </div>\n            </FocusTrapZone>\n          </div>\n        </Popup>\n      </Layer>\n    );\n  }\n\n  public open() {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n\n    if (this.isActive) {\n      return;\n    }\n\n    this.setState({ visibility: PanelVisibilityState.animatingOpen });\n  }\n\n  public close() {\n    if (this.props.isOpen !== undefined) {\n      return;\n    }\n\n    if (!this.isActive) {\n      return;\n    }\n\n    this.setState({ visibility: PanelVisibilityState.animatingClosed });\n  }\n\n  public dismiss = (ev?: React.SyntheticEvent<HTMLElement> | KeyboardEvent): void => {\n    if (this.props.onDismiss && this.isActive) {\n      this.props.onDismiss(ev);\n    }\n\n    if (!ev || (ev && !ev.defaultPrevented)) {\n      this.close();\n    }\n  };\n\n  /** isActive is true when panel is open or opening. */\n  public get isActive(): boolean {\n    return (\n      this.state.visibility === PanelVisibilityState.open ||\n      this.state.visibility === PanelVisibilityState.animatingOpen\n    );\n  }\n\n  // Allow the user to scroll within the panel but not on the body\n  private _allowScrollOnPanel = (elt: HTMLDivElement | null): void => {\n    if (elt) {\n      if (this._allowTouchBodyScroll) {\n        allowOverscrollOnElement(elt, this._events);\n      } else {\n        allowScrollOnElement(elt, this._events);\n      }\n    } else {\n      this._events.off(this._scrollableContent);\n    }\n    this._scrollableContent = elt;\n  };\n\n  private _shouldListenForOuterClick(props: IPanelProps): boolean {\n    return !!props.isBlocking && !!props.isOpen;\n  }\n\n  private _onRenderNavigation = (props: IPanelProps): JSX.Element | null => {\n    if (!this.props.onRenderNavigationContent && !this.props.onRenderNavigation && !this.props.hasCloseButton) {\n      return null;\n    }\n    const { onRenderNavigationContent = this._onRenderNavigationContent } = this.props;\n    return (\n      <div className={this._classNames.navigation}>\n        {onRenderNavigationContent(props, this._onRenderNavigationContent)}\n      </div>\n    );\n  };\n\n  private _onRenderNavigationContent = (props: IPanelProps): JSX.Element | null => {\n    const { closeButtonAriaLabel, hasCloseButton, onRenderHeader = this._onRenderHeader } = props;\n    if (hasCloseButton) {\n      const iconButtonStyles = this._classNames.subComponentStyles?.closeButton();\n\n      return (\n        <>\n          {!this._hasCustomNavigation && onRenderHeader(this.props, this._onRenderHeader, this._headerTextId)}\n          <IconButton\n            styles={iconButtonStyles}\n            className={this._classNames.closeButton}\n            onClick={this._onPanelClick}\n            ariaLabel={closeButtonAriaLabel}\n            title={closeButtonAriaLabel}\n            data-is-visible={true}\n            iconProps={{ iconName: 'Cancel' }}\n          />\n        </>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderHeader = (\n    props: IPanelProps,\n    defaultRender?: (props?: IPanelProps) => JSX.Element | null,\n    headerTextId?: string | undefined,\n  ): JSX.Element | null => {\n    const { headerText, headerTextProps = {} } = props;\n\n    if (headerText) {\n      return (\n        <div className={this._classNames.header}>\n          <div\n            id={headerTextId}\n            role=\"heading\"\n            aria-level={1}\n            {...headerTextProps}\n            className={css(this._classNames.headerText, headerTextProps.className)}\n          >\n            {headerText}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderBody = (props: IPanelProps): JSX.Element => {\n    return <div className={this._classNames.content}>{props.children}</div>;\n  };\n\n  private _onRenderFooter = (props: IPanelProps): JSX.Element | null => {\n    const { onRenderFooterContent = null } = this.props;\n    if (onRenderFooterContent) {\n      return (\n        <div className={this._classNames.footer}>\n          <div className={this._classNames.footerInner}>{onRenderFooterContent()}</div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  private _updateFooterPosition(): void {\n    const scrollableContent = this._scrollableContent;\n    if (scrollableContent) {\n      const height = scrollableContent.clientHeight;\n      const innerHeight = scrollableContent.scrollHeight;\n\n      this.setState({\n        isFooterSticky: height < innerHeight ? true : false,\n      });\n    }\n  }\n\n  private _dismissOnOuterClick(ev: React.MouseEvent<HTMLDivElement>): void {\n    const panel = this._panel.current;\n    if (this.isActive && panel && !ev.defaultPrevented) {\n      if (!elementContains(panel, ev.target as HTMLElement)) {\n        if (this.props.onOuterClick) {\n          this.props.onOuterClick(ev);\n        } else {\n          this.dismiss(ev);\n        }\n      }\n    }\n  }\n\n  private _animateTo = (newVisibilityState: PanelVisibilityState): void => {\n    if (newVisibilityState === PanelVisibilityState.open && this.props.onOpen) {\n      this.props.onOpen();\n    }\n\n    this._animationCallback = this._async.setTimeout(() => {\n      this.setState({ visibility: newVisibilityState });\n      this._onTransitionComplete();\n    }, 200);\n  };\n\n  private _clearExistingAnimationTimer = (): void => {\n    if (this._animationCallback !== null) {\n      this._async.clearTimeout(this._animationCallback);\n    }\n  };\n\n  private _onPanelClick = (ev?: any): void => {\n    this.dismiss(ev);\n  };\n\n  private _onTransitionComplete = (): void => {\n    this._updateFooterPosition();\n\n    if (this.state.visibility === PanelVisibilityState.open && this.props.onOpened) {\n      this.props.onOpened();\n    }\n\n    if (this.state.visibility === PanelVisibilityState.closed && this.props.onDismissed) {\n      this.props.onDismissed();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}