{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { useControllableValue, useId, useWarnings } from '@fluentui/react-hooks';\nimport { classNamesFunction, getNativeProps, inputProperties, useFocusRects } from '@fluentui/utilities';\nimport { Label } from '../Label/Label';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Toggle';\nexport var ToggleBase = React.forwardRef(function (props, forwardedRef) {\n  var _a = props.as,\n      RootType = _a === void 0 ? 'div' : _a,\n      ariaLabel = props.ariaLabel,\n      controlledChecked = props.checked,\n      className = props.className,\n      _b = props.defaultChecked,\n      defaultChecked = _b === void 0 ? false : _b,\n      disabled = props.disabled,\n      inlineLabel = props.inlineLabel,\n      label = props.label,\n      // eslint-disable-next-line deprecation/deprecation\n  offAriaLabel = props.offAriaLabel,\n      offText = props.offText,\n      // eslint-disable-next-line deprecation/deprecation\n  onAriaLabel = props.onAriaLabel,\n      onChange = props.onChange,\n      // eslint-disable-next-line deprecation/deprecation\n  onChanged = props.onChanged,\n      onToggleClick = props.onClick,\n      onText = props.onText,\n      role = props.role,\n      styles = props.styles,\n      theme = props.theme;\n\n  var _c = useControllableValue(controlledChecked, defaultChecked, React.useCallback(function (ev, isChecked) {\n    onChange === null || onChange === void 0 ? void 0 : onChange(ev, isChecked);\n    onChanged === null || onChanged === void 0 ? void 0 : onChanged(isChecked);\n  }, [onChange, onChanged])),\n      checked = _c[0],\n      setChecked = _c[1];\n\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    disabled: disabled,\n    checked: checked,\n    inlineLabel: inlineLabel,\n    onOffMissing: !onText && !offText\n  });\n  var badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n  var id = useId(COMPONENT_NAME, props.id);\n  var labelId = id + \"-label\";\n  var stateTextId = id + \"-stateText\";\n  var stateText = checked ? onText : offText;\n  var toggleNativeProps = getNativeProps(props, inputProperties, ['defaultChecked']); // The following properties take priority for what Narrator should read:\n  // 1. ariaLabel\n  // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n  // 3. label, if existent\n\n  var labelledById = undefined;\n\n  if (!ariaLabel && !badAriaLabel) {\n    if (label) {\n      labelledById = labelId;\n    }\n\n    if (stateText && !labelledById) {\n      labelledById = stateTextId;\n    }\n  }\n\n  var toggleButton = React.useRef(null);\n  useFocusRects(toggleButton);\n  useComponentRef(props, checked, toggleButton);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props: props,\n      deprecations: {\n        offAriaLabel: undefined,\n        onAriaLabel: 'ariaLabel',\n        onChanged: 'onChange'\n      },\n      mutuallyExclusive: {\n        checked: 'defaultChecked'\n      }\n    });\n  }\n\n  var onClick = function onClick(ev) {\n    if (!disabled) {\n      setChecked(!checked, ev);\n\n      if (onToggleClick) {\n        onToggleClick(ev);\n      }\n    }\n  };\n\n  var slotProps = {\n    root: {\n      className: classNames.root,\n      hidden: toggleNativeProps.hidden\n    },\n    label: {\n      children: label,\n      className: classNames.label,\n      htmlFor: id,\n      id: labelId\n    },\n    container: {\n      className: classNames.container\n    },\n    pill: __assign(__assign({}, toggleNativeProps), {\n      'aria-disabled': disabled,\n      'aria-checked': checked,\n      'aria-label': ariaLabel ? ariaLabel : badAriaLabel,\n      'aria-labelledby': labelledById,\n      className: classNames.pill,\n      'data-is-focusable': true,\n      'data-ktp-target': true,\n      disabled: disabled,\n      id: id,\n      onClick: onClick,\n      ref: toggleButton,\n      role: role ? role : 'switch',\n      type: 'button'\n    }),\n    thumb: {\n      className: classNames.thumb\n    },\n    stateText: {\n      children: stateText,\n      className: classNames.text,\n      htmlFor: id,\n      id: stateTextId\n    }\n  };\n  return React.createElement(RootType, __assign({\n    ref: forwardedRef\n  }, slotProps.root), label && React.createElement(Label, __assign({}, slotProps.label)), React.createElement(\"div\", __assign({}, slotProps.container), React.createElement(\"button\", __assign({}, slotProps.pill), React.createElement(\"span\", __assign({}, slotProps.thumb))), (checked && onText || offText) && React.createElement(Label, __assign({}, slotProps.stateText))));\n});\nToggleBase.displayName = COMPONENT_NAME + 'Base';\n\nvar useComponentRef = function useComponentRef(props, isChecked, toggleButtonRef) {\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      get checked() {\n        return !!isChecked;\n      },\n\n      focus: function focus() {\n        if (toggleButtonRef.current) {\n          toggleButtonRef.current.focus();\n        }\n      }\n    };\n  }, [isChecked, toggleButtonRef]);\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,oBAAT,EAA+BC,KAA/B,EAAsCC,WAAtC,QAAyD,uBAAzD;AACA,SAASC,kBAAT,EAA6BC,cAA7B,EAA6CC,eAA7C,EAA8DC,aAA9D,QAAmF,qBAAnF;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAGA,IAAMC,aAAa,GAAGL,kBAAkB,EAAxC;AAEA,IAAMM,cAAc,GAAG,QAAvB;AAEA,OAAO,IAAMC,UAAU,GAA0CX,KAAK,CAACY,UAAN,CAC/D,UAACC,KAAD,EAAQC,YAAR,EAAoB;AAEhB,WAqBED,KAAK,GArBP;AAAA,MAAIE,QAAQ,mBAAG,KAAH,GAAQC,EAApB;AAAA,MACAC,SAAS,GAoBPJ,KAAK,UArBP;AAAA,MAESK,iBAAiB,GAmBxBL,KAAK,QArBP;AAAA,MAGAM,SAAS,GAkBPN,KAAK,UArBP;AAAA,MAIAO,KAiBEP,KAAK,eArBP;AAAA,MAIAQ,cAAc,mBAAG,KAAH,GAAQD,EAJtB;AAAA,MAKAE,QAAQ,GAgBNT,KAAK,SArBP;AAAA,MAMAU,WAAW,GAeTV,KAAK,YArBP;AAAA,MAOAW,KAAK,GAcHX,KAAK,MArBP;AAAA,MAQA;AACAY,cAAY,GAYVZ,KAAK,aArBP;AAAA,MAUAa,OAAO,GAWLb,KAAK,QArBP;AAAA,MAWA;AACAc,aAAW,GASTd,KAAK,YArBP;AAAA,MAaAe,QAAQ,GAQNf,KAAK,SArBP;AAAA,MAcA;AACAgB,WAAS,GAMPhB,KAAK,UArBP;AAAA,MAgBSiB,aAAa,GAKpBjB,KAAK,QArBP;AAAA,MAiBAkB,MAAM,GAIJlB,KAAK,OArBP;AAAA,MAkBAmB,IAAI,GAGFnB,KAAK,KArBP;AAAA,MAmBAoB,MAAM,GAEJpB,KAAK,OArBP;AAAA,MAoBAqB,KAAK,GACHrB,KAAK,MArBP;;AAuBI,WAAwBZ,oBAAoB,CAChDiB,iBADgD,EAEhDG,cAFgD,EAGhDrB,KAAK,CAACmC,WAAN,CACE,UAACC,EAAD,EAAoCC,SAApC,EAAsD;AACpDT,YAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAGQ,EAAH,EAAOC,SAAP,CAAR;AACAR,aAAS,SAAT,aAAS,WAAT,GAAS,MAAT,YAAS,CAAGQ,SAAH,CAAT;AACD,GAJH,EAKE,CAACT,QAAD,EAAWC,SAAX,CALF,CAHgD,CAA5C;AAAA,MAACS,OAAO,QAAR;AAAA,MAAUC,UAAU,QAApB;;AAYN,MAAMC,UAAU,GAAG/B,aAAa,CAACwB,MAAD,EAAU;AACxCC,SAAK,EAAEA,KADiC;AAExCf,aAAS,WAF+B;AAGxCG,YAAQ,UAHgC;AAIxCgB,WAAO,SAJiC;AAKxCf,eAAW,aAL6B;AAMxCkB,gBAAY,EAAE,CAACV,MAAD,IAAW,CAACL;AANc,GAAV,CAAhC;AAQA,MAAMgB,YAAY,GAAGJ,OAAO,GAAGX,WAAH,GAAiBF,YAA7C;AACA,MAAMkB,EAAE,GAAGzC,KAAK,CAACQ,cAAD,EAAiBG,KAAK,CAAC8B,EAAvB,CAAhB;AACA,MAAMC,OAAO,GAAMD,EAAE,WAArB;AACA,MAAME,WAAW,GAAMF,EAAE,eAAzB;AACA,MAAMG,SAAS,GAAGR,OAAO,GAAGP,MAAH,GAAYL,OAArC;AACA,MAAMqB,iBAAiB,GAAG1C,cAAc,CAA0CQ,KAA1C,EAAiDP,eAAjD,EAAkE,CACxG,gBADwG,CAAlE,CAAxC,CAlDkB,CAsDlB;AACA;AACA;AACA;;AAEA,MAAI0C,YAAY,GAAuBC,SAAvC;;AACA,MAAI,CAAChC,SAAD,IAAc,CAACyB,YAAnB,EAAiC;AAC/B,QAAIlB,KAAJ,EAAW;AACTwB,kBAAY,GAAGJ,OAAf;AACD;;AACD,QAAIE,SAAS,IAAI,CAACE,YAAlB,EAAgC;AAC9BA,kBAAY,GAAGH,WAAf;AACD;AACF;;AAED,MAAMK,YAAY,GAAGlD,KAAK,CAACmD,MAAN,CAAgC,IAAhC,CAArB;AACA5C,eAAa,CAAC2C,YAAD,CAAb;AACAE,iBAAe,CAACvC,KAAD,EAAQyB,OAAR,EAAiBY,YAAjB,CAAf;;AAEA,MAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACApD,eAAW,CAAC;AACVqD,UAAI,EAAE9C,cADI;AAEVG,WAAK,OAFK;AAGV4C,kBAAY,EAAE;AACZhC,oBAAY,EAAEwB,SADF;AAEZtB,mBAAW,EAAE,WAFD;AAGZE,iBAAS,EAAE;AAHC,OAHJ;AAQV6B,uBAAiB,EAAE;AAAEpB,eAAO,EAAE;AAAX;AART,KAAD,CAAX;AAUD;;AAED,MAAMqB,OAAO,GAAG,SAAVA,OAAU,CAACvB,EAAD,EAAkC;AAChD,QAAI,CAACd,QAAL,EAAe;AACbiB,gBAAU,CAAC,CAACD,OAAF,EAAWF,EAAX,CAAV;;AACA,UAAIN,aAAJ,EAAmB;AACjBA,qBAAa,CAACM,EAAD,CAAb;AACD;AACF;AACF,GAPD;;AASA,MAAMwB,SAAS,GAAG;AAChBC,QAAI,EAAE;AACJ1C,eAAS,EAAEqB,UAAU,CAACqB,IADlB;AAEJC,YAAM,EAAEf,iBAAiB,CAACe;AAFtB,KADU;AAKhBtC,SAAK,EAAE;AACLuC,cAAQ,EAAEvC,KADL;AAELL,eAAS,EAAEqB,UAAU,CAAChB,KAFjB;AAGLwC,aAAO,EAAErB,EAHJ;AAILA,QAAE,EAAEC;AAJC,KALS;AAWhBqB,aAAS,EAAE;AACT9C,eAAS,EAAEqB,UAAU,CAACyB;AADb,KAXK;AAchBC,QAAI,wBACCnB,iBADD,GACkB;AACpB,uBAAiBzB,QADG;AAEpB,sBAAgBgB,OAFI;AAGpB,oBAAcrB,SAAS,GAAGA,SAAH,GAAeyB,YAHlB;AAIpB,yBAAmBM,YAJC;AAKpB7B,eAAS,EAAEqB,UAAU,CAAC0B,IALF;AAMpB,2BAAqB,IAND;AAOpB,yBAAmB,IAPC;AAQpB5C,cAAQ,EAAEA,QARU;AASpBqB,QAAE,EAAEA,EATgB;AAUpBgB,aAAO,EAAEA,OAVW;AAWpBQ,SAAG,EAAEjB,YAXe;AAYpBlB,UAAI,EAAEA,IAAI,GAAGA,IAAH,GAAU,QAZA;AAapBoC,UAAI,EAAE;AAbc,KADlB,CAdY;AA8BhBC,SAAK,EAAE;AACLlD,eAAS,EAAEqB,UAAU,CAAC6B;AADjB,KA9BS;AAiChBvB,aAAS,EAAE;AACTiB,cAAQ,EAAEjB,SADD;AAET3B,eAAS,EAAEqB,UAAU,CAAC8B,IAFb;AAGTN,aAAO,EAAErB,EAHA;AAITA,QAAE,EAAEE;AAJK;AAjCK,GAAlB;AAyCA,SACE7C,oBAACe,QAAD,EAASwD;AAACJ,OAAG,EAAErD;AAAN,KAAqD8C,SAAS,CAACC,IAA/D,CAAT,EACGrC,KAAK,IAAIxB,oBAACQ,KAAD,EAAM+D,aAAKX,SAAS,CAACpC,KAAf,CAAN,CADZ,EAEExB,wCAAS4D,SAAS,CAACK,SAAnB,GACEjE,2CAAY4D,SAAS,CAACM,IAAtB,GACElE,yCAAU4D,SAAS,CAACS,KAApB,EADF,CADF,EAIG,CAAE/B,OAAO,IAAIP,MAAZ,IAAuBL,OAAxB,KAAoC1B,oBAACQ,KAAD,EAAM+D,aAAKX,SAAS,CAACd,SAAf,CAAN,CAJvC,CAFF,CADF;AAWD,CArJ8D,CAA1D;AAwJPnC,UAAU,CAAC6D,WAAX,GAAyB9D,cAAc,GAAG,MAA1C;;AAEA,IAAM0C,eAAe,GAAG,SAAlBA,eAAkB,CACtBvC,KADsB,EAEtBwB,SAFsB,EAGtBoC,eAHsB,EAGmB;AAEzCzE,OAAK,CAAC0E,mBAAN,CACE7D,KAAK,CAAC8D,YADR,EAEE;AAAM,WAAC;AACL,UAAIrC,OAAJ,GAAW;AACT,eAAO,CAAC,CAACD,SAAT;AACD,OAHI;;AAILuC,WAAK;AACH,YAAIH,eAAe,CAACI,OAApB,EAA6B;AAC3BJ,yBAAe,CAACI,OAAhB,CAAwBD,KAAxB;AACD;AACF;AARI,KAAD;AASJ,GAXJ,EAYE,CAACvC,SAAD,EAAYoC,eAAZ,CAZF;AAcD,CAnBD","names":["React","useControllableValue","useId","useWarnings","classNamesFunction","getNativeProps","inputProperties","useFocusRects","Label","getClassNames","COMPONENT_NAME","ToggleBase","forwardRef","props","forwardedRef","RootType","_a","ariaLabel","controlledChecked","className","_b","defaultChecked","disabled","inlineLabel","label","offAriaLabel","offText","onAriaLabel","onChange","onChanged","onToggleClick","onText","role","styles","theme","useCallback","ev","isChecked","checked","setChecked","classNames","onOffMissing","badAriaLabel","id","labelId","stateTextId","stateText","toggleNativeProps","labelledById","undefined","toggleButton","useRef","useComponentRef","process","env","NODE_ENV","name","deprecations","mutuallyExclusive","onClick","slotProps","root","hidden","children","htmlFor","container","pill","ref","type","thumb","text","__assign","displayName","toggleButtonRef","useImperativeHandle","componentRef","focus","current"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/Toggle/Toggle.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useControllableValue, useId, useWarnings } from '@fluentui/react-hooks';\nimport { classNamesFunction, getNativeProps, inputProperties, useFocusRects } from '@fluentui/utilities';\nimport { Label } from '../Label/Label';\nimport type { IToggleProps, IToggleStyleProps, IToggleStyles, IToggle } from './Toggle.types';\n\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\n\nconst COMPONENT_NAME = 'Toggle';\n\nexport const ToggleBase: React.FunctionComponent<IToggleProps> = React.forwardRef<HTMLElement, IToggleProps>(\n  (props, forwardedRef) => {\n    const {\n      as: RootType = 'div',\n      ariaLabel,\n      checked: controlledChecked,\n      className,\n      defaultChecked = false,\n      disabled,\n      inlineLabel,\n      label,\n      // eslint-disable-next-line deprecation/deprecation\n      offAriaLabel,\n      offText,\n      // eslint-disable-next-line deprecation/deprecation\n      onAriaLabel,\n      onChange,\n      // eslint-disable-next-line deprecation/deprecation\n      onChanged,\n      onClick: onToggleClick,\n      onText,\n      role,\n      styles,\n      theme,\n    } = props;\n\n    const [checked, setChecked] = useControllableValue(\n      controlledChecked,\n      defaultChecked,\n      React.useCallback(\n        (ev: React.MouseEvent<HTMLElement>, isChecked: boolean) => {\n          onChange?.(ev, isChecked);\n          onChanged?.(isChecked);\n        },\n        [onChange, onChanged],\n      ),\n    );\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      checked,\n      inlineLabel,\n      onOffMissing: !onText && !offText,\n    });\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    const id = useId(COMPONENT_NAME, props.id);\n    const labelId = `${id}-label`;\n    const stateTextId = `${id}-stateText`;\n    const stateText = checked ? onText : offText;\n    const toggleNativeProps = getNativeProps<React.HTMLAttributes<HTMLButtonElement>>(props, inputProperties, [\n      'defaultChecked',\n    ]);\n\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label, if existent\n\n    let labelledById: string | undefined = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      }\n      if (stateText && !labelledById) {\n        labelledById = stateTextId;\n      }\n    }\n\n    const toggleButton = React.useRef<HTMLButtonElement>(null);\n    useFocusRects(toggleButton);\n    useComponentRef(props, checked, toggleButton);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n      useWarnings({\n        name: COMPONENT_NAME,\n        props,\n        deprecations: {\n          offAriaLabel: undefined,\n          onAriaLabel: 'ariaLabel',\n          onChanged: 'onChange',\n        },\n        mutuallyExclusive: { checked: 'defaultChecked' },\n      });\n    }\n\n    const onClick = (ev: React.MouseEvent<HTMLElement>) => {\n      if (!disabled) {\n        setChecked(!checked, ev);\n        if (onToggleClick) {\n          onToggleClick(ev);\n        }\n      }\n    };\n\n    const slotProps = {\n      root: {\n        className: classNames.root,\n        hidden: toggleNativeProps.hidden,\n      },\n      label: {\n        children: label,\n        className: classNames.label,\n        htmlFor: id,\n        id: labelId,\n      },\n      container: {\n        className: classNames.container,\n      },\n      pill: {\n        ...toggleNativeProps,\n        'aria-disabled': disabled,\n        'aria-checked': checked,\n        'aria-label': ariaLabel ? ariaLabel : badAriaLabel,\n        'aria-labelledby': labelledById,\n        className: classNames.pill,\n        'data-is-focusable': true,\n        'data-ktp-target': true,\n        disabled: disabled,\n        id: id,\n        onClick: onClick,\n        ref: toggleButton,\n        role: role ? role : 'switch',\n        type: 'button' as React.ButtonHTMLAttributes<HTMLButtonElement>['type'],\n      },\n      thumb: {\n        className: classNames.thumb,\n      },\n      stateText: {\n        children: stateText,\n        className: classNames.text,\n        htmlFor: id,\n        id: stateTextId,\n      },\n    };\n\n    return (\n      <RootType ref={forwardedRef as React.Ref<HTMLDivElement>} {...slotProps.root}>\n        {label && <Label {...slotProps.label} />}\n        <div {...slotProps.container}>\n          <button {...slotProps.pill}>\n            <span {...slotProps.thumb} />\n          </button>\n          {((checked && onText) || offText) && <Label {...slotProps.stateText} />}\n        </div>\n      </RootType>\n    );\n  },\n);\n\nToggleBase.displayName = COMPONENT_NAME + 'Base';\n\nconst useComponentRef = (\n  props: IToggleProps,\n  isChecked: boolean | undefined,\n  toggleButtonRef: React.RefObject<IToggle>,\n) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      get checked() {\n        return !!isChecked;\n      },\n      focus() {\n        if (toggleButtonRef.current) {\n          toggleButtonRef.current.focus();\n        }\n      },\n    }),\n    [isChecked, toggleButtonRef],\n  );\n};\n"]},"metadata":{},"sourceType":"module"}