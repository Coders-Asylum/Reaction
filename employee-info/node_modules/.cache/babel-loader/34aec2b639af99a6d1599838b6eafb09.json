{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, classNamesFunction, getNativeProps, divProperties, css, format, getPropsWithDefaults } from '@fluentui/utilities';\nimport { Calendar } from '../../Calendar';\nimport { FirstWeekOfYear, getDatePartHashValue, compareDatePart, DayOfWeek } from '@fluentui/date-time-utilities';\nimport { Callout, DirectionalHint } from '../../Callout';\nimport { TextField } from '../../TextField';\nimport { FocusTrapZone } from '../../FocusTrapZone';\nimport { useId, useAsync, useControllableValue } from '@fluentui/react-hooks';\nimport { defaultDatePickerStrings } from './defaults';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_PROPS = {\n  allowTextInput: false,\n  formatDate: function formatDate(date) {\n    return date ? date.toDateString() : '';\n  },\n  parseDateFromString: function parseDateFromString(dateStr) {\n    var date = Date.parse(dateStr);\n    return date ? new Date(date) : null;\n  },\n  firstDayOfWeek: DayOfWeek.Sunday,\n  initialPickerDate: new Date(),\n  isRequired: false,\n  isMonthPickerVisible: true,\n  showMonthPickerAsOverlay: false,\n  strings: defaultDatePickerStrings,\n  highlightCurrentMonth: false,\n  highlightSelectedMonth: false,\n  borderless: false,\n  pickerAriaLabel: 'Calendar',\n  showWeekNumbers: false,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  showGoToToday: true,\n  showCloseButton: false,\n  underlined: false,\n  allFocusable: false\n};\n\nfunction useFocusLogic() {\n  var textFieldRef = React.useRef(null);\n  var preventFocusOpeningPicker = React.useRef(false);\n\n  var focus = function focus() {\n    var _a, _b;\n\n    (_b = (_a = textFieldRef.current) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);\n  };\n\n  var preventNextFocusOpeningPicker = function preventNextFocusOpeningPicker() {\n    preventFocusOpeningPicker.current = true;\n  };\n\n  return [textFieldRef, focus, preventFocusOpeningPicker, preventNextFocusOpeningPicker];\n}\n\nfunction useCalendarVisibility(_a, focus) {\n  var allowTextInput = _a.allowTextInput,\n      onAfterMenuDismiss = _a.onAfterMenuDismiss;\n\n  var _b = React.useState(false),\n      isCalendarShown = _b[0],\n      setIsCalendarShown = _b[1];\n\n  var isMounted = React.useRef(false);\n  var async = useAsync();\n  React.useEffect(function () {\n    if (isMounted.current && !isCalendarShown) {\n      // In browsers like IE, textfield gets unfocused when datepicker is collapsed\n      if (allowTextInput) {\n        async.requestAnimationFrame(focus);\n      } // If DatePicker's menu (Calendar) is closed, run onAfterMenuDismiss\n\n\n      onAfterMenuDismiss === null || onAfterMenuDismiss === void 0 ? void 0 : onAfterMenuDismiss();\n    }\n\n    isMounted.current = true; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isCalendarShown]);\n  return [isCalendarShown, setIsCalendarShown];\n}\n\nfunction useSelectedDate(_a) {\n  var formatDate = _a.formatDate,\n      value = _a.value,\n      onSelectDate = _a.onSelectDate;\n\n  var _b = useControllableValue(value, undefined, function (ev, newValue) {\n    return onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(newValue);\n  }),\n      selectedDate = _b[0],\n      setSelectedDateState = _b[1];\n\n  var _c = React.useState(function () {\n    return value && formatDate ? formatDate(value) : '';\n  }),\n      formattedDate = _c[0],\n      setFormattedDate = _c[1];\n\n  var setSelectedDate = function setSelectedDate(newDate) {\n    setSelectedDateState(newDate);\n    setFormattedDate(newDate && formatDate ? formatDate(newDate) : '');\n  };\n\n  React.useEffect(function () {\n    setFormattedDate(value && formatDate ? formatDate(value) : '');\n  }, [formatDate, value]);\n  return [selectedDate, formattedDate, setSelectedDate, setFormattedDate];\n}\n\nfunction useErrorMessage(_a, selectedDate, setSelectedDate, inputValue, isCalendarShown) {\n  var isRequired = _a.isRequired,\n      allowTextInput = _a.allowTextInput,\n      strings = _a.strings,\n      parseDateFromString = _a.parseDateFromString,\n      onSelectDate = _a.onSelectDate,\n      formatDate = _a.formatDate,\n      minDate = _a.minDate,\n      maxDate = _a.maxDate;\n\n  var _b = React.useState(),\n      errorMessage = _b[0],\n      setErrorMessage = _b[1];\n\n  var _c = React.useState(),\n      statusMessage = _c[0],\n      setStatusMessage = _c[1];\n\n  var validateTextInput = function validateTextInput(date) {\n    if (date === void 0) {\n      date = null;\n    }\n\n    if (allowTextInput) {\n      if (inputValue || date) {\n        // Don't parse if the selected date has the same formatted string as what we're about to parse.\n        // The formatted string might be ambiguous (ex: \"1/2/3\" or \"New Year Eve\") and the parser might\n        // not be able to come up with the exact same date.\n        if (selectedDate && !errorMessage && formatDate && formatDate(date !== null && date !== void 0 ? date : selectedDate) === inputValue) {\n          return;\n        }\n\n        date = date || parseDateFromString(inputValue); // Check if date is null, or date is Invalid Date\n\n        if (!date || isNaN(date.getTime())) {\n          // Reset invalid input field, if formatting is available\n          setSelectedDate(selectedDate); // default the newer isResetStatusMessage string to invalidInputErrorMessage for legacy support\n\n          var selectedText = formatDate ? formatDate(selectedDate) : '';\n          var statusText = strings.isResetStatusMessage ? format(strings.isResetStatusMessage, inputValue, selectedText) : strings.invalidInputErrorMessage || '';\n          setStatusMessage(statusText);\n        } else {\n          // Check against optional date boundaries\n          if (isDateOutOfBounds(date, minDate, maxDate)) {\n            setErrorMessage(strings.isOutOfBoundsErrorMessage || ' ');\n          } else {\n            setSelectedDate(date);\n            setErrorMessage(undefined);\n            setStatusMessage(undefined);\n          }\n        }\n      } else {\n        // Only show error for empty inputValue if it is a required field\n        setErrorMessage(isRequired ? strings.isRequiredErrorMessage || ' ' : undefined); // If no input date string or input date string is invalid\n        // date variable will be null, callback should expect null value for this case\n\n        onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(date);\n      }\n    } else if (isRequired && !inputValue) {\n      // Check when DatePicker is a required field but has NO input value\n      setErrorMessage(strings.isRequiredErrorMessage || ' ');\n    } else {\n      // Cleanup the error message and status message\n      setErrorMessage(undefined);\n      setStatusMessage(undefined);\n    }\n  };\n\n  React.useEffect(function () {\n    if (isRequired && !selectedDate) {\n      setErrorMessage(strings.isRequiredErrorMessage || ' ');\n    } else if (selectedDate && isDateOutOfBounds(selectedDate, minDate, maxDate)) {\n      setErrorMessage(strings.isOutOfBoundsErrorMessage || ' ');\n    } else {\n      setErrorMessage(undefined);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [// We don't want to compare the date itself, since two instances of date at the same time are not equal\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  minDate && getDatePartHashValue(minDate), // eslint-disable-next-line react-hooks/exhaustive-deps\n  maxDate && getDatePartHashValue(maxDate), // eslint-disable-next-line react-hooks/exhaustive-deps\n  selectedDate && getDatePartHashValue(selectedDate), isRequired]);\n  return [isCalendarShown ? undefined : errorMessage, validateTextInput, setErrorMessage, isCalendarShown ? undefined : statusMessage, setStatusMessage];\n}\n\nexport var DatePickerBase = React.forwardRef(function (propsWithoutDefaults, forwardedRef) {\n  var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n  var firstDayOfWeek = props.firstDayOfWeek,\n      strings = props.strings,\n      label = props.label,\n      theme = props.theme,\n      className = props.className,\n      styles = props.styles,\n      initialPickerDate = props.initialPickerDate,\n      isRequired = props.isRequired,\n      disabled = props.disabled,\n      ariaLabel = props.ariaLabel,\n      pickerAriaLabel = props.pickerAriaLabel,\n      placeholder = props.placeholder,\n      allowTextInput = props.allowTextInput,\n      borderless = props.borderless,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      showCloseButton = props.showCloseButton,\n      calendarProps = props.calendarProps,\n      calloutProps = props.calloutProps,\n      textFieldProps = props.textField,\n      underlined = props.underlined,\n      allFocusable = props.allFocusable,\n      _a = props.calendarAs,\n      CalendarType = _a === void 0 ? Calendar : _a,\n      tabIndex = props.tabIndex,\n      _b = props.disableAutoFocus,\n      disableAutoFocus = _b === void 0 ? true : _b;\n  var id = useId('DatePicker', props.id);\n  var calloutId = useId('DatePicker-Callout');\n  var calendar = React.useRef(null);\n  var datePickerDiv = React.useRef(null);\n\n  var _c = useFocusLogic(),\n      textFieldRef = _c[0],\n      focus = _c[1],\n      preventFocusOpeningPicker = _c[2],\n      preventNextFocusOpeningPicker = _c[3];\n\n  var _d = useCalendarVisibility(props, focus),\n      isCalendarShown = _d[0],\n      setIsCalendarShown = _d[1];\n\n  var _e = useSelectedDate(props),\n      selectedDate = _e[0],\n      formattedDate = _e[1],\n      setSelectedDate = _e[2],\n      setFormattedDate = _e[3];\n\n  var _f = useErrorMessage(props, selectedDate, setSelectedDate, formattedDate, isCalendarShown),\n      errorMessage = _f[0],\n      validateTextInput = _f[1],\n      setErrorMessage = _f[2],\n      statusMessage = _f[3],\n      setStatusMessage = _f[4];\n\n  var showDatePickerPopup = React.useCallback(function () {\n    if (!isCalendarShown) {\n      preventNextFocusOpeningPicker();\n      setIsCalendarShown(true);\n    }\n  }, [isCalendarShown, preventNextFocusOpeningPicker, setIsCalendarShown]);\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      focus: focus,\n      reset: function reset() {\n        setIsCalendarShown(false);\n        setSelectedDate(undefined);\n        setErrorMessage(undefined);\n        setStatusMessage(undefined);\n      },\n      showDatePickerPopup: showDatePickerPopup\n    };\n  }, [focus, setErrorMessage, setIsCalendarShown, setSelectedDate, setStatusMessage, showDatePickerPopup]);\n\n  var onTextFieldFocus = function onTextFieldFocus() {\n    if (disableAutoFocus) {\n      return;\n    }\n\n    if (!allowTextInput) {\n      if (!preventFocusOpeningPicker.current) {\n        showDatePickerPopup();\n      }\n\n      preventFocusOpeningPicker.current = false;\n    }\n  };\n\n  var onSelectDate = function onSelectDate(date) {\n    if (props.calendarProps && props.calendarProps.onSelectDate) {\n      props.calendarProps.onSelectDate(date);\n    }\n\n    calendarDismissed(date);\n  };\n\n  var onCalloutPositioned = function onCalloutPositioned() {\n    var shouldFocus = true; // If the user has specified that the callout shouldn't use initial focus, then respect\n    // that and don't attempt to set focus. That will default to true within the callout\n    // so we need to check if it's undefined here.\n\n    if (props.calloutProps && props.calloutProps.setInitialFocus !== undefined) {\n      shouldFocus = props.calloutProps.setInitialFocus;\n    }\n\n    if (calendar.current && shouldFocus) {\n      calendar.current.focus();\n    }\n  };\n\n  var onTextFieldBlur = function onTextFieldBlur(ev) {\n    validateTextInput();\n  };\n\n  var onTextFieldChanged = function onTextFieldChanged(ev, newValue) {\n    var _a;\n\n    var textField = props.textField;\n\n    if (allowTextInput) {\n      if (isCalendarShown) {\n        dismissDatePickerPopup();\n      }\n\n      setFormattedDate(newValue);\n    }\n\n    (_a = textField === null || textField === void 0 ? void 0 : textField.onChange) === null || _a === void 0 ? void 0 : _a.call(textField, ev, newValue);\n  };\n\n  var onTextFieldKeyDown = function onTextFieldKeyDown(ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.enter:\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (!isCalendarShown) {\n          validateTextInput();\n          showDatePickerPopup();\n        } else {\n          // When DatePicker allows input date string directly,\n          // it is expected to hit another enter to close the popup\n          if (props.allowTextInput) {\n            dismissDatePickerPopup();\n          }\n        }\n\n        break;\n\n      case KeyCodes.escape:\n        handleEscKey(ev);\n        break;\n\n      case KeyCodes.down:\n        if (ev.altKey && !isCalendarShown) {\n          showDatePickerPopup();\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var onTextFieldClick = function onTextFieldClick(ev) {\n    // default openOnClick to !props.disableAutoFocus for legacy support of disableAutoFocus behavior\n    var openOnClick = props.openOnClick || !props.disableAutoFocus;\n\n    if (openOnClick && !isCalendarShown && !props.disabled) {\n      showDatePickerPopup();\n      return;\n    }\n\n    if (props.allowTextInput) {\n      dismissDatePickerPopup();\n    }\n  };\n\n  var onIconClick = function onIconClick(ev) {\n    ev.stopPropagation();\n\n    if (!isCalendarShown && !props.disabled) {\n      showDatePickerPopup();\n    } else if (props.allowTextInput) {\n      dismissDatePickerPopup();\n    }\n  };\n\n  var dismissDatePickerPopup = function dismissDatePickerPopup(newlySelectedDate) {\n    if (isCalendarShown) {\n      setIsCalendarShown(false);\n      validateTextInput(newlySelectedDate);\n\n      if (!allowTextInput && newlySelectedDate) {\n        setSelectedDate(newlySelectedDate);\n      }\n    }\n  };\n\n  var renderTextfieldDescription = function renderTextfieldDescription(inputProps, defaultRender) {\n    return React.createElement(React.Fragment, null, inputProps.description ? defaultRender(inputProps) : null, React.createElement(\"div\", {\n      \"aria-live\": \"assertive\",\n      className: classNames.statusMessage\n    }, statusMessage));\n  };\n\n  var renderReadOnlyInput = function renderReadOnlyInput(inputProps) {\n    var divProps = getNativeProps(inputProps, divProperties); // Talkback on Android treats readonly inputs as disabled, so swipe gestures to open the Calendar\n    // don't register. Workaround is rendering a div with role=\"combobox\" (passed in via TextField props).\n\n    return React.createElement(\"div\", __assign({}, divProps, {\n      className: css(divProps.className, classNames.readOnlyTextField),\n      tabIndex: tabIndex || 0\n    }), formattedDate || // Putting the placeholder in a separate span fixes specificity issues for the text color\n    React.createElement(\"span\", {\n      className: classNames.readOnlyPlaceholder\n    }, placeholder));\n  };\n  /**\n   * Callback for closing the calendar callout\n   */\n\n\n  var calendarDismissed = function calendarDismissed(newlySelectedDate) {\n    preventNextFocusOpeningPicker();\n    dismissDatePickerPopup(newlySelectedDate); // don't need to focus the text box, if necessary the focusTrapZone will do it\n  };\n\n  var calloutDismissed = function calloutDismissed(ev) {\n    calendarDismissed();\n  };\n\n  var handleEscKey = function handleEscKey(ev) {\n    ev.stopPropagation();\n    calendarDismissed();\n  };\n\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    disabled: disabled,\n    underlined: underlined,\n    label: !!label,\n    isDatePickerShown: isCalendarShown\n  });\n  var nativeProps = getNativeProps(props, divProperties, ['value']);\n  var iconProps = textFieldProps && textFieldProps.iconProps;\n  var textFieldId = textFieldProps && textFieldProps.id && textFieldProps.id !== id ? textFieldProps.id : id + '-label';\n  var readOnly = !allowTextInput && !disabled;\n  return React.createElement(\"div\", __assign({}, nativeProps, {\n    className: classNames.root,\n    ref: forwardedRef\n  }), React.createElement(\"div\", {\n    ref: datePickerDiv,\n    \"aria-owns\": isCalendarShown ? calloutId : undefined,\n    className: classNames.wrapper\n  }, React.createElement(TextField, __assign({\n    role: \"combobox\",\n    label: label,\n    \"aria-expanded\": isCalendarShown,\n    ariaLabel: ariaLabel,\n    \"aria-haspopup\": \"dialog\",\n    \"aria-controls\": isCalendarShown ? calloutId : undefined,\n    required: isRequired,\n    disabled: disabled,\n    errorMessage: errorMessage,\n    placeholder: placeholder,\n    borderless: borderless,\n    value: formattedDate,\n    componentRef: textFieldRef,\n    underlined: underlined,\n    tabIndex: tabIndex,\n    readOnly: !allowTextInput\n  }, textFieldProps, {\n    id: textFieldId,\n    className: css(classNames.textField, textFieldProps && textFieldProps.className),\n    iconProps: __assign(__assign({\n      iconName: 'Calendar'\n    }, iconProps), {\n      className: css(classNames.icon, iconProps && iconProps.className),\n      onClick: onIconClick\n    }),\n    // eslint-disable-next-line react/jsx-no-bind\n    onRenderDescription: renderTextfieldDescription,\n    // eslint-disable-next-line react/jsx-no-bind\n    onKeyDown: onTextFieldKeyDown,\n    // eslint-disable-next-line react/jsx-no-bind\n    onFocus: onTextFieldFocus,\n    // eslint-disable-next-line react/jsx-no-bind\n    onBlur: onTextFieldBlur,\n    // eslint-disable-next-line react/jsx-no-bind\n    onClick: onTextFieldClick,\n    // eslint-disable-next-line react/jsx-no-bind\n    onChange: onTextFieldChanged,\n    onRenderInput: readOnly ? renderReadOnlyInput : undefined\n  }))), isCalendarShown && React.createElement(Callout, __assign({\n    id: calloutId,\n    role: \"dialog\",\n    ariaLabel: pickerAriaLabel,\n    isBeakVisible: false,\n    gapSpace: 0,\n    doNotLayer: false,\n    target: datePickerDiv.current,\n    directionalHint: DirectionalHint.bottomLeftEdge\n  }, calloutProps, {\n    className: css(classNames.callout, calloutProps && calloutProps.className),\n    // eslint-disable-next-line react/jsx-no-bind\n    onDismiss: calloutDismissed,\n    // eslint-disable-next-line react/jsx-no-bind\n    onPositioned: onCalloutPositioned\n  }), React.createElement(FocusTrapZone, {\n    isClickableOutsideFocusTrap: true,\n    disableFirstFocus: disableAutoFocus\n  }, React.createElement(CalendarType, __assign({}, calendarProps, {\n    // eslint-disable-next-line react/jsx-no-bind\n    onSelectDate: onSelectDate,\n    // eslint-disable-next-line react/jsx-no-bind\n    onDismiss: calendarDismissed,\n    isMonthPickerVisible: props.isMonthPickerVisible,\n    showMonthPickerAsOverlay: props.showMonthPickerAsOverlay,\n    today: props.today,\n    value: selectedDate || initialPickerDate,\n    firstDayOfWeek: firstDayOfWeek,\n    strings: strings,\n    highlightCurrentMonth: props.highlightCurrentMonth,\n    highlightSelectedMonth: props.highlightSelectedMonth,\n    showWeekNumbers: props.showWeekNumbers,\n    firstWeekOfYear: props.firstWeekOfYear,\n    showGoToToday: props.showGoToToday,\n    dateTimeFormatter: props.dateTimeFormatter,\n    minDate: minDate,\n    maxDate: maxDate,\n    componentRef: calendar,\n    showCloseButton: showCloseButton,\n    allFocusable: allFocusable\n  })))));\n});\nDatePickerBase.displayName = 'DatePickerBase';\n\nfunction isDateOutOfBounds(date, minDate, maxDate) {\n  return !!minDate && compareDatePart(minDate, date) > 0 || !!maxDate && compareDatePart(maxDate, date) < 0;\n}","map":{"version":3,"mappings":"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","names":["React","KeyCodes","classNamesFunction","getNativeProps","divProperties","css","format","getPropsWithDefaults","Calendar","FirstWeekOfYear","getDatePartHashValue","compareDatePart","DayOfWeek","Callout","DirectionalHint","TextField","FocusTrapZone","useId","useAsync","useControllableValue","defaultDatePickerStrings","getClassNames","DEFAULT_PROPS","allowTextInput","formatDate","date","toDateString","parseDateFromString","dateStr","Date","parse","firstDayOfWeek","Sunday","initialPickerDate","isRequired","isMonthPickerVisible","showMonthPickerAsOverlay","strings","highlightCurrentMonth","highlightSelectedMonth","borderless","pickerAriaLabel","showWeekNumbers","firstWeekOfYear","FirstDay","showGoToToday","showCloseButton","underlined","allFocusable","useFocusLogic","textFieldRef","useRef","preventFocusOpeningPicker","focus","current","_a","_b","preventNextFocusOpeningPicker","useCalendarVisibility","onAfterMenuDismiss","useState","isCalendarShown","setIsCalendarShown","isMounted","async","useEffect","requestAnimationFrame","useSelectedDate","value","onSelectDate","undefined","ev","newValue","selectedDate","setSelectedDateState","formattedDate","setFormattedDate","setSelectedDate","newDate","useErrorMessage","inputValue","minDate","maxDate","errorMessage","setErrorMessage","statusMessage","setStatusMessage","validateTextInput","isNaN","getTime","selectedText","statusText","isResetStatusMessage","invalidInputErrorMessage","isDateOutOfBounds","isOutOfBoundsErrorMessage","isRequiredErrorMessage","DatePickerBase","forwardRef","propsWithoutDefaults","forwardedRef","props","label","theme","className","styles","disabled","ariaLabel","placeholder","calendarProps","calloutProps","textFieldProps","CalendarType","tabIndex","disableAutoFocus","id","calloutId","calendar","datePickerDiv","showDatePickerPopup","useCallback","useImperativeHandle","componentRef","reset","onTextFieldFocus","calendarDismissed","onCalloutPositioned","shouldFocus","setInitialFocus","onTextFieldBlur","onTextFieldChanged","dismissDatePickerPopup","onChange","textField","onTextFieldKeyDown","which","enter","preventDefault","stopPropagation","escape","handleEscKey","down","altKey","onTextFieldClick","openOnClick","onIconClick","newlySelectedDate","renderTextfieldDescription","inputProps","defaultRender","description","classNames","renderReadOnlyInput","divProps","readOnlyTextField","readOnlyPlaceholder","calloutDismissed","isDatePickerShown","nativeProps","iconProps","textFieldId","readOnly","root","ref","wrapper","__assign","role","required","iconName","icon","onClick","onRenderDescription","onKeyDown","onFocus","onBlur","onRenderInput","isBeakVisible","gapSpace","doNotLayer","target","directionalHint","bottomLeftEdge","callout","onDismiss","onPositioned","isClickableOutsideFocusTrap","disableFirstFocus","today","dateTimeFormatter","displayName"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/DatePicker/DatePicker.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  KeyCodes,\n  classNamesFunction,\n  getNativeProps,\n  divProperties,\n  css,\n  format,\n  getPropsWithDefaults,\n} from '@fluentui/utilities';\nimport { Calendar } from '../../Calendar';\nimport { FirstWeekOfYear, getDatePartHashValue, compareDatePart, DayOfWeek } from '@fluentui/date-time-utilities';\nimport { Callout, DirectionalHint } from '../../Callout';\nimport { TextField } from '../../TextField';\nimport { FocusTrapZone } from '../../FocusTrapZone';\nimport { useId, useAsync, useControllableValue } from '@fluentui/react-hooks';\nimport { defaultDatePickerStrings } from './defaults';\nimport type { IDatePickerProps, IDatePickerStyleProps, IDatePickerStyles } from './DatePicker.types';\nimport type { IRenderFunction } from '@fluentui/utilities';\nimport type { ICalendar } from '../../Calendar';\nimport type { ITextField, ITextFieldProps } from '../../TextField';\n\nconst getClassNames = classNamesFunction<IDatePickerStyleProps, IDatePickerStyles>();\n\nconst DEFAULT_PROPS: IDatePickerProps = {\n  allowTextInput: false,\n  formatDate: (date: Date) => (date ? date.toDateString() : ''),\n  parseDateFromString: (dateStr: string) => {\n    const date = Date.parse(dateStr);\n    return date ? new Date(date) : null;\n  },\n  firstDayOfWeek: DayOfWeek.Sunday,\n  initialPickerDate: new Date(),\n  isRequired: false,\n  isMonthPickerVisible: true,\n  showMonthPickerAsOverlay: false,\n  strings: defaultDatePickerStrings,\n  highlightCurrentMonth: false,\n  highlightSelectedMonth: false,\n  borderless: false,\n  pickerAriaLabel: 'Calendar',\n  showWeekNumbers: false,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  showGoToToday: true,\n  showCloseButton: false,\n  underlined: false,\n  allFocusable: false,\n};\n\nfunction useFocusLogic() {\n  const textFieldRef = React.useRef<ITextField>(null);\n  const preventFocusOpeningPicker = React.useRef(false);\n\n  const focus = () => {\n    textFieldRef.current?.focus?.();\n  };\n\n  const preventNextFocusOpeningPicker = () => {\n    preventFocusOpeningPicker.current = true;\n  };\n\n  return [textFieldRef, focus, preventFocusOpeningPicker, preventNextFocusOpeningPicker] as const;\n}\n\nfunction useCalendarVisibility({ allowTextInput, onAfterMenuDismiss }: IDatePickerProps, focus: () => void) {\n  const [isCalendarShown, setIsCalendarShown] = React.useState(false);\n  const isMounted = React.useRef(false);\n  const async = useAsync();\n\n  React.useEffect(() => {\n    if (isMounted.current && !isCalendarShown) {\n      // In browsers like IE, textfield gets unfocused when datepicker is collapsed\n      if (allowTextInput) {\n        async.requestAnimationFrame(focus);\n      }\n\n      // If DatePicker's menu (Calendar) is closed, run onAfterMenuDismiss\n      onAfterMenuDismiss?.();\n    }\n    isMounted.current = true;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isCalendarShown]);\n\n  return [isCalendarShown, setIsCalendarShown] as const;\n}\n\nfunction useSelectedDate({ formatDate, value, onSelectDate }: IDatePickerProps) {\n  const [selectedDate, setSelectedDateState] = useControllableValue(value, undefined, (ev, newValue) =>\n    onSelectDate?.(newValue),\n  );\n  const [formattedDate, setFormattedDate] = React.useState(() => (value && formatDate ? formatDate(value) : ''));\n\n  const setSelectedDate = (newDate: Date | undefined) => {\n    setSelectedDateState(newDate);\n    setFormattedDate(newDate && formatDate ? formatDate(newDate) : '');\n  };\n\n  React.useEffect(() => {\n    setFormattedDate(value && formatDate ? formatDate(value) : '');\n  }, [formatDate, value]);\n\n  return [selectedDate, formattedDate, setSelectedDate, setFormattedDate] as const;\n}\n\nfunction useErrorMessage(\n  {\n    isRequired,\n    allowTextInput,\n    strings,\n    parseDateFromString,\n    onSelectDate,\n    formatDate,\n    minDate,\n    maxDate,\n  }: IDatePickerProps,\n  selectedDate: Date | undefined,\n  setSelectedDate: (date: Date | undefined) => void,\n  inputValue: string,\n  isCalendarShown: boolean,\n) {\n  const [errorMessage, setErrorMessage] = React.useState<string | undefined>();\n  const [statusMessage, setStatusMessage] = React.useState<string | undefined>();\n\n  const validateTextInput = (date: Date | null = null): void => {\n    if (allowTextInput) {\n      if (inputValue || date) {\n        // Don't parse if the selected date has the same formatted string as what we're about to parse.\n        // The formatted string might be ambiguous (ex: \"1/2/3\" or \"New Year Eve\") and the parser might\n        // not be able to come up with the exact same date.\n        if (selectedDate && !errorMessage && formatDate && formatDate(date ?? selectedDate) === inputValue) {\n          return;\n        }\n        date = date || parseDateFromString!(inputValue);\n\n        // Check if date is null, or date is Invalid Date\n        if (!date || isNaN(date.getTime())) {\n          // Reset invalid input field, if formatting is available\n          setSelectedDate(selectedDate);\n          // default the newer isResetStatusMessage string to invalidInputErrorMessage for legacy support\n          const selectedText = formatDate ? formatDate(selectedDate) : '';\n          const statusText = strings!.isResetStatusMessage\n            ? format(strings!.isResetStatusMessage, inputValue, selectedText)\n            : strings!.invalidInputErrorMessage || '';\n          setStatusMessage(statusText);\n        } else {\n          // Check against optional date boundaries\n          if (isDateOutOfBounds(date, minDate, maxDate)) {\n            setErrorMessage(strings!.isOutOfBoundsErrorMessage || ' ');\n          } else {\n            setSelectedDate(date);\n            setErrorMessage(undefined);\n            setStatusMessage(undefined);\n          }\n        }\n      } else {\n        // Only show error for empty inputValue if it is a required field\n        setErrorMessage(isRequired ? strings!.isRequiredErrorMessage || ' ' : undefined);\n\n        // If no input date string or input date string is invalid\n        // date variable will be null, callback should expect null value for this case\n        onSelectDate?.(date);\n      }\n    } else if (isRequired && !inputValue) {\n      // Check when DatePicker is a required field but has NO input value\n      setErrorMessage(strings!.isRequiredErrorMessage || ' ');\n    } else {\n      // Cleanup the error message and status message\n      setErrorMessage(undefined);\n      setStatusMessage(undefined);\n    }\n  };\n\n  React.useEffect(() => {\n    if (isRequired && !selectedDate) {\n      setErrorMessage(strings!.isRequiredErrorMessage || ' ');\n    } else if (selectedDate && isDateOutOfBounds(selectedDate, minDate, maxDate)) {\n      setErrorMessage(strings!.isOutOfBoundsErrorMessage || ' ');\n    } else {\n      setErrorMessage(undefined);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    // We don't want to compare the date itself, since two instances of date at the same time are not equal\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    minDate && getDatePartHashValue(minDate),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    maxDate && getDatePartHashValue(maxDate),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    selectedDate && getDatePartHashValue(selectedDate),\n    isRequired,\n  ]);\n\n  return [\n    isCalendarShown ? undefined : errorMessage,\n    validateTextInput,\n    setErrorMessage,\n    isCalendarShown ? undefined : statusMessage,\n    setStatusMessage,\n  ] as const;\n}\n\nexport const DatePickerBase: React.FunctionComponent<IDatePickerProps> = React.forwardRef<\n  HTMLDivElement,\n  IDatePickerProps\n>((propsWithoutDefaults, forwardedRef) => {\n  const props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n\n  const {\n    firstDayOfWeek,\n    strings,\n    label,\n    theme,\n    className,\n    styles,\n    initialPickerDate,\n    isRequired,\n    disabled,\n    ariaLabel,\n    pickerAriaLabel,\n    placeholder,\n    allowTextInput,\n    borderless,\n    minDate,\n    maxDate,\n    showCloseButton,\n    calendarProps,\n    calloutProps,\n    textField: textFieldProps,\n    underlined,\n    allFocusable,\n    calendarAs: CalendarType = Calendar,\n    tabIndex,\n    disableAutoFocus = true,\n  } = props;\n\n  const id = useId('DatePicker', props.id);\n  const calloutId = useId('DatePicker-Callout');\n\n  const calendar = React.useRef<ICalendar>(null);\n  const datePickerDiv = React.useRef<HTMLDivElement>(null);\n\n  const [textFieldRef, focus, preventFocusOpeningPicker, preventNextFocusOpeningPicker] = useFocusLogic();\n  const [isCalendarShown, setIsCalendarShown] = useCalendarVisibility(props, focus);\n  const [selectedDate, formattedDate, setSelectedDate, setFormattedDate] = useSelectedDate(props);\n  const [errorMessage, validateTextInput, setErrorMessage, statusMessage, setStatusMessage] = useErrorMessage(\n    props,\n    selectedDate,\n    setSelectedDate,\n    formattedDate,\n    isCalendarShown,\n  );\n\n  const showDatePickerPopup = React.useCallback((): void => {\n    if (!isCalendarShown) {\n      preventNextFocusOpeningPicker();\n      setIsCalendarShown(true);\n    }\n  }, [isCalendarShown, preventNextFocusOpeningPicker, setIsCalendarShown]);\n\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus,\n      reset() {\n        setIsCalendarShown(false);\n        setSelectedDate(undefined);\n        setErrorMessage(undefined);\n        setStatusMessage(undefined);\n      },\n      showDatePickerPopup,\n    }),\n    [focus, setErrorMessage, setIsCalendarShown, setSelectedDate, setStatusMessage, showDatePickerPopup],\n  );\n\n  const onTextFieldFocus = (): void => {\n    if (disableAutoFocus) {\n      return;\n    }\n\n    if (!allowTextInput) {\n      if (!preventFocusOpeningPicker.current) {\n        showDatePickerPopup();\n      }\n      preventFocusOpeningPicker.current = false;\n    }\n  };\n\n  const onSelectDate = (date: Date): void => {\n    if (props.calendarProps && props.calendarProps.onSelectDate) {\n      props.calendarProps.onSelectDate(date);\n    }\n\n    calendarDismissed(date);\n  };\n\n  const onCalloutPositioned = (): void => {\n    let shouldFocus = true;\n    // If the user has specified that the callout shouldn't use initial focus, then respect\n    // that and don't attempt to set focus. That will default to true within the callout\n    // so we need to check if it's undefined here.\n    if (props.calloutProps && props.calloutProps.setInitialFocus !== undefined) {\n      shouldFocus = props.calloutProps.setInitialFocus;\n    }\n    if (calendar.current && shouldFocus) {\n      calendar.current.focus();\n    }\n  };\n\n  const onTextFieldBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    validateTextInput();\n  };\n\n  const onTextFieldChanged = (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue: string): void => {\n    const { textField } = props;\n\n    if (allowTextInput) {\n      if (isCalendarShown) {\n        dismissDatePickerPopup();\n      }\n\n      setFormattedDate(newValue);\n    }\n\n    textField?.onChange?.(ev, newValue);\n  };\n\n  const onTextFieldKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.enter:\n        ev.preventDefault();\n        ev.stopPropagation();\n        if (!isCalendarShown) {\n          validateTextInput();\n          showDatePickerPopup();\n        } else {\n          // When DatePicker allows input date string directly,\n          // it is expected to hit another enter to close the popup\n          if (props.allowTextInput) {\n            dismissDatePickerPopup();\n          }\n        }\n        break;\n\n      case KeyCodes.escape:\n        handleEscKey(ev);\n        break;\n\n      case KeyCodes.down:\n        if (ev.altKey && !isCalendarShown) {\n          showDatePickerPopup();\n        }\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const onTextFieldClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    // default openOnClick to !props.disableAutoFocus for legacy support of disableAutoFocus behavior\n    const openOnClick = props.openOnClick || !props.disableAutoFocus;\n    if (openOnClick && !isCalendarShown && !props.disabled) {\n      showDatePickerPopup();\n      return;\n    }\n    if (props.allowTextInput) {\n      dismissDatePickerPopup();\n    }\n  };\n\n  const onIconClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    ev.stopPropagation();\n    if (!isCalendarShown && !props.disabled) {\n      showDatePickerPopup();\n    } else if (props.allowTextInput) {\n      dismissDatePickerPopup();\n    }\n  };\n\n  const dismissDatePickerPopup = (newlySelectedDate?: Date): void => {\n    if (isCalendarShown) {\n      setIsCalendarShown(false);\n\n      validateTextInput(newlySelectedDate);\n      if (!allowTextInput && newlySelectedDate) {\n        setSelectedDate(newlySelectedDate);\n      }\n    }\n  };\n\n  const renderTextfieldDescription = (inputProps: ITextFieldProps, defaultRender: IRenderFunction<ITextFieldProps>) => {\n    return (\n      <>\n        {inputProps.description ? defaultRender(inputProps) : null}\n        <div aria-live=\"assertive\" className={classNames.statusMessage}>\n          {statusMessage}\n        </div>\n      </>\n    );\n  };\n\n  const renderReadOnlyInput: ITextFieldProps['onRenderInput'] = inputProps => {\n    const divProps = getNativeProps(inputProps!, divProperties);\n\n    // Talkback on Android treats readonly inputs as disabled, so swipe gestures to open the Calendar\n    // don't register. Workaround is rendering a div with role=\"combobox\" (passed in via TextField props).\n    return (\n      <div {...divProps} className={css(divProps.className, classNames.readOnlyTextField)} tabIndex={tabIndex || 0}>\n        {formattedDate || (\n          // Putting the placeholder in a separate span fixes specificity issues for the text color\n          <span className={classNames.readOnlyPlaceholder}>{placeholder}</span>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Callback for closing the calendar callout\n   */\n  const calendarDismissed = (newlySelectedDate?: Date): void => {\n    preventNextFocusOpeningPicker();\n    dismissDatePickerPopup(newlySelectedDate);\n    // don't need to focus the text box, if necessary the focusTrapZone will do it\n  };\n\n  const calloutDismissed = (ev: React.MouseEvent<HTMLElement>): void => {\n    calendarDismissed();\n  };\n\n  const handleEscKey = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    ev.stopPropagation();\n    calendarDismissed();\n  };\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    className,\n    disabled,\n    underlined,\n    label: !!label,\n    isDatePickerShown: isCalendarShown,\n  });\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties, ['value']);\n  const iconProps = textFieldProps && textFieldProps.iconProps;\n  const textFieldId =\n    textFieldProps && textFieldProps.id && textFieldProps.id !== id ? textFieldProps.id : id + '-label';\n  const readOnly = !allowTextInput && !disabled;\n\n  return (\n    <div {...nativeProps} className={classNames.root} ref={forwardedRef}>\n      <div ref={datePickerDiv} aria-owns={isCalendarShown ? calloutId : undefined} className={classNames.wrapper}>\n        <TextField\n          role=\"combobox\"\n          label={label}\n          aria-expanded={isCalendarShown}\n          ariaLabel={ariaLabel}\n          aria-haspopup=\"dialog\"\n          aria-controls={isCalendarShown ? calloutId : undefined}\n          required={isRequired}\n          disabled={disabled}\n          errorMessage={errorMessage}\n          placeholder={placeholder}\n          borderless={borderless}\n          value={formattedDate}\n          componentRef={textFieldRef}\n          underlined={underlined}\n          tabIndex={tabIndex}\n          readOnly={!allowTextInput}\n          {...textFieldProps}\n          id={textFieldId}\n          className={css(classNames.textField, textFieldProps && textFieldProps.className)}\n          iconProps={{\n            iconName: 'Calendar',\n            ...iconProps,\n            className: css(classNames.icon, iconProps && iconProps.className),\n            onClick: onIconClick,\n          }}\n          // eslint-disable-next-line react/jsx-no-bind\n          onRenderDescription={renderTextfieldDescription}\n          // eslint-disable-next-line react/jsx-no-bind\n          onKeyDown={onTextFieldKeyDown}\n          // eslint-disable-next-line react/jsx-no-bind\n          onFocus={onTextFieldFocus}\n          // eslint-disable-next-line react/jsx-no-bind\n          onBlur={onTextFieldBlur}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={onTextFieldClick}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={onTextFieldChanged}\n          onRenderInput={readOnly ? renderReadOnlyInput : undefined}\n        />\n      </div>\n      {isCalendarShown && (\n        <Callout\n          id={calloutId}\n          role=\"dialog\"\n          ariaLabel={pickerAriaLabel}\n          isBeakVisible={false}\n          gapSpace={0}\n          doNotLayer={false}\n          target={datePickerDiv.current}\n          directionalHint={DirectionalHint.bottomLeftEdge}\n          {...calloutProps}\n          className={css(classNames.callout, calloutProps && calloutProps.className)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={calloutDismissed}\n          // eslint-disable-next-line react/jsx-no-bind\n          onPositioned={onCalloutPositioned}\n        >\n          <FocusTrapZone isClickableOutsideFocusTrap={true} disableFirstFocus={disableAutoFocus}>\n            <CalendarType\n              {...calendarProps}\n              // eslint-disable-next-line react/jsx-no-bind\n              onSelectDate={onSelectDate}\n              // eslint-disable-next-line react/jsx-no-bind\n              onDismiss={calendarDismissed}\n              isMonthPickerVisible={props.isMonthPickerVisible}\n              showMonthPickerAsOverlay={props.showMonthPickerAsOverlay}\n              today={props.today}\n              value={selectedDate || initialPickerDate}\n              firstDayOfWeek={firstDayOfWeek}\n              strings={strings!}\n              highlightCurrentMonth={props.highlightCurrentMonth}\n              highlightSelectedMonth={props.highlightSelectedMonth}\n              showWeekNumbers={props.showWeekNumbers}\n              firstWeekOfYear={props.firstWeekOfYear}\n              showGoToToday={props.showGoToToday}\n              dateTimeFormatter={props.dateTimeFormatter}\n              minDate={minDate}\n              maxDate={maxDate}\n              componentRef={calendar}\n              showCloseButton={showCloseButton}\n              allFocusable={allFocusable}\n            />\n          </FocusTrapZone>\n        </Callout>\n      )}\n    </div>\n  );\n});\nDatePickerBase.displayName = 'DatePickerBase';\n\nfunction isDateOutOfBounds(date: Date, minDate?: Date, maxDate?: Date): boolean {\n  return (!!minDate && compareDatePart(minDate!, date) > 0) || (!!maxDate && compareDatePart(maxDate!, date) < 0);\n}\n"]},"metadata":{},"sourceType":"module"}