{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { useControllableValue, useId, useMergedRefs, useWarnings } from '@fluentui/react-hooks';\nimport { useFocusRects, classNamesFunction } from '@fluentui/utilities';\nimport { Icon } from '../Icon/Icon';\nvar getClassNames = classNamesFunction();\nexport var CheckboxBase = React.forwardRef(function (props, forwardedRef) {\n  var disabled = props.disabled,\n      required = props.required,\n      inputProps = props.inputProps,\n      name = props.name,\n      ariaLabel = props.ariaLabel,\n      ariaLabelledBy = props.ariaLabelledBy,\n      ariaDescribedBy = props.ariaDescribedBy,\n      ariaPositionInSet = props.ariaPositionInSet,\n      ariaSetSize = props.ariaSetSize,\n      title = props.title,\n      checkmarkIconProps = props.checkmarkIconProps,\n      styles = props.styles,\n      theme = props.theme,\n      className = props.className,\n      _a = props.boxSide,\n      boxSide = _a === void 0 ? 'start' : _a;\n  var id = useId('checkbox-', props.id);\n  var rootRef = React.useRef(null);\n  var mergedRootRefs = useMergedRefs(rootRef, forwardedRef);\n  var inputRef = React.useRef(null);\n\n  var _b = useControllableValue(props.checked, props.defaultChecked, props.onChange),\n      isChecked = _b[0],\n      setIsChecked = _b[1];\n\n  var _c = useControllableValue(props.indeterminate, props.defaultIndeterminate),\n      isIndeterminate = _c[0],\n      setIsIndeterminate = _c[1];\n\n  useFocusRects(rootRef);\n  useDebugWarning(props);\n  useComponentRef(props, isChecked, isIndeterminate, inputRef);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    disabled: disabled,\n    indeterminate: isIndeterminate,\n    checked: isChecked,\n    reversed: boxSide !== 'start',\n    isUsingCustomLabelRender: !!props.onRenderLabel\n  });\n\n  var onChange = function onChange(ev) {\n    if (isIndeterminate) {\n      // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n      // controlled, lets the consumer know to change it by calling onChange). It doesn't\n      // change the checked state.\n      setIsChecked(!!isChecked, ev);\n      setIsIndeterminate(false);\n    } else {\n      setIsChecked(!isChecked, ev);\n    }\n  };\n\n  var defaultLabelRenderer = React.useCallback(function (checkboxProps) {\n    if (!checkboxProps) {\n      return null;\n    }\n\n    return checkboxProps.label ? React.createElement(\"span\", {\n      className: classNames.text,\n      title: checkboxProps.title\n    }, checkboxProps.label) : null;\n  }, [classNames.text]);\n  var onRenderLabel = props.onRenderLabel || defaultLabelRenderer;\n  var ariaChecked = isIndeterminate ? 'mixed' : undefined;\n\n  var mergedInputProps = __assign(__assign({\n    className: classNames.input,\n    type: 'checkbox'\n  }, inputProps), {\n    checked: !!isChecked,\n    disabled: disabled,\n    required: required,\n    name: name,\n    id: id,\n    title: title,\n    onChange: onChange,\n    'aria-disabled': disabled,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-posinset': ariaPositionInSet,\n    'aria-setsize': ariaSetSize,\n    'aria-checked': ariaChecked\n  });\n\n  return React.createElement(\"div\", {\n    className: classNames.root,\n    title: title,\n    ref: mergedRootRefs\n  }, React.createElement(\"input\", __assign({}, mergedInputProps, {\n    ref: inputRef,\n    title: title,\n    \"data-ktp-execute-target\": true\n  })), React.createElement(\"label\", {\n    className: classNames.label,\n    htmlFor: id\n  }, React.createElement(\"div\", {\n    className: classNames.checkbox,\n    \"data-ktp-target\": true\n  }, React.createElement(Icon, __assign({\n    iconName: \"CheckMark\"\n  }, checkmarkIconProps, {\n    className: classNames.checkmark\n  }))), onRenderLabel(props, defaultLabelRenderer)));\n});\nCheckboxBase.displayName = 'CheckboxBase';\n\nfunction useDebugWarning(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: 'Checkbox',\n      props: props,\n      mutuallyExclusive: {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate'\n      }\n    });\n  }\n}\n\nfunction useComponentRef(props, isChecked, isIndeterminate, checkBoxRef) {\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      get checked() {\n        return !!isChecked;\n      },\n\n      get indeterminate() {\n        return !!isIndeterminate;\n      },\n\n      focus: function focus() {\n        if (checkBoxRef.current) {\n          checkBoxRef.current.focus();\n        }\n      }\n    };\n  }, [checkBoxRef, isChecked, isIndeterminate]);\n}","map":{"version":3,"mappings":"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","names":["React","useControllableValue","useId","useMergedRefs","useWarnings","useFocusRects","classNamesFunction","Icon","getClassNames","CheckboxBase","forwardRef","props","forwardedRef","required","inputProps","name","ariaLabel","ariaLabelledBy","ariaDescribedBy","ariaPositionInSet","ariaSetSize","title","checkmarkIconProps","styles","theme","className","_a","boxSide","id","rootRef","useRef","mergedRootRefs","inputRef","checked","defaultChecked","onChange","isChecked","setIsChecked","indeterminate","defaultIndeterminate","isIndeterminate","setIsIndeterminate","useDebugWarning","useComponentRef","classNames","disabled","reversed","isUsingCustomLabelRender","onRenderLabel","ev","defaultLabelRenderer","useCallback","checkboxProps","label","text","ariaChecked","undefined","mergedInputProps","input","type","root","ref","htmlFor","checkbox","__assign","iconName","checkmark","displayName","process","env","NODE_ENV","mutuallyExclusive","checkBoxRef","useImperativeHandle","componentRef","focus","current"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/Checkbox/Checkbox.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useControllableValue, useId, useMergedRefs, useWarnings } from '@fluentui/react-hooks';\nimport { useFocusRects, classNamesFunction } from '@fluentui/utilities';\nimport { Icon } from '../Icon/Icon';\nimport type { ICheckboxProps, ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\n\nconst getClassNames = classNamesFunction<ICheckboxStyleProps, ICheckboxStyles>();\n\nexport const CheckboxBase: React.FunctionComponent<ICheckboxProps> = React.forwardRef<HTMLDivElement, ICheckboxProps>(\n  (props, forwardedRef) => {\n    const {\n      disabled,\n      required,\n      inputProps,\n      name,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      ariaPositionInSet,\n      ariaSetSize,\n      title,\n      checkmarkIconProps,\n      styles,\n      theme,\n      className,\n      boxSide = 'start',\n    } = props;\n\n    const id = useId('checkbox-', props.id);\n\n    const rootRef = React.useRef<HTMLDivElement | null>(null);\n    const mergedRootRefs: React.Ref<HTMLDivElement> = useMergedRefs(rootRef, forwardedRef);\n    const inputRef = React.useRef<HTMLInputElement>(null);\n\n    const [isChecked, setIsChecked] = useControllableValue(props.checked, props.defaultChecked, props.onChange);\n    const [isIndeterminate, setIsIndeterminate] = useControllableValue(props.indeterminate, props.defaultIndeterminate);\n\n    useFocusRects(rootRef);\n    useDebugWarning(props);\n    useComponentRef(props, isChecked, isIndeterminate, inputRef);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: boxSide !== 'start',\n      isUsingCustomLabelRender: !!props.onRenderLabel,\n    });\n\n    const onChange = (ev: React.ChangeEvent<HTMLElement>): void => {\n      if (isIndeterminate) {\n        // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n        // controlled, lets the consumer know to change it by calling onChange). It doesn't\n        // change the checked state.\n        setIsChecked(!!isChecked, ev);\n        setIsIndeterminate(false);\n      } else {\n        setIsChecked(!isChecked, ev);\n      }\n    };\n\n    const defaultLabelRenderer = React.useCallback(\n      (checkboxProps?: ICheckboxProps): JSX.Element | null => {\n        if (!checkboxProps) {\n          return null;\n        }\n        return checkboxProps.label ? (\n          <span className={classNames.text} title={checkboxProps.title}>\n            {checkboxProps.label}\n          </span>\n        ) : null;\n      },\n      [classNames.text],\n    );\n\n    const onRenderLabel = props.onRenderLabel || defaultLabelRenderer;\n\n    const ariaChecked: React.InputHTMLAttributes<HTMLInputElement>['aria-checked'] = isIndeterminate\n      ? 'mixed'\n      : undefined;\n\n    const mergedInputProps: React.InputHTMLAttributes<HTMLInputElement> = {\n      className: classNames.input,\n      type: 'checkbox' as React.InputHTMLAttributes<HTMLInputElement>['type'],\n      ...inputProps,\n      checked: !!isChecked,\n      disabled,\n      required,\n      name,\n      id,\n      title,\n      onChange,\n      'aria-disabled': disabled,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedBy,\n      'aria-posinset': ariaPositionInSet,\n      'aria-setsize': ariaSetSize,\n      'aria-checked': ariaChecked,\n    };\n\n    return (\n      <div className={classNames.root} title={title} ref={mergedRootRefs}>\n        <input {...mergedInputProps} ref={inputRef} title={title} data-ktp-execute-target={true} />\n        <label className={classNames.label} htmlFor={id}>\n          <div className={classNames.checkbox} data-ktp-target={true}>\n            <Icon iconName=\"CheckMark\" {...checkmarkIconProps} className={classNames.checkmark} />\n          </div>\n          {onRenderLabel(props, defaultLabelRenderer)}\n        </label>\n      </div>\n    );\n  },\n);\n\nCheckboxBase.displayName = 'CheckboxBase';\n\nfunction useDebugWarning(props: ICheckboxProps) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: 'Checkbox',\n      props,\n      mutuallyExclusive: {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate',\n      },\n    });\n  }\n}\n\nfunction useComponentRef(\n  props: ICheckboxProps,\n  isChecked: boolean | undefined,\n  isIndeterminate: boolean | undefined,\n  checkBoxRef: React.RefObject<HTMLInputElement>,\n) {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      get checked() {\n        return !!isChecked;\n      },\n      get indeterminate() {\n        return !!isIndeterminate;\n      },\n      focus() {\n        if (checkBoxRef.current) {\n          checkBoxRef.current.focus();\n        }\n      },\n    }),\n    [checkBoxRef, isChecked, isIndeterminate],\n  );\n}\n"]},"metadata":{},"sourceType":"module"}