{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nvar getClassNames = classNamesFunction();\n\nvar SpinnerBase =\n/** @class */\nfunction (_super) {\n  __extends(SpinnerBase, _super);\n\n  function SpinnerBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SpinnerBase.prototype.render = function () {\n    // eslint-disable-next-line deprecation/deprecation\n    var _a = this.props,\n        type = _a.type,\n        size = _a.size,\n        ariaLabel = _a.ariaLabel,\n        ariaLive = _a.ariaLive,\n        styles = _a.styles,\n        label = _a.label,\n        theme = _a.theme,\n        className = _a.className,\n        labelPosition = _a.labelPosition;\n    var statusMessage = ariaLabel;\n    var nativeProps = getNativeProps(this.props, divProperties, ['size']); // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n\n    var styleSize = size;\n\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      size: styleSize,\n      className: className,\n      labelPosition: labelPosition\n    });\n    return React.createElement(\"div\", __assign({}, nativeProps, {\n      className: classNames.root\n    }), React.createElement(\"div\", {\n      className: classNames.circle\n    }), label && React.createElement(\"div\", {\n      className: classNames.label\n    }, label), statusMessage && React.createElement(\"div\", {\n      role: \"status\",\n      \"aria-live\": ariaLive\n    }, React.createElement(DelayedRender, null, React.createElement(\"div\", {\n      className: classNames.screenReaderText\n    }, statusMessage))));\n  };\n\n  SpinnerBase.defaultProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom'\n  };\n  return SpinnerBase;\n}(React.Component);\n\nexport { SpinnerBase };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,iBAAzC;AACA,SAASC,kBAAT,EAA6BC,aAA7B,EAA4CC,cAA5C,EAA4DC,aAA5D,QAAiF,iBAAjF;AAGA,IAAMC,aAAa,GAAGJ,kBAAkB,EAAxC;;AAEA;AAAA;AAAA;AAAiCK;;AAAjC;;AA2CC;;AApCQC,iCAAP;AACE;AACM,aAAsF,KAAKC,KAA3F;AAAA,QAAEC,IAAI,UAAN;AAAA,QAAQC,IAAI,UAAZ;AAAA,QAAcC,SAAS,eAAvB;AAAA,QAAyBC,QAAQ,cAAjC;AAAA,QAAmCC,MAAM,YAAzC;AAAA,QAA2CC,KAAK,WAAhD;AAAA,QAAkDC,KAAK,WAAvD;AAAA,QAAyDC,SAAS,eAAlE;AAAA,QAAoEC,aAAa,mBAAjF;AACN,QAAMC,aAAa,GAAGP,SAAtB;AACA,QAAMQ,WAAW,GAAGhB,cAAc,CAAuC,KAAKK,KAA5C,EAAmDJ,aAAnD,EAAkE,CAAC,MAAD,CAAlE,CAAlC,CAJF,CAME;AACA;AACA;;AACA,QAAIgB,SAAS,GAAGV,IAAhB;;AACA,QAAIU,SAAS,KAAKC,SAAd,IAA2BZ,IAAI,KAAKY,SAAxC,EAAmD;AACjD;AACAD,eAAS,GAAGX,IAAI,KAAKV,WAAW,CAACuB,KAArB,GAA6BtB,WAAW,CAACsB,KAAzC,GAAiDtB,WAAW,CAACuB,MAAzE;AACD;;AAED,QAAMC,UAAU,GAAGnB,aAAa,CAACQ,MAAD,EAAU;AACxCE,WAAK,EAAEA,KADiC;AAExCL,UAAI,EAAEU,SAFkC;AAGxCJ,eAAS,WAH+B;AAIxCC,mBAAa;AAJ2B,KAAV,CAAhC;AAOA,WACEnB,wCAASqB,WAAT,EAAoB;AAAEH,eAAS,EAAEQ,UAAU,CAACC;AAAxB,KAApB,GACE3B;AAAKkB,eAAS,EAAEQ,UAAU,CAACE;AAA3B,MADF,EAEGZ,KAAK,IAAIhB;AAAKkB,eAAS,EAAEQ,UAAU,CAACV;AAA3B,OAAmCA,KAAnC,CAFZ,EAGGI,aAAa,IACZpB;AAAK6B,UAAI,EAAC,QAAV;AAAkB,mBAAYf;AAA9B,OACEd,oBAACI,aAAD,EAAc,IAAd,EACEJ;AAAKkB,eAAS,EAAEQ,UAAU,CAACI;AAA3B,OAA8CV,aAA9C,CADF,CADF,CAJJ,CADF;AAaD,GAnCM;;AANOX,6BAA8B;AAC1CG,QAAI,EAAEV,WAAW,CAACuB,MADwB;AAE1CX,YAAQ,EAAE,QAFgC;AAG1CK,iBAAa,EAAE;AAH2B,GAA9B;AA0ChB;AA3CA,EAAiCnB,KAAK,CAAC+B,SAAvC;;SAAatB","names":["React","SpinnerType","SpinnerSize","classNamesFunction","DelayedRender","getNativeProps","divProperties","getClassNames","__extends","SpinnerBase","props","type","size","ariaLabel","ariaLive","styles","label","theme","className","labelPosition","statusMessage","nativeProps","styleSize","undefined","large","medium","classNames","root","circle","role","screenReaderText","Component"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/Spinner/Spinner.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport type { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles } from './Spinner.types';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\nexport class SpinnerBase extends React.Component<ISpinnerProps, any> {\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom',\n  };\n\n  public render() {\n    // eslint-disable-next-line deprecation/deprecation\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\n    const statusMessage = ariaLabel;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      size: styleSize,\n      className,\n      labelPosition,\n    });\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div className={classNames.circle} />\n        {label && <div className={classNames.label}>{label}</div>}\n        {statusMessage && (\n          <div role=\"status\" aria-live={ariaLive}>\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}