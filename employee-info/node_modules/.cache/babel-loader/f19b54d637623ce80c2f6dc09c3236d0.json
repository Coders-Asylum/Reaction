{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@fluentui/utilities';\nimport { useDocument } from '@fluentui/react-window-provider';\nimport { makeStyles } from './makeStyles'; // eslint-disable-next-line deprecation/deprecation\n\nvar useThemeProviderStyles = makeStyles(function (theme) {\n  var semanticColors = theme.semanticColors,\n      fonts = theme.fonts;\n  return {\n    body: [{\n      color: semanticColors.bodyText,\n      background: semanticColors.bodyBackground,\n      fontFamily: fonts.medium.fontFamily,\n      fontWeight: fonts.medium.fontWeight,\n      fontSize: fonts.medium.fontSize,\n      MozOsxFontSmoothing: fonts.medium.MozOsxFontSmoothing,\n      WebkitFontSmoothing: fonts.medium.WebkitFontSmoothing\n    }]\n  };\n});\n/**\n * Hook to add class to body element.\n */\n\nfunction useApplyClassToBody(state, classesToApply) {\n  var _a;\n\n  var applyTo = state.applyTo;\n  var applyToBody = applyTo === 'body';\n  var body = (_a = useDocument()) === null || _a === void 0 ? void 0 : _a.body;\n  React.useEffect(function () {\n    if (!applyToBody || !body) {\n      return;\n    }\n\n    for (var _i = 0, classesToApply_1 = classesToApply; _i < classesToApply_1.length; _i++) {\n      var classToApply = classesToApply_1[_i];\n\n      if (classToApply) {\n        body.classList.add(classToApply);\n      }\n    }\n\n    return function () {\n      if (!applyToBody || !body) {\n        return;\n      }\n\n      for (var _i = 0, classesToApply_2 = classesToApply; _i < classesToApply_2.length; _i++) {\n        var classToApply = classesToApply_2[_i];\n\n        if (classToApply) {\n          body.classList.remove(classToApply);\n        }\n      }\n    };\n  }, [applyToBody, body, classesToApply]);\n}\n\nexport function useThemeProviderClasses(state) {\n  var classes = useThemeProviderStyles(state);\n  var className = state.className,\n      applyTo = state.applyTo;\n  useApplyClassToBody(state, [classes.root, classes.body]);\n  state.className = css(className, classes.root, applyTo === 'element' && classes.body);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,qBAApB;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAASC,UAAT,QAA2B,cAA3B,C,CAIA;;AACA,IAAMC,sBAAsB,GAAGD,UAAU,CAAC,UAACE,KAAD,EAAa;AAC7C,oBAAc,GAAYA,KAAK,eAA/B;AAAA,MAAgBC,KAAK,GAAKD,KAAK,MAA/B;AAER,SAAO;AACLE,QAAI,EAAE,CACJ;AACEC,WAAK,EAAEC,cAAc,CAACC,QADxB;AAEEC,gBAAU,EAAEF,cAAc,CAACG,cAF7B;AAGEC,gBAAU,EAAEP,KAAK,CAACQ,MAAN,CAAaD,UAH3B;AAIEE,gBAAU,EAAET,KAAK,CAACQ,MAAN,CAAaC,UAJ3B;AAKEC,cAAQ,EAAEV,KAAK,CAACQ,MAAN,CAAaE,QALzB;AAMEC,yBAAmB,EAAEX,KAAK,CAACQ,MAAN,CAAaG,mBANpC;AAOEC,yBAAmB,EAAEZ,KAAK,CAACQ,MAAN,CAAaI;AAPpC,KADI;AADD,GAAP;AAaD,CAhBwC,CAAzC;AAkBA;;;;AAGA,SAASC,mBAAT,CAA6BC,KAA7B,EAAwDC,cAAxD,EAAgF;;;AACtE,aAAO,GAAKD,KAAK,QAAjB;AAER,MAAME,WAAW,GAAGC,OAAO,KAAK,MAAhC;AACA,MAAMhB,IAAI,GAAG,iBAAW,EAAX,MAAa,IAAb,IAAaiB,aAAb,GAAa,MAAb,GAAaA,GAAEjB,IAA5B;AAEAP,OAAK,CAACyB,SAAN,CAAgB;AACd,QAAI,CAACH,WAAD,IAAgB,CAACf,IAArB,EAA2B;AACzB;AACD;;AAED,SAA2B,6CAA3B,EAA2BmB,4BAA3B,EAA2BA,IAA3B,EAA2C;AAAtC,UAAMC,YAAY,uBAAlB;;AACH,UAAIA,YAAJ,EAAkB;AAChBpB,YAAI,CAACqB,SAAL,CAAeC,GAAf,CAAmBF,YAAnB;AACD;AACF;;AAED,WAAO;AACL,UAAI,CAACL,WAAD,IAAgB,CAACf,IAArB,EAA2B;AACzB;AACD;;AAED,WAA2B,6CAA3B,EAA2BmB,4BAA3B,EAA2BA,IAA3B,EAA2C;AAAtC,YAAMC,YAAY,uBAAlB;;AACH,YAAIA,YAAJ,EAAkB;AAChBpB,cAAI,CAACqB,SAAL,CAAeE,MAAf,CAAsBH,YAAtB;AACD;AACF;AACF,KAVD;AAWD,GAtBD,EAsBG,CAACL,WAAD,EAAcf,IAAd,EAAoBc,cAApB,CAtBH;AAuBD;;AAED,OAAM,SAAUU,uBAAV,CAAkCX,KAAlC,EAA2D;AAC/D,MAAMY,OAAO,GAAG5B,sBAAsB,CAACgB,KAAD,CAAtC;AACQ,eAAS,GAAcA,KAAK,UAA5B;AAAA,MAAWG,OAAO,GAAKH,KAAK,QAA5B;AAERD,qBAAmB,CAACC,KAAD,EAAQ,CAACY,OAAO,CAACC,IAAT,EAAeD,OAAO,CAACzB,IAAvB,CAAR,CAAnB;AAEAa,OAAK,CAACc,SAAN,GAAkBjC,GAAG,CAACiC,SAAD,EAAYF,OAAO,CAACC,IAApB,EAA0BV,OAAO,KAAK,SAAZ,IAAyBS,OAAO,CAACzB,IAA3D,CAArB;AACD","names":["React","css","useDocument","makeStyles","useThemeProviderStyles","theme","fonts","body","color","semanticColors","bodyText","background","bodyBackground","fontFamily","medium","fontWeight","fontSize","MozOsxFontSmoothing","WebkitFontSmoothing","useApplyClassToBody","state","classesToApply","applyToBody","applyTo","_a","useEffect","_i","classToApply","classList","add","remove","useThemeProviderClasses","classes","root","className"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/utilities/src/utilities/ThemeProvider/useThemeProviderClasses.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@fluentui/utilities';\nimport { useDocument } from '@fluentui/react-window-provider';\nimport { makeStyles } from './makeStyles';\nimport type { ThemeProviderState } from './ThemeProvider.types';\nimport type { Theme } from '@fluentui/theme';\n\n// eslint-disable-next-line deprecation/deprecation\nconst useThemeProviderStyles = makeStyles((theme: Theme) => {\n  const { semanticColors, fonts } = theme;\n\n  return {\n    body: [\n      {\n        color: semanticColors.bodyText,\n        background: semanticColors.bodyBackground,\n        fontFamily: fonts.medium.fontFamily,\n        fontWeight: fonts.medium.fontWeight,\n        fontSize: fonts.medium.fontSize,\n        MozOsxFontSmoothing: fonts.medium.MozOsxFontSmoothing,\n        WebkitFontSmoothing: fonts.medium.WebkitFontSmoothing,\n      },\n    ],\n  } as Record<string, any>;\n});\n\n/**\n * Hook to add class to body element.\n */\nfunction useApplyClassToBody(state: ThemeProviderState, classesToApply: string[]): void {\n  const { applyTo } = state;\n\n  const applyToBody = applyTo === 'body';\n  const body = useDocument()?.body;\n\n  React.useEffect(() => {\n    if (!applyToBody || !body) {\n      return;\n    }\n\n    for (const classToApply of classesToApply) {\n      if (classToApply) {\n        body.classList.add(classToApply);\n      }\n    }\n\n    return () => {\n      if (!applyToBody || !body) {\n        return;\n      }\n\n      for (const classToApply of classesToApply) {\n        if (classToApply) {\n          body.classList.remove(classToApply);\n        }\n      }\n    };\n  }, [applyToBody, body, classesToApply]);\n}\n\nexport function useThemeProviderClasses(state: ThemeProviderState): void {\n  const classes = useThemeProviderStyles(state);\n  const { className, applyTo } = state;\n\n  useApplyClassToBody(state, [classes.root, classes.body]);\n\n  state.className = css(className, classes.root, applyTo === 'element' && classes.body);\n}\n"]},"metadata":{},"sourceType":"module"}