{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, initializeComponentRef } from '../../../Utilities';\nimport { CommandButton, IconButton } from '../../../Button';\nimport * as stylesImport from './Suggestions.scss';\nvar legacyStyles = stylesImport;\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Pickers}\n */\n\nvar SuggestionsItem =\n/** @class */\nfunction (_super) {\n  __extends(SuggestionsItem, _super);\n\n  function SuggestionsItem(props) {\n    var _this = _super.call(this, props) || this;\n\n    initializeComponentRef(_this);\n    return _this;\n  }\n\n  SuggestionsItem.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        suggestionModel = _b.suggestionModel,\n        RenderSuggestion = _b.RenderSuggestion,\n        onClick = _b.onClick,\n        className = _b.className,\n        id = _b.id,\n        onRemoveItem = _b.onRemoveItem,\n        isSelectedOverride = _b.isSelectedOverride,\n        removeButtonAriaLabel = _b.removeButtonAriaLabel,\n        styles = _b.styles,\n        theme = _b.theme,\n        removeButtonIconProps = _b.removeButtonIconProps; // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from SuggestionsItem class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in Suggestions when the typed SuggestionsItem class is ready to be rendered. If the\n    // check passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n\n    var classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      suggested: suggestionModel.selected || isSelectedOverride\n    }) : {\n      root: css('ms-Suggestions-item', legacyStyles.suggestionsItem, (_a = {}, _a['is-suggested ' + legacyStyles.suggestionsItemIsSuggested] = suggestionModel.selected || isSelectedOverride, _a), className),\n      itemButton: css('ms-Suggestions-itemButton', legacyStyles.itemButton),\n      closeButton: css('ms-Suggestions-closeButton', legacyStyles.closeButton)\n    };\n    return React.createElement(\"div\", {\n      className: classNames.root,\n      role: \"presentation\"\n    }, React.createElement(CommandButton, {\n      onClick: onClick,\n      className: classNames.itemButton,\n      id: id,\n      \"aria-selected\": suggestionModel.selected,\n      role: \"option\",\n      \"aria-label\": suggestionModel.ariaLabel\n    }, RenderSuggestion(suggestionModel.item, this.props)), this.props.showRemoveButton ? React.createElement(IconButton, {\n      iconProps: removeButtonIconProps !== null && removeButtonIconProps !== void 0 ? removeButtonIconProps : {\n        iconName: 'Cancel'\n      },\n      styles: {\n        icon: {\n          fontSize: '12px'\n        }\n      },\n      title: removeButtonAriaLabel,\n      ariaLabel: removeButtonAriaLabel,\n      onClick: onRemoveItem,\n      className: classNames.closeButton\n    }) : null);\n  };\n\n  return SuggestionsItem;\n}(React.Component);\n\nexport { SuggestionsItem };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,kBAAT,EAA6BC,GAA7B,EAAkCC,sBAAlC,QAAgE,oBAAhE;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,iBAA1C;AACA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;AAIA,IAAMC,YAAY,GAAQD,YAA1B;AAEA,IAAME,aAAa,GAAGP,kBAAkB,EAAxC;AAEA;;;;AAGA;AAAA;AAAA;AAAwCQ;;AACtC,2BAAYC,KAAZ,EAA0C;AAA1C,gBACEC,kBAAMD,KAAN,KAAY,IADd;;AAGEP,0BAAsB,CAACS,KAAD,CAAtB;;AACD;;AAEMC,qCAAP;;;AACQ,aAYF,KAAKH,KAZH;AAAA,QACJI,eAAe,qBADX;AAAA,QAEJC,gBAAgB,sBAFZ;AAAA,QAGJC,OAAO,aAHH;AAAA,QAIJC,SAAS,eAJL;AAAA,QAKJC,EAAE,QALE;AAAA,QAMJC,YAAY,kBANR;AAAA,QAOJC,kBAAkB,wBAPd;AAAA,QAQJC,qBAAqB,2BARjB;AAAA,QASJC,MAAM,YATF;AAAA,QAUJC,KAAK,WAVD;AAAA,QAWJC,qBAAqB,2BAXjB,CADR,CAeE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMC,UAAU,GAAwDH,MAAM,GAC1Ed,aAAa,CAACc,MAAD,EAAS;AACpBC,WAAK,EAAEA,KADa;AAEpBN,eAAS,WAFW;AAGpBS,eAAS,EAAEZ,eAAe,CAACa,QAAhB,IAA4BP;AAHnB,KAAT,CAD6D,GAM1E;AACEQ,UAAI,EAAE1B,GAAG,CACP,qBADO,EAEPK,YAAY,CAACsB,eAFN,GAEqBC,SAE1BA,GAAC,kBAAkBvB,YAAY,CAACwB,0BAAhC,IACEjB,eAAe,CAACa,QAAhB,IAA4BP,kBAHJ,IAFrB,GAOPH,SAPO,CADX;AAUEe,gBAAU,EAAE9B,GAAG,CAAC,2BAAD,EAA8BK,YAAY,CAACyB,UAA3C,CAVjB;AAWEC,iBAAW,EAAE/B,GAAG,CAAC,4BAAD,EAA+BK,YAAY,CAAC0B,WAA5C;AAXlB,KANJ;AAoBA,WACEjC;AAAKiB,eAAS,EAAEQ,UAAU,CAACG,IAA3B;AAAiCM,UAAI,EAAC;AAAtC,OACElC,oBAACI,aAAD,EAAc;AACZY,aAAO,EAAEA,OADG;AAEZC,eAAS,EAAEQ,UAAU,CAACO,UAFV;AAGZd,QAAE,EAAEA,EAHQ;AAGN,uBACSJ,eAAe,CAACa,QAJnB;AAKZO,UAAI,EAAC,QALO;AAKC,oBACDpB,eAAe,CAACqB;AANhB,KAAd,EAQGpB,gBAAgB,CAACD,eAAe,CAACsB,IAAjB,EAAuB,KAAK1B,KAA5B,CARnB,CADF,EAWG,KAAKA,KAAL,CAAW2B,gBAAX,GACCrC,oBAACK,UAAD,EAAW;AACTiC,eAAS,EAAEd,qBAAqB,SAArB,yBAAqB,WAArB,2BAAyB;AAAEe,gBAAQ,EAAE;AAAZ,OAD3B;AAETjB,YAAM,EAAE;AAAEkB,YAAI,EAAE;AAAEC,kBAAQ,EAAE;AAAZ;AAAR,OAFC;AAGTC,WAAK,EAAErB,qBAHE;AAITc,eAAS,EAAEd,qBAJF;AAKTL,aAAO,EAAEG,YALA;AAMTF,eAAS,EAAEQ,UAAU,CAACQ;AANb,KAAX,CADD,GASG,IApBN,CADF;AAwBD,GAtEM;;AAuET;AAAC,CA9ED,CAAwCjC,KAAK,CAAC2C,SAA9C","names":["React","classNamesFunction","css","initializeComponentRef","CommandButton","IconButton","stylesImport","legacyStyles","getClassNames","__extends","props","_super","_this","SuggestionsItem","suggestionModel","RenderSuggestion","onClick","className","id","onRemoveItem","isSelectedOverride","removeButtonAriaLabel","styles","theme","removeButtonIconProps","classNames","suggested","selected","root","suggestionsItem","_a","suggestionsItemIsSuggested","itemButton","closeButton","role","ariaLabel","item","showRemoveButton","iconProps","iconName","icon","fontSize","title","Component"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/pickers/src/components/pickers/Suggestions/SuggestionsItem.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { classNamesFunction, css, initializeComponentRef } from '../../../Utilities';\nimport { CommandButton, IconButton } from '../../../Button';\nimport * as stylesImport from './Suggestions.scss';\nimport type { IProcessedStyleSet } from '../../../Styling';\nimport type { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\n\nconst legacyStyles: any = stylesImport;\n\nconst getClassNames = classNamesFunction<ISuggestionsItemStyleProps, ISuggestionsItemStyles>();\n\n/**\n * {@docCategory Pickers}\n */\nexport class SuggestionsItem<T> extends React.Component<ISuggestionItemProps<T>, {}> {\n  constructor(props: ISuggestionItemProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      suggestionModel,\n      RenderSuggestion,\n      onClick,\n      className,\n      id,\n      onRemoveItem,\n      isSelectedOverride,\n      removeButtonAriaLabel,\n      styles,\n      theme,\n      removeButtonIconProps,\n    } = this.props;\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from SuggestionsItem class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in Suggestions when the typed SuggestionsItem class is ready to be rendered. If the\n    // check passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    const classNames: Partial<IProcessedStyleSet<ISuggestionsItemStyles>> = styles\n      ? getClassNames(styles, {\n          theme: theme!,\n          className,\n          suggested: suggestionModel.selected || isSelectedOverride,\n        })\n      : {\n          root: css(\n            'ms-Suggestions-item',\n            legacyStyles.suggestionsItem,\n            {\n              ['is-suggested ' + legacyStyles.suggestionsItemIsSuggested]:\n                suggestionModel.selected || isSelectedOverride,\n            },\n            className,\n          ),\n          itemButton: css('ms-Suggestions-itemButton', legacyStyles.itemButton),\n          closeButton: css('ms-Suggestions-closeButton', legacyStyles.closeButton),\n        };\n\n    return (\n      <div className={classNames.root} role=\"presentation\">\n        <CommandButton\n          onClick={onClick}\n          className={classNames.itemButton}\n          id={id}\n          aria-selected={suggestionModel.selected}\n          role=\"option\"\n          aria-label={suggestionModel.ariaLabel}\n        >\n          {RenderSuggestion(suggestionModel.item, this.props)}\n        </CommandButton>\n        {this.props.showRemoveButton ? (\n          <IconButton\n            iconProps={removeButtonIconProps ?? { iconName: 'Cancel' }}\n            styles={{ icon: { fontSize: '12px' } }}\n            title={removeButtonAriaLabel}\n            ariaLabel={removeButtonAriaLabel}\n            onClick={onRemoveItem}\n            className={classNames.closeButton}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}