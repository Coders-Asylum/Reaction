{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef } from '../../Utilities';\nimport { hiddenContentStyle } from '../../Styling';\nimport { ScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport { StickyPositionType } from './Sticky.types';\n\nvar Sticky =\n/** @class */\nfunction (_super) {\n  __extends(Sticky, _super);\n\n  function Sticky(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._stickyContentTop = React.createRef();\n    _this._stickyContentBottom = React.createRef();\n    _this._nonStickyContent = React.createRef();\n    _this._placeHolder = React.createRef();\n\n    _this.syncScroll = function (container) {\n      var nonStickyContent = _this.nonStickyContent;\n\n      if (nonStickyContent && _this.props.isScrollSynced) {\n        nonStickyContent.scrollLeft = container.scrollLeft;\n      }\n    };\n\n    _this._getContext = function () {\n      return _this.context;\n    };\n\n    _this._onScrollEvent = function (container, footerStickyContainer) {\n      if (_this.root && _this.nonStickyContent) {\n        var distanceFromTop = _this._getNonStickyDistanceFromTop(container);\n\n        var isStickyTop = false;\n        var isStickyBottom = false;\n\n        if (_this.canStickyTop) {\n          var distanceToStickTop = distanceFromTop - _this._getStickyDistanceFromTop();\n\n          isStickyTop = distanceToStickTop < container.scrollTop;\n        } // Can sticky bottom if the scrollablePane - total sticky footer height is smaller than the sticky's distance\n        // from the top of the pane\n\n\n        if (_this.canStickyBottom && container.clientHeight - footerStickyContainer.offsetHeight <= distanceFromTop) {\n          isStickyBottom = distanceFromTop - Math.floor(container.scrollTop) >= _this._getStickyDistanceFromTopForFooter(container, footerStickyContainer);\n        }\n\n        if (document.activeElement && _this.nonStickyContent.contains(document.activeElement) && (_this.state.isStickyTop !== isStickyTop || _this.state.isStickyBottom !== isStickyBottom)) {\n          _this._activeElement = document.activeElement;\n        } else {\n          _this._activeElement = undefined;\n        }\n\n        _this.setState({\n          isStickyTop: _this.canStickyTop && isStickyTop,\n          isStickyBottom: isStickyBottom,\n          distanceFromTop: distanceFromTop\n        });\n      }\n    };\n\n    _this._getStickyDistanceFromTop = function () {\n      var distance = 0;\n\n      if (_this.stickyContentTop) {\n        distance = _this.stickyContentTop.offsetTop;\n      }\n\n      return distance;\n    };\n\n    _this._getStickyDistanceFromTopForFooter = function (container, footerStickyVisibleContainer) {\n      var distance = 0;\n\n      if (_this.stickyContentBottom) {\n        distance = container.clientHeight - footerStickyVisibleContainer.offsetHeight + _this.stickyContentBottom.offsetTop;\n      }\n\n      return distance;\n    };\n\n    _this._getNonStickyDistanceFromTop = function (container) {\n      var distance = 0;\n      var currElem = _this.root;\n\n      if (currElem) {\n        while (currElem && currElem.offsetParent !== container) {\n          distance += currElem.offsetTop;\n          currElem = currElem.offsetParent;\n        }\n\n        if (currElem && currElem.offsetParent === container) {\n          distance += currElem.offsetTop;\n        }\n      }\n\n      return distance;\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      isStickyTop: false,\n      isStickyBottom: false,\n      distanceFromTop: undefined\n    };\n    _this._activeElement = undefined;\n    return _this;\n  }\n\n  Object.defineProperty(Sticky.prototype, \"root\", {\n    get: function get() {\n      return this._root.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"placeholder\", {\n    get: function get() {\n      return this._placeHolder.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"stickyContentTop\", {\n    get: function get() {\n      return this._stickyContentTop.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"stickyContentBottom\", {\n    get: function get() {\n      return this._stickyContentBottom.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"nonStickyContent\", {\n    get: function get() {\n      return this._nonStickyContent.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"canStickyTop\", {\n    get: function get() {\n      return this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Header;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"canStickyBottom\", {\n    get: function get() {\n      return this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Footer;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Sticky.prototype.componentDidMount = function () {\n    var scrollablePane = this._getContext().scrollablePane;\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.subscribe(this._onScrollEvent);\n    scrollablePane.addSticky(this);\n  };\n\n  Sticky.prototype.componentWillUnmount = function () {\n    var scrollablePane = this._getContext().scrollablePane;\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.unsubscribe(this._onScrollEvent);\n    scrollablePane.removeSticky(this);\n  };\n\n  Sticky.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var scrollablePane = this._getContext().scrollablePane;\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    var _a = this.state,\n        isStickyBottom = _a.isStickyBottom,\n        isStickyTop = _a.isStickyTop,\n        distanceFromTop = _a.distanceFromTop;\n    var syncScroll = false;\n\n    if (prevState.distanceFromTop !== distanceFromTop) {\n      scrollablePane.sortSticky(this, true\n      /*sortAgain*/\n      );\n      syncScroll = true;\n    }\n\n    if (prevState.isStickyTop !== isStickyTop || prevState.isStickyBottom !== isStickyBottom) {\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n\n      scrollablePane.updateStickyRefHeights();\n      syncScroll = true;\n    }\n\n    if (syncScroll) {\n      // Sync Sticky scroll position with content container on each update\n      scrollablePane.syncScrollSticky(this);\n    }\n  };\n\n  Sticky.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    if (!this.context.scrollablePane) {\n      return true;\n    }\n\n    var _a = this.state,\n        isStickyTop = _a.isStickyTop,\n        isStickyBottom = _a.isStickyBottom,\n        distanceFromTop = _a.distanceFromTop;\n    return isStickyTop !== nextState.isStickyTop || isStickyBottom !== nextState.isStickyBottom || this.props.stickyPosition !== nextProps.stickyPosition || this.props.children !== nextProps.children || distanceFromTop !== nextState.distanceFromTop || _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentTop) || _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentBottom) || _isOffsetHeightDifferent(this._nonStickyContent, this._placeHolder);\n  };\n\n  Sticky.prototype.render = function () {\n    var _a = this.state,\n        isStickyTop = _a.isStickyTop,\n        isStickyBottom = _a.isStickyBottom;\n    var _b = this.props,\n        stickyClassName = _b.stickyClassName,\n        children = _b.children;\n\n    if (!this.context.scrollablePane) {\n      return React.createElement(\"div\", null, this.props.children);\n    }\n\n    return React.createElement(\"div\", {\n      ref: this._root\n    }, this.canStickyTop && React.createElement(\"div\", {\n      ref: this._stickyContentTop,\n      style: {\n        pointerEvents: isStickyTop ? 'auto' : 'none'\n      }\n    }, React.createElement(\"div\", {\n      style: this._getStickyPlaceholderHeight(isStickyTop)\n    })), this.canStickyBottom && React.createElement(\"div\", {\n      ref: this._stickyContentBottom,\n      style: {\n        pointerEvents: isStickyBottom ? 'auto' : 'none'\n      }\n    }, React.createElement(\"div\", {\n      style: this._getStickyPlaceholderHeight(isStickyBottom)\n    })), React.createElement(\"div\", {\n      style: this._getNonStickyPlaceholderHeightAndWidth(),\n      ref: this._placeHolder\n    }, (isStickyTop || isStickyBottom) && React.createElement(\"span\", {\n      style: hiddenContentStyle\n    }, children), React.createElement(\"div\", {\n      ref: this._nonStickyContent,\n      className: isStickyTop || isStickyBottom ? stickyClassName : undefined,\n      style: this._getContentStyles(isStickyTop || isStickyBottom)\n    }, children)));\n  };\n\n  Sticky.prototype.addSticky = function (stickyContent) {\n    if (this.nonStickyContent) {\n      stickyContent.appendChild(this.nonStickyContent);\n    }\n  };\n\n  Sticky.prototype.resetSticky = function () {\n    if (this.nonStickyContent && this.placeholder) {\n      this.placeholder.appendChild(this.nonStickyContent);\n    }\n  };\n\n  Sticky.prototype.setDistanceFromTop = function (container) {\n    var distanceFromTop = this._getNonStickyDistanceFromTop(container);\n\n    this.setState({\n      distanceFromTop: distanceFromTop\n    });\n  };\n\n  Sticky.prototype._getContentStyles = function (isSticky) {\n    return {\n      backgroundColor: this.props.stickyBackgroundColor || this._getBackground(),\n      overflow: isSticky ? 'hidden' : ''\n    };\n  };\n\n  Sticky.prototype._getStickyPlaceholderHeight = function (isSticky) {\n    var height = this.nonStickyContent ? this.nonStickyContent.offsetHeight : 0;\n    return {\n      visibility: isSticky ? 'hidden' : 'visible',\n      height: isSticky ? 0 : height\n    };\n  };\n\n  Sticky.prototype._getNonStickyPlaceholderHeightAndWidth = function () {\n    var _a = this.state,\n        isStickyTop = _a.isStickyTop,\n        isStickyBottom = _a.isStickyBottom;\n\n    if (isStickyTop || isStickyBottom) {\n      var height = 0;\n      var width = 0; // Why is placeholder width needed?\n      // ScrollablePane's content container is reponsible for providing scrollbars depending on content overflow.\n      // - If the overflow is caused by content of sticky component when it is in non-sticky state, the container will\n      //   provide horizontal scrollbar.\n      // - If the component becomes sticky, i.e., when state.isStickyTop || state.isStickyBottom becomes true,\n      //   its actual content is no longer inside the container, so the container will see no need for horizontal\n      //   scrollbar (assuming no other content is causing overflow). The complete content of sticky component will\n      //   not be viewable. So it is necessary to provide a placeholder of a certain width (height is already being set)\n      //   in the container, to get a horizontal scrollbar & be able to view the complete content of sticky component.\n\n      if (this.nonStickyContent && this.nonStickyContent.firstElementChild) {\n        height = this.nonStickyContent.offsetHeight; // What value should be substituted for placeholder width?\n        // Assumptions:\n        //    1. Content inside <Sticky> should always be wrapped in a single div.\n        //        <Sticky><div id={'firstElementChild'}>{intended_content}</div><Sticky/>\n        //    2. -ve padding, margin, etc. are not be used.\n        //    3. scrollWidth of a parent is greater than or equal to max of scrollWidths of its children, and same holds\n        //       for children.\n        // placeholder width should be computed in the best possible way to prevent overscroll/underscroll.\n\n        width = this.nonStickyContent.firstElementChild.scrollWidth + (this.nonStickyContent.firstElementChild.offsetWidth - this.nonStickyContent.firstElementChild.clientWidth);\n      }\n\n      return {\n        height: height,\n        width: width\n      };\n    } else {\n      return {};\n    }\n  }; // Gets background of nearest parent element that has a declared background-color attribute\n\n\n  Sticky.prototype._getBackground = function () {\n    if (!this.root) {\n      return undefined;\n    }\n\n    var curr = this.root;\n\n    while (window.getComputedStyle(curr).getPropertyValue('background-color') === 'rgba(0, 0, 0, 0)' || window.getComputedStyle(curr).getPropertyValue('background-color') === 'transparent') {\n      if (curr.tagName === 'HTML') {\n        // Fallback color if no element has a declared background-color attribute\n        return undefined;\n      }\n\n      if (curr.parentElement) {\n        curr = curr.parentElement;\n      }\n    }\n\n    return window.getComputedStyle(curr).getPropertyValue('background-color');\n  };\n\n  Sticky.defaultProps = {\n    stickyPosition: StickyPositionType.Both,\n    isScrollSynced: true\n  };\n  Sticky.contextType = ScrollablePaneContext;\n  return Sticky;\n}(React.Component);\n\nexport { Sticky };\n\nfunction _isOffsetHeightDifferent(a, b) {\n  return a && b && a.current && b.current && a.current.offsetHeight !== b.current.offsetHeight;\n}","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","hiddenContentStyle","ScrollablePaneContext","StickyPositionType","__extends","props","_super","_this","createRef","container","nonStickyContent","isScrollSynced","scrollLeft","context","footerStickyContainer","root","distanceFromTop","_getNonStickyDistanceFromTop","isStickyTop","isStickyBottom","canStickyTop","distanceToStickTop","_getStickyDistanceFromTop","scrollTop","canStickyBottom","clientHeight","offsetHeight","Math","floor","_getStickyDistanceFromTopForFooter","document","activeElement","contains","state","_activeElement","undefined","setState","distance","stickyContentTop","offsetTop","footerStickyVisibleContainer","stickyContentBottom","currElem","offsetParent","Object","Sticky","_root","current","_placeHolder","_stickyContentTop","_stickyContentBottom","_nonStickyContent","stickyPosition","Both","Header","Footer","_getContext","scrollablePane","subscribe","_onScrollEvent","addSticky","unsubscribe","removeSticky","prevProps","prevState","syncScroll","sortSticky","focus","updateStickyRefHeights","syncScrollSticky","nextProps","nextState","children","_isOffsetHeightDifferent","stickyClassName","ref","style","pointerEvents","_getStickyPlaceholderHeight","_getNonStickyPlaceholderHeightAndWidth","className","_getContentStyles","stickyContent","appendChild","placeholder","isSticky","backgroundColor","stickyBackgroundColor","_getBackground","overflow","height","visibility","width","firstElementChild","scrollWidth","offsetWidth","clientWidth","curr","window","getComputedStyle","getPropertyValue","tagName","parentElement","Component","a","b"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/Sticky/Sticky.tsx"],"sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef } from '../../Utilities';\nimport { hiddenContentStyle } from '../../Styling';\nimport { ScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport { StickyPositionType } from './Sticky.types';\nimport type { IScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport type { IStickyProps } from './Sticky.types';\n\nexport interface IStickyState {\n  isStickyTop: boolean;\n  isStickyBottom: boolean;\n  distanceFromTop?: number;\n}\n\nexport class Sticky extends React.Component<IStickyProps, IStickyState> {\n  public static defaultProps: IStickyProps = {\n    stickyPosition: StickyPositionType.Both,\n    isScrollSynced: true,\n  };\n\n  public static contextType = ScrollablePaneContext;\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _stickyContentTop = React.createRef<HTMLDivElement>();\n  private _stickyContentBottom = React.createRef<HTMLDivElement>();\n  private _nonStickyContent = React.createRef<HTMLDivElement>();\n  private _placeHolder = React.createRef<HTMLDivElement>();\n  private _activeElement: HTMLElement | undefined;\n\n  constructor(props: IStickyProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this.state = {\n      isStickyTop: false,\n      isStickyBottom: false,\n      distanceFromTop: undefined,\n    };\n    this._activeElement = undefined;\n  }\n\n  public get root(): HTMLDivElement | null {\n    return this._root.current;\n  }\n\n  public get placeholder(): HTMLDivElement | null {\n    return this._placeHolder.current;\n  }\n\n  public get stickyContentTop(): HTMLDivElement | null {\n    return this._stickyContentTop.current;\n  }\n\n  public get stickyContentBottom(): HTMLDivElement | null {\n    return this._stickyContentBottom.current;\n  }\n\n  public get nonStickyContent(): HTMLDivElement | null {\n    return this._nonStickyContent.current;\n  }\n\n  public get canStickyTop(): boolean {\n    return (\n      this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Header\n    );\n  }\n\n  public get canStickyBottom(): boolean {\n    return (\n      this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Footer\n    );\n  }\n\n  public syncScroll = (container: HTMLElement): void => {\n    const { nonStickyContent } = this;\n\n    if (nonStickyContent && this.props.isScrollSynced) {\n      nonStickyContent.scrollLeft = container.scrollLeft;\n    }\n  };\n\n  public componentDidMount(): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.subscribe(this._onScrollEvent);\n    scrollablePane.addSticky(this);\n  }\n\n  public componentWillUnmount(): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.unsubscribe(this._onScrollEvent);\n    scrollablePane.removeSticky(this);\n  }\n\n  public componentDidUpdate(prevProps: IStickyProps, prevState: IStickyState): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    const { isStickyBottom, isStickyTop, distanceFromTop } = this.state;\n    let syncScroll: boolean = false;\n    if (prevState.distanceFromTop !== distanceFromTop) {\n      scrollablePane.sortSticky(this, true /*sortAgain*/);\n      syncScroll = true;\n    }\n    if (prevState.isStickyTop !== isStickyTop || prevState.isStickyBottom !== isStickyBottom) {\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n      scrollablePane.updateStickyRefHeights();\n      syncScroll = true;\n    }\n    if (syncScroll) {\n      // Sync Sticky scroll position with content container on each update\n      scrollablePane.syncScrollSticky(this);\n    }\n  }\n\n  public shouldComponentUpdate(nextProps: IStickyProps, nextState: IStickyState): boolean {\n    if (!this.context.scrollablePane) {\n      return true;\n    }\n\n    const { isStickyTop, isStickyBottom, distanceFromTop } = this.state;\n\n    return (isStickyTop !== nextState.isStickyTop ||\n      isStickyBottom !== nextState.isStickyBottom ||\n      this.props.stickyPosition !== nextProps.stickyPosition ||\n      this.props.children !== nextProps.children ||\n      distanceFromTop !== nextState.distanceFromTop ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentTop) ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentBottom) ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._placeHolder)) as boolean;\n  }\n\n  public render(): JSX.Element {\n    const { isStickyTop, isStickyBottom } = this.state;\n    const { stickyClassName, children } = this.props;\n\n    if (!this.context.scrollablePane) {\n      return <div>{this.props.children}</div>;\n    }\n\n    return (\n      <div ref={this._root}>\n        {this.canStickyTop && (\n          <div ref={this._stickyContentTop} style={{ pointerEvents: isStickyTop ? 'auto' : 'none' }}>\n            <div style={this._getStickyPlaceholderHeight(isStickyTop)} />\n          </div>\n        )}\n        {this.canStickyBottom && (\n          <div ref={this._stickyContentBottom} style={{ pointerEvents: isStickyBottom ? 'auto' : 'none' }}>\n            <div style={this._getStickyPlaceholderHeight(isStickyBottom)} />\n          </div>\n        )}\n        <div style={this._getNonStickyPlaceholderHeightAndWidth()} ref={this._placeHolder}>\n          {(isStickyTop || isStickyBottom) && <span style={hiddenContentStyle as any}>{children}</span>}\n          <div\n            ref={this._nonStickyContent}\n            className={isStickyTop || isStickyBottom ? stickyClassName : undefined}\n            style={this._getContentStyles(isStickyTop || isStickyBottom)}\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public addSticky(stickyContent: HTMLDivElement): void {\n    if (this.nonStickyContent) {\n      stickyContent.appendChild(this.nonStickyContent);\n    }\n  }\n\n  public resetSticky(): void {\n    if (this.nonStickyContent && this.placeholder) {\n      this.placeholder.appendChild(this.nonStickyContent);\n    }\n  }\n\n  public setDistanceFromTop(container: HTMLDivElement): void {\n    const distanceFromTop = this._getNonStickyDistanceFromTop(container);\n    this.setState({ distanceFromTop: distanceFromTop });\n  }\n\n  private _getContext = (): IScrollablePaneContext => this.context;\n\n  private _getContentStyles(isSticky: boolean): React.CSSProperties {\n    return {\n      backgroundColor: this.props.stickyBackgroundColor || this._getBackground(),\n      overflow: isSticky ? 'hidden' : '',\n    };\n  }\n\n  private _getStickyPlaceholderHeight(isSticky: boolean): React.CSSProperties {\n    const height = this.nonStickyContent ? this.nonStickyContent.offsetHeight : 0;\n    return {\n      visibility: isSticky ? 'hidden' : 'visible',\n      height: isSticky ? 0 : height,\n    };\n  }\n\n  private _getNonStickyPlaceholderHeightAndWidth(): React.CSSProperties {\n    const { isStickyTop, isStickyBottom } = this.state;\n    if (isStickyTop || isStickyBottom) {\n      let height = 0;\n      let width = 0;\n      // Why is placeholder width needed?\n      // ScrollablePane's content container is reponsible for providing scrollbars depending on content overflow.\n      // - If the overflow is caused by content of sticky component when it is in non-sticky state, the container will\n      //   provide horizontal scrollbar.\n      // - If the component becomes sticky, i.e., when state.isStickyTop || state.isStickyBottom becomes true,\n      //   its actual content is no longer inside the container, so the container will see no need for horizontal\n      //   scrollbar (assuming no other content is causing overflow). The complete content of sticky component will\n      //   not be viewable. So it is necessary to provide a placeholder of a certain width (height is already being set)\n      //   in the container, to get a horizontal scrollbar & be able to view the complete content of sticky component.\n      if (this.nonStickyContent && this.nonStickyContent.firstElementChild) {\n        height = this.nonStickyContent.offsetHeight;\n        // What value should be substituted for placeholder width?\n        // Assumptions:\n        //    1. Content inside <Sticky> should always be wrapped in a single div.\n        //        <Sticky><div id={'firstElementChild'}>{intended_content}</div><Sticky/>\n        //    2. -ve padding, margin, etc. are not be used.\n        //    3. scrollWidth of a parent is greater than or equal to max of scrollWidths of its children, and same holds\n        //       for children.\n        // placeholder width should be computed in the best possible way to prevent overscroll/underscroll.\n        width =\n          this.nonStickyContent.firstElementChild.scrollWidth +\n          ((this.nonStickyContent.firstElementChild as HTMLElement).offsetWidth -\n            this.nonStickyContent.firstElementChild.clientWidth);\n      }\n      return {\n        height: height,\n        width: width,\n      };\n    } else {\n      return {};\n    }\n  }\n\n  private _onScrollEvent = (container: HTMLElement, footerStickyContainer: HTMLElement): void => {\n    if (this.root && this.nonStickyContent) {\n      const distanceFromTop = this._getNonStickyDistanceFromTop(container);\n      let isStickyTop = false;\n      let isStickyBottom = false;\n\n      if (this.canStickyTop) {\n        const distanceToStickTop = distanceFromTop - this._getStickyDistanceFromTop();\n        isStickyTop = distanceToStickTop < container.scrollTop;\n      }\n\n      // Can sticky bottom if the scrollablePane - total sticky footer height is smaller than the sticky's distance\n      // from the top of the pane\n      if (this.canStickyBottom && container.clientHeight - footerStickyContainer.offsetHeight <= distanceFromTop) {\n        isStickyBottom =\n          distanceFromTop - Math.floor(container.scrollTop) >=\n          this._getStickyDistanceFromTopForFooter(container, footerStickyContainer);\n      }\n\n      if (\n        document.activeElement &&\n        this.nonStickyContent.contains(document.activeElement) &&\n        (this.state.isStickyTop !== isStickyTop || this.state.isStickyBottom !== isStickyBottom)\n      ) {\n        this._activeElement = document.activeElement as HTMLElement;\n      } else {\n        this._activeElement = undefined;\n      }\n\n      this.setState({\n        isStickyTop: this.canStickyTop && isStickyTop,\n        isStickyBottom: isStickyBottom,\n        distanceFromTop: distanceFromTop,\n      });\n    }\n  };\n\n  private _getStickyDistanceFromTop = (): number => {\n    let distance = 0;\n    if (this.stickyContentTop) {\n      distance = this.stickyContentTop.offsetTop;\n    }\n\n    return distance;\n  };\n\n  private _getStickyDistanceFromTopForFooter = (\n    container: HTMLElement,\n    footerStickyVisibleContainer: HTMLElement,\n  ): number => {\n    let distance = 0;\n    if (this.stickyContentBottom) {\n      distance =\n        container.clientHeight - footerStickyVisibleContainer.offsetHeight + this.stickyContentBottom.offsetTop;\n    }\n\n    return distance;\n  };\n\n  private _getNonStickyDistanceFromTop = (container: HTMLElement): number => {\n    let distance = 0;\n    let currElem = this.root;\n\n    if (currElem) {\n      while (currElem && currElem.offsetParent !== container) {\n        distance += currElem.offsetTop;\n        currElem = currElem.offsetParent as HTMLDivElement;\n      }\n\n      if (currElem && currElem.offsetParent === container) {\n        distance += currElem.offsetTop;\n      }\n    }\n    return distance;\n  };\n\n  // Gets background of nearest parent element that has a declared background-color attribute\n  private _getBackground(): string | undefined {\n    if (!this.root) {\n      return undefined;\n    }\n\n    let curr: HTMLElement = this.root;\n\n    while (\n      window.getComputedStyle(curr).getPropertyValue('background-color') === 'rgba(0, 0, 0, 0)' ||\n      window.getComputedStyle(curr).getPropertyValue('background-color') === 'transparent'\n    ) {\n      if (curr.tagName === 'HTML') {\n        // Fallback color if no element has a declared background-color attribute\n        return undefined;\n      }\n      if (curr.parentElement) {\n        curr = curr.parentElement;\n      }\n    }\n    return window.getComputedStyle(curr).getPropertyValue('background-color');\n  }\n}\n\nfunction _isOffsetHeightDifferent(a: React.RefObject<HTMLElement>, b: React.RefObject<HTMLDivElement>): boolean {\n  return (a && b && a.current && b.current && a.current.offsetHeight !== b.current.offsetHeight) as boolean;\n}\n"]},"metadata":{},"sourceType":"module"}