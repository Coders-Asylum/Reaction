{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { classNamesFunction, find, getNativeProps, divProperties, setFocusVisibility, useFocusRects } from '../../Utilities';\nimport { ChoiceGroupOption } from './ChoiceGroupOption/index';\nimport { useId, useControllableValue, useMergedRefs, useWarnings } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\n\nvar getOptionId = function getOptionId(option, id) {\n  return id + \"-\" + option.key;\n};\n\nvar findOption = function findOption(options, key) {\n  return key === undefined ? undefined : find(options, function (value) {\n    return value.key === key;\n  });\n};\n\nvar focusSelectedOption = function focusSelectedOption(options, keyChecked, id) {\n  var optionToFocus = findOption(options, keyChecked) || options.filter(function (option) {\n    return !option.disabled;\n  })[0];\n  var elementToFocus = optionToFocus && document.getElementById(getOptionId(optionToFocus, id));\n\n  if (elementToFocus) {\n    elementToFocus.focus();\n    setFocusVisibility(true, elementToFocus);\n  }\n};\n\nvar focusFromFocusTrapZone = function focusFromFocusTrapZone(evt) {\n  return evt.relatedTarget instanceof HTMLElement && evt.relatedTarget.dataset.isFocusTrapZoneBumper === 'true';\n};\n\nvar useComponentRef = function useComponentRef(options, keyChecked, id, componentRef) {\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      get checkedOption() {\n        return findOption(options, keyChecked);\n      },\n\n      focus: function focus() {\n        focusSelectedOption(options, keyChecked, id);\n      }\n    };\n  }, [options, keyChecked, id]);\n};\n\nvar COMPONENT_NAME = 'ChoiceGroup';\nexport var ChoiceGroupBase = React.forwardRef(function (props, forwardedRef) {\n  var className = props.className,\n      theme = props.theme,\n      styles = props.styles,\n      _a = props.options,\n      options = _a === void 0 ? [] : _a,\n      label = props.label,\n      required = props.required,\n      disabled = props.disabled,\n      name = props.name,\n      defaultSelectedKey = props.defaultSelectedKey,\n      componentRef = props.componentRef,\n      onChange = props.onChange;\n  var id = useId('ChoiceGroup');\n  var labelId = useId('ChoiceGroupLabel');\n  var divProps = getNativeProps(props, divProperties, ['onChange', 'className', 'required']);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    optionsContainIconOrImage: options.some(function (option) {\n      return !!(option.iconProps || option.imageSrc);\n    })\n  });\n  var ariaLabelledBy = props.ariaLabelledBy || (label ? labelId : props['aria-labelledby']);\n\n  var _b = useControllableValue(props.selectedKey, defaultSelectedKey),\n      keyChecked = _b[0],\n      setKeyChecked = _b[1];\n\n  var _c = React.useState(),\n      keyFocused = _c[0],\n      setKeyFocused = _c[1];\n\n  var rootRef = React.useRef(null);\n  var mergedRootRefs = useMergedRefs(rootRef, forwardedRef);\n  useDebugWarnings(props);\n  useComponentRef(options, keyChecked, id, componentRef);\n  useFocusRects(rootRef);\n  var onFocus = React.useCallback(function (ev, option) {\n    var _a;\n\n    if (option) {\n      setKeyFocused(option.itemKey);\n      (_a = option.onFocus) === null || _a === void 0 ? void 0 : _a.call(option, ev);\n    }\n  }, []);\n  var onBlur = React.useCallback(function (ev, option) {\n    var _a;\n\n    setKeyFocused(undefined);\n    (_a = option === null || option === void 0 ? void 0 : option.onBlur) === null || _a === void 0 ? void 0 : _a.call(option, ev);\n  }, []);\n  var onOptionChange = React.useCallback(function (evt, option) {\n    var _a;\n\n    if (!option) {\n      return;\n    }\n\n    setKeyChecked(option.itemKey);\n    (_a = option.onChange) === null || _a === void 0 ? void 0 : _a.call(option, evt);\n    onChange === null || onChange === void 0 ? void 0 : onChange(evt, findOption(options, option.itemKey));\n  }, [onChange, options, setKeyChecked]);\n  var onRadioFocus = React.useCallback(function (evt) {\n    // Handles scenarios like this bug: https://github.com/microsoft/fluentui/issues/20173\n    if (focusFromFocusTrapZone(evt)) {\n      focusSelectedOption(options, keyChecked, id);\n    }\n  }, [options, keyChecked, id]);\n  return React.createElement(\"div\", __assign({\n    className: classNames.root\n  }, divProps, {\n    ref: mergedRootRefs\n  }), React.createElement(\"div\", __assign({\n    role: \"radiogroup\"\n  }, ariaLabelledBy && {\n    'aria-labelledby': ariaLabelledBy\n  }, {\n    onFocus: onRadioFocus\n  }), label && React.createElement(Label, {\n    className: classNames.label,\n    required: required,\n    id: labelId,\n    disabled: disabled\n  }, label), React.createElement(\"div\", {\n    className: classNames.flexContainer\n  }, options.map(function (option) {\n    return React.createElement(ChoiceGroupOption, __assign({\n      itemKey: option.key\n    }, option, {\n      key: option.key,\n      onBlur: onBlur,\n      onFocus: onFocus,\n      onChange: onOptionChange,\n      focused: option.key === keyFocused,\n      checked: option.key === keyChecked,\n      disabled: option.disabled || disabled,\n      id: getOptionId(option, id),\n      labelId: option.labelId || labelId + \"-\" + option.key,\n      name: name || id,\n      required: required\n    }));\n  }))));\n});\nChoiceGroupBase.displayName = COMPONENT_NAME;\n\nfunction useDebugWarnings(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props: props,\n      mutuallyExclusive: {\n        selectedKey: 'defaultSelectedKey'\n      }\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["React","Label","classNamesFunction","find","getNativeProps","divProperties","setFocusVisibility","useFocusRects","ChoiceGroupOption","useId","useControllableValue","useMergedRefs","useWarnings","getClassNames","getOptionId","option","id","key","findOption","options","undefined","focusSelectedOption","keyChecked","optionToFocus","filter","disabled","elementToFocus","document","getElementById","focus","focusFromFocusTrapZone","evt","relatedTarget","HTMLElement","dataset","isFocusTrapZoneBumper","useComponentRef","componentRef","useImperativeHandle","checkedOption","COMPONENT_NAME","ChoiceGroupBase","forwardRef","props","forwardedRef","theme","styles","_a","label","required","name","defaultSelectedKey","onChange","labelId","divProps","classNames","className","optionsContainIconOrImage","some","iconProps","imageSrc","ariaLabelledBy","selectedKey","setKeyChecked","useState","keyFocused","setKeyFocused","rootRef","useRef","mergedRootRefs","useDebugWarnings","onFocus","useCallback","ev","itemKey","onBlur","onOptionChange","onRadioFocus","root","ref","role","flexContainer","map","__assign","focused","checked","displayName","process","env","NODE_ENV","mutuallyExclusive"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/ChoiceGroup/ChoiceGroup.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Label } from '../../Label';\nimport {\n  classNamesFunction,\n  find,\n  getNativeProps,\n  divProperties,\n  setFocusVisibility,\n  useFocusRects,\n} from '../../Utilities';\nimport { ChoiceGroupOption } from './ChoiceGroupOption/index';\nimport { useId, useControllableValue, useMergedRefs, useWarnings } from '@fluentui/react-hooks';\nimport type { IRefObject } from '../../Utilities';\nimport type {\n  IChoiceGroupOption,\n  IChoiceGroupProps,\n  IChoiceGroupStyleProps,\n  IChoiceGroupStyles,\n  IChoiceGroup,\n} from './ChoiceGroup.types';\nimport type { IChoiceGroupOptionProps } from './ChoiceGroupOption/ChoiceGroupOption.types';\n\nconst getClassNames = classNamesFunction<IChoiceGroupStyleProps, IChoiceGroupStyles>();\n\nconst getOptionId = (option: IChoiceGroupOption, id: string): string => {\n  return `${id}-${option.key}`;\n};\n\nconst findOption = (options: IChoiceGroupOption[], key: string | number | undefined) => {\n  return key === undefined ? undefined : find(options, value => value.key === key);\n};\n\nconst focusSelectedOption = (options: IChoiceGroupOption[], keyChecked: string | number | undefined, id: string) => {\n  const optionToFocus = findOption(options, keyChecked) || options.filter(option => !option.disabled)[0];\n  const elementToFocus = optionToFocus && document.getElementById(getOptionId(optionToFocus, id));\n\n  if (elementToFocus) {\n    elementToFocus.focus();\n    setFocusVisibility(true, elementToFocus as Element);\n  }\n};\n\nconst focusFromFocusTrapZone = (evt: React.FocusEvent<HTMLElement>): boolean => {\n  return evt.relatedTarget instanceof HTMLElement && evt.relatedTarget.dataset.isFocusTrapZoneBumper === 'true';\n};\n\nconst useComponentRef = (\n  options: IChoiceGroupOption[],\n  keyChecked: string | number | undefined,\n  id: string,\n  componentRef?: IRefObject<IChoiceGroup>,\n) => {\n  React.useImperativeHandle(\n    componentRef,\n    () => ({\n      get checkedOption() {\n        return findOption(options, keyChecked);\n      },\n      focus() {\n        focusSelectedOption(options, keyChecked, id);\n      },\n    }),\n    [options, keyChecked, id],\n  );\n};\n\nconst COMPONENT_NAME = 'ChoiceGroup';\n\nexport const ChoiceGroupBase: React.FunctionComponent<IChoiceGroupProps> = React.forwardRef<\n  HTMLDivElement,\n  IChoiceGroupProps\n>((props, forwardedRef) => {\n  const {\n    className,\n    theme,\n    styles,\n    options = [],\n    label,\n    required,\n    disabled,\n    name,\n    defaultSelectedKey,\n    componentRef,\n    onChange,\n  } = props;\n  const id = useId('ChoiceGroup');\n  const labelId = useId('ChoiceGroupLabel');\n\n  const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties, [\n    'onChange',\n    'className',\n    'required',\n  ]);\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    className,\n    optionsContainIconOrImage: options.some(option => !!(option.iconProps || option.imageSrc)),\n  });\n\n  const ariaLabelledBy = props.ariaLabelledBy || (label ? labelId : props['aria-labelledby']);\n\n  const [keyChecked, setKeyChecked] = useControllableValue(props.selectedKey, defaultSelectedKey);\n  const [keyFocused, setKeyFocused] = React.useState<string | number>();\n\n  const rootRef = React.useRef<HTMLDivElement | null>(null);\n  const mergedRootRefs: React.Ref<HTMLDivElement> = useMergedRefs(rootRef, forwardedRef);\n\n  useDebugWarnings(props);\n  useComponentRef(options, keyChecked, id, componentRef);\n  useFocusRects(rootRef);\n\n  const onFocus = React.useCallback((ev?: React.FocusEvent<HTMLElement>, option?: IChoiceGroupOptionProps) => {\n    if (option) {\n      setKeyFocused(option.itemKey);\n      option.onFocus?.(ev);\n    }\n  }, []);\n\n  const onBlur = React.useCallback((ev: React.FocusEvent<HTMLElement>, option?: IChoiceGroupOptionProps) => {\n    setKeyFocused(undefined);\n    option?.onBlur?.(ev);\n  }, []);\n\n  const onOptionChange = React.useCallback(\n    (evt?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOptionProps) => {\n      if (!option) {\n        return;\n      }\n      setKeyChecked(option.itemKey);\n\n      option.onChange?.(evt);\n      onChange?.(evt, findOption(options, option.itemKey));\n    },\n    [onChange, options, setKeyChecked],\n  );\n\n  const onRadioFocus = React.useCallback(\n    (evt: React.FocusEvent<HTMLElement>) => {\n      // Handles scenarios like this bug: https://github.com/microsoft/fluentui/issues/20173\n      if (focusFromFocusTrapZone(evt)) {\n        focusSelectedOption(options, keyChecked, id);\n      }\n    },\n    [options, keyChecked, id],\n  );\n\n  return (\n    <div className={classNames.root} {...divProps} ref={mergedRootRefs}>\n      <div role=\"radiogroup\" {...(ariaLabelledBy && { 'aria-labelledby': ariaLabelledBy })} onFocus={onRadioFocus}>\n        {label && (\n          <Label className={classNames.label} required={required} id={labelId} disabled={disabled}>\n            {label}\n          </Label>\n        )}\n        <div className={classNames.flexContainer}>\n          {options.map((option: IChoiceGroupOption) => {\n            return (\n              <ChoiceGroupOption\n                itemKey={option.key}\n                {...option}\n                key={option.key}\n                onBlur={onBlur}\n                onFocus={onFocus}\n                onChange={onOptionChange}\n                focused={option.key === keyFocused}\n                checked={option.key === keyChecked}\n                disabled={option.disabled || disabled}\n                id={getOptionId(option, id)}\n                labelId={option.labelId || `${labelId}-${option.key}`}\n                name={name || id}\n                required={required}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n});\nChoiceGroupBase.displayName = COMPONENT_NAME;\n\nfunction useDebugWarnings(props: IChoiceGroupProps) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props,\n      mutuallyExclusive: {\n        selectedKey: 'defaultSelectedKey',\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}