{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, classNamesFunction, getNativeProps, inputProperties } from '../../Utilities';\nimport { useControllableValue, useId, useMergedRefs, useWarnings } from '@fluentui/react-hooks';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nvar COMPONENT_NAME = 'SearchBox';\nvar iconButtonStyles = {\n  root: {\n    height: 'auto'\n  },\n  icon: {\n    fontSize: '12px'\n  }\n};\nvar iconButtonProps = {\n  iconName: 'Clear'\n};\nvar defaultClearButtonProps = {\n  ariaLabel: 'Clear text'\n};\nvar getClassNames = classNamesFunction();\n\nvar useComponentRef = function useComponentRef(componentRef, inputElementRef, _hasFocus) {\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      focus: function focus() {\n        var _a;\n\n        return (_a = inputElementRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      hasFocus: function hasFocus() {\n        return _hasFocus;\n      }\n    };\n  }, [inputElementRef, _hasFocus]);\n};\n\nexport var SearchBoxBase = React.forwardRef(function (props, forwardedRef) {\n  var ariaLabel = props.ariaLabel,\n      className = props.className,\n      _a = props.defaultValue,\n      defaultValue = _a === void 0 ? '' : _a,\n      disabled = props.disabled,\n      underlined = props.underlined,\n      styles = props.styles,\n      // eslint-disable-next-line deprecation/deprecation\n  labelText = props.labelText,\n      // eslint-disable-next-line deprecation/deprecation\n  _b = props.placeholder,\n      // eslint-disable-next-line deprecation/deprecation\n  placeholder = _b === void 0 ? labelText : _b,\n      theme = props.theme,\n      _c = props.clearButtonProps,\n      clearButtonProps = _c === void 0 ? defaultClearButtonProps : _c,\n      _d = props.disableAnimation,\n      disableAnimation = _d === void 0 ? false : _d,\n      _e = props.showIcon,\n      showIcon = _e === void 0 ? false : _e,\n      customOnClear = props.onClear,\n      customOnBlur = props.onBlur,\n      customOnEscape = props.onEscape,\n      customOnSearch = props.onSearch,\n      customOnKeyDown = props.onKeyDown,\n      iconProps = props.iconProps,\n      role = props.role,\n      onChange = props.onChange,\n      // eslint-disable-next-line deprecation/deprecation\n  onChanged = props.onChanged;\n\n  var _f = React.useState(false),\n      hasFocus = _f[0],\n      setHasFocus = _f[1];\n\n  var prevChangeTimestamp = React.useRef();\n\n  var _g = useControllableValue(props.value, defaultValue, function (ev, newValue) {\n    if (ev && ev.timeStamp === prevChangeTimestamp.current) {\n      // For historical reasons, SearchBox handles both onInput and onChange (we can't modify this\n      // outside a major version due to potential to break partners' tests and possibly apps).\n      // Only call props.onChange for one of the events.\n      return;\n    }\n\n    prevChangeTimestamp.current = ev === null || ev === void 0 ? void 0 : ev.timeStamp;\n    onChange === null || onChange === void 0 ? void 0 : onChange(ev, newValue);\n    onChanged === null || onChanged === void 0 ? void 0 : onChanged(newValue);\n  }),\n      uncastValue = _g[0],\n      setValue = _g[1];\n\n  var value = String(uncastValue);\n  var rootElementRef = React.useRef(null);\n  var inputElementRef = React.useRef(null);\n  var mergedRootRef = useMergedRefs(rootElementRef, forwardedRef);\n  var id = useId(COMPONENT_NAME, props.id);\n  var customOnClearClick = clearButtonProps.onClick;\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    underlined: underlined,\n    hasFocus: hasFocus,\n    disabled: disabled,\n    hasInput: value.length > 0,\n    disableAnimation: disableAnimation,\n    showIcon: showIcon\n  });\n  var nativeProps = getNativeProps(props, inputProperties, ['className', 'placeholder', 'onFocus', 'onBlur', 'value', 'role']);\n  var onClear = React.useCallback(function (ev) {\n    var _a;\n\n    customOnClear === null || customOnClear === void 0 ? void 0 : customOnClear(ev);\n\n    if (!ev.defaultPrevented) {\n      setValue('');\n      (_a = inputElementRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  }, [customOnClear, setValue]);\n  var onClearClick = React.useCallback(function (ev) {\n    customOnClearClick === null || customOnClearClick === void 0 ? void 0 : customOnClearClick(ev);\n\n    if (!ev.defaultPrevented) {\n      onClear(ev);\n    }\n  }, [customOnClearClick, onClear]);\n\n  var onFocusCapture = function onFocusCapture(ev) {\n    var _a;\n\n    setHasFocus(true);\n    (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, ev);\n  };\n\n  var onClickFocus = function onClickFocus() {\n    if (inputElementRef.current) {\n      inputElementRef.current.focus();\n      inputElementRef.current.selectionStart = inputElementRef.current.selectionEnd = 0;\n    }\n  };\n\n  var onBlur = React.useCallback(function (ev) {\n    setHasFocus(false);\n    customOnBlur === null || customOnBlur === void 0 ? void 0 : customOnBlur(ev);\n  }, [customOnBlur]);\n\n  var onInputChange = function onInputChange(ev) {\n    setValue(ev.target.value, ev);\n  };\n\n  var onKeyDown = function onKeyDown(ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.escape:\n        customOnEscape === null || customOnEscape === void 0 ? void 0 : customOnEscape(ev); // Only call onClear if the search box has a value to clear. Otherwise, allow the Esc key\n        // to propagate from the empty search box to a parent element such as a dialog, etc.\n\n        if (value && !ev.defaultPrevented) {\n          onClear(ev);\n        }\n\n        break;\n\n      case KeyCodes.enter:\n        if (customOnSearch) {\n          customOnSearch(value);\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n\n        break;\n\n      default:\n        // REVIEW: Why aren't we calling customOnKeyDown for Escape or Enter?\n        customOnKeyDown === null || customOnKeyDown === void 0 ? void 0 : customOnKeyDown(ev); // REVIEW: Why are we calling stopPropagation if customOnKeyDown called preventDefault?\n        // customOnKeyDown should call stopPropagation if it needs it.\n\n        if (ev.defaultPrevented) {\n          ev.stopPropagation();\n        }\n\n        break;\n    }\n  };\n\n  useDebugWarning(props);\n  useComponentRef(props.componentRef, inputElementRef, hasFocus);\n  return React.createElement(\"div\", {\n    role: role,\n    ref: mergedRootRef,\n    className: classNames.root,\n    onFocusCapture: onFocusCapture\n  }, React.createElement(\"div\", {\n    className: classNames.iconContainer,\n    onClick: onClickFocus,\n    \"aria-hidden\": true\n  }, React.createElement(Icon, __assign({\n    iconName: \"Search\"\n  }, iconProps, {\n    className: classNames.icon\n  }))), React.createElement(\"input\", __assign({}, nativeProps, {\n    id: id,\n    className: classNames.field,\n    placeholder: placeholder,\n    onChange: onInputChange,\n    onInput: onInputChange,\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    value: value,\n    disabled: disabled,\n    role: \"searchbox\",\n    \"aria-label\": ariaLabel,\n    ref: inputElementRef\n  })), value.length > 0 && React.createElement(\"div\", {\n    className: classNames.clearButton\n  }, React.createElement(IconButton, __assign({\n    onBlur: onBlur,\n    styles: iconButtonStyles,\n    iconProps: iconButtonProps\n  }, clearButtonProps, {\n    onClick: onClearClick\n  }))));\n});\nSearchBoxBase.displayName = COMPONENT_NAME;\n\nfunction useDebugWarning(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props: props,\n      deprecations: {\n        labelText: 'placeholder'\n      }\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["React","KeyCodes","classNamesFunction","getNativeProps","inputProperties","useControllableValue","useId","useMergedRefs","useWarnings","IconButton","Icon","COMPONENT_NAME","iconButtonStyles","root","height","icon","fontSize","iconButtonProps","iconName","defaultClearButtonProps","ariaLabel","getClassNames","useComponentRef","componentRef","inputElementRef","hasFocus","useImperativeHandle","focus","current","_a","SearchBoxBase","forwardRef","props","forwardedRef","className","defaultValue","disabled","underlined","styles","labelText","_b","placeholder","theme","_c","clearButtonProps","_d","disableAnimation","_e","showIcon","customOnClear","customOnBlur","customOnEscape","customOnSearch","customOnKeyDown","iconProps","role","onChange","onChanged","useState","setHasFocus","prevChangeTimestamp","useRef","value","ev","newValue","timeStamp","uncastValue","setValue","String","rootElementRef","mergedRootRef","id","customOnClearClick","classNames","hasInput","length","nativeProps","onClear","useCallback","defaultPrevented","stopPropagation","preventDefault","onClearClick","onFocusCapture","onFocus","onClickFocus","selectionStart","selectionEnd","onBlur","onInputChange","target","onKeyDown","which","escape","enter","useDebugWarning","ref","iconContainer","onClick","__assign","field","onInput","clearButton","displayName","process","env","NODE_ENV","name","deprecations"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/SearchBox/SearchBox.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { KeyCodes, classNamesFunction, getNativeProps, inputProperties } from '../../Utilities';\nimport { useControllableValue, useId, useMergedRefs, useWarnings } from '@fluentui/react-hooks';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport type { ISearchBoxProps, ISearchBoxStyleProps, ISearchBoxStyles, ISearchBox } from './SearchBox.types';\nimport type { IButtonProps, IButtonStyles } from '../../Button';\nimport type { IIconProps } from '../../Icon';\n\nconst COMPONENT_NAME = 'SearchBox';\nconst iconButtonStyles: Partial<IButtonStyles> = { root: { height: 'auto' }, icon: { fontSize: '12px' } };\nconst iconButtonProps: IIconProps = { iconName: 'Clear' };\nconst defaultClearButtonProps: IButtonProps = { ariaLabel: 'Clear text' };\n\nconst getClassNames = classNamesFunction<ISearchBoxStyleProps, ISearchBoxStyles>();\n\nconst useComponentRef = (\n  componentRef: React.Ref<ISearchBox> | undefined,\n  inputElementRef: React.RefObject<HTMLInputElement>,\n  hasFocus: boolean,\n) => {\n  React.useImperativeHandle(\n    componentRef,\n    () => ({\n      focus: () => inputElementRef.current?.focus(),\n      hasFocus: () => hasFocus,\n    }),\n    [inputElementRef, hasFocus],\n  );\n};\n\nexport const SearchBoxBase: React.FunctionComponent<ISearchBoxProps> = React.forwardRef<\n  HTMLDivElement,\n  ISearchBoxProps\n>((props, forwardedRef) => {\n  const {\n    ariaLabel,\n    className,\n    defaultValue = '',\n    disabled,\n    underlined,\n    styles,\n    // eslint-disable-next-line deprecation/deprecation\n    labelText,\n    // eslint-disable-next-line deprecation/deprecation\n    placeholder = labelText,\n    theme,\n    clearButtonProps = defaultClearButtonProps,\n    disableAnimation = false,\n    showIcon = false,\n    onClear: customOnClear,\n    onBlur: customOnBlur,\n    onEscape: customOnEscape,\n    onSearch: customOnSearch,\n    onKeyDown: customOnKeyDown,\n    iconProps,\n    role,\n    onChange,\n    // eslint-disable-next-line deprecation/deprecation\n    onChanged,\n  } = props;\n\n  const [hasFocus, setHasFocus] = React.useState(false);\n\n  const prevChangeTimestamp = React.useRef<number | undefined>();\n  const [uncastValue, setValue] = useControllableValue(\n    props.value,\n    defaultValue,\n    (ev: React.ChangeEvent<HTMLInputElement> | undefined, newValue: string) => {\n      if (ev && ev.timeStamp === prevChangeTimestamp.current) {\n        // For historical reasons, SearchBox handles both onInput and onChange (we can't modify this\n        // outside a major version due to potential to break partners' tests and possibly apps).\n        // Only call props.onChange for one of the events.\n        return;\n      }\n      prevChangeTimestamp.current = ev?.timeStamp;\n      onChange?.(ev, newValue);\n      onChanged?.(newValue);\n    },\n  );\n  const value = String(uncastValue);\n\n  const rootElementRef = React.useRef<HTMLDivElement>(null);\n  const inputElementRef = React.useRef<HTMLInputElement>(null);\n  const mergedRootRef = useMergedRefs(rootElementRef, forwardedRef);\n  const id = useId(COMPONENT_NAME, props.id);\n\n  const { onClick: customOnClearClick } = clearButtonProps;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    className,\n    underlined,\n    hasFocus,\n    disabled,\n    hasInput: value.length > 0,\n    disableAnimation,\n    showIcon,\n  });\n\n  const nativeProps = getNativeProps<React.InputHTMLAttributes<HTMLInputElement>>(props, inputProperties, [\n    'className',\n    'placeholder',\n    'onFocus',\n    'onBlur',\n    'value',\n    'role',\n  ]);\n\n  const onClear = React.useCallback(\n    (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement> | React.KeyboardEvent<HTMLElement>) => {\n      customOnClear?.(ev);\n      if (!ev.defaultPrevented) {\n        setValue('');\n        inputElementRef.current?.focus();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    },\n    [customOnClear, setValue],\n  );\n\n  const onClearClick = React.useCallback(\n    (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n      customOnClearClick?.(ev);\n      if (!ev.defaultPrevented) {\n        onClear(ev);\n      }\n    },\n    [customOnClearClick, onClear],\n  );\n\n  const onFocusCapture = (ev: React.FocusEvent<HTMLElement>) => {\n    setHasFocus(true);\n    props.onFocus?.(ev as React.FocusEvent<HTMLInputElement>);\n  };\n\n  const onClickFocus = () => {\n    if (inputElementRef.current) {\n      inputElementRef.current.focus();\n      inputElementRef.current.selectionStart = inputElementRef.current.selectionEnd = 0;\n    }\n  };\n\n  const onBlur = React.useCallback(\n    (ev: React.FocusEvent<HTMLInputElement>): void => {\n      setHasFocus(false);\n      customOnBlur?.(ev);\n    },\n    [customOnBlur],\n  );\n\n  const onInputChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(ev.target.value, ev);\n  };\n\n  const onKeyDown = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.escape:\n        customOnEscape?.(ev);\n        // Only call onClear if the search box has a value to clear. Otherwise, allow the Esc key\n        // to propagate from the empty search box to a parent element such as a dialog, etc.\n        if (value && !ev.defaultPrevented) {\n          onClear(ev);\n        }\n        break;\n\n      case KeyCodes.enter:\n        if (customOnSearch) {\n          customOnSearch(value);\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n        break;\n\n      default:\n        // REVIEW: Why aren't we calling customOnKeyDown for Escape or Enter?\n        customOnKeyDown?.(ev);\n        // REVIEW: Why are we calling stopPropagation if customOnKeyDown called preventDefault?\n        // customOnKeyDown should call stopPropagation if it needs it.\n        if (ev.defaultPrevented) {\n          ev.stopPropagation();\n        }\n        break;\n    }\n  };\n\n  useDebugWarning(props);\n  useComponentRef(props.componentRef, inputElementRef, hasFocus);\n\n  return (\n    <div role={role} ref={mergedRootRef} className={classNames.root} onFocusCapture={onFocusCapture}>\n      <div className={classNames.iconContainer} onClick={onClickFocus} aria-hidden>\n        <Icon iconName=\"Search\" {...iconProps} className={classNames.icon} />\n      </div>\n      <input\n        {...nativeProps}\n        id={id}\n        className={classNames.field}\n        placeholder={placeholder}\n        onChange={onInputChange}\n        onInput={onInputChange}\n        onBlur={onBlur}\n        onKeyDown={onKeyDown}\n        value={value}\n        disabled={disabled}\n        role=\"searchbox\"\n        aria-label={ariaLabel}\n        ref={inputElementRef}\n      />\n      {value!.length > 0 && (\n        <div className={classNames.clearButton}>\n          <IconButton\n            onBlur={onBlur}\n            styles={iconButtonStyles}\n            iconProps={iconButtonProps}\n            {...clearButtonProps}\n            onClick={onClearClick}\n          />\n        </div>\n      )}\n    </div>\n  );\n});\nSearchBoxBase.displayName = COMPONENT_NAME;\n\nfunction useDebugWarning(props: ISearchBoxProps) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props,\n      deprecations: { labelText: 'placeholder' },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}