{"ast":null,"code":"var _a, _b, _c;\n\nimport { __assign } from \"tslib\";\nimport { HighContrastSelector, ScreenWidthMaxSmall, getScreenSelector, getGlobalClassNames, getFocusStyle, IconFontSizes, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nvar GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine'\n};\nvar backgroundColor = (_a = {}, _a[MessageBarType.error] = 'errorBackground', _a[MessageBarType.blocked] = 'errorBackground', _a[MessageBarType.success] = 'successBackground', _a[MessageBarType.warning] = 'warningBackground', _a[MessageBarType.severeWarning] = 'severeWarningBackground', _a[MessageBarType.info] = 'infoBackground', _a);\nvar highContrastBackgroundColor = (_b = {}, _b[MessageBarType.error] = 'rgba(255, 0, 0, 0.3)', _b[MessageBarType.blocked] = 'rgba(255, 0, 0, 0.3)', _b[MessageBarType.success] = 'rgba(48, 241, 73, 0.3)', _b[MessageBarType.warning] = 'rgba(255, 254, 57, 0.3)', _b[MessageBarType.severeWarning] = 'rgba(255, 0, 0, 0.3)', _b[MessageBarType.info] = 'Window', _b);\nvar iconColor = (_c = {}, _c[MessageBarType.error] = 'errorIcon', _c[MessageBarType.blocked] = 'errorIcon', _c[MessageBarType.success] = 'successIcon', _c[MessageBarType.warning] = 'warningIcon', _c[MessageBarType.severeWarning] = 'severeWarningIcon', _c[MessageBarType.info] = 'infoIcon', _c);\nexport var getStyles = function getStyles(props) {\n  var _a, _b, _c, _d, _e;\n\n  var theme = props.theme,\n      className = props.className,\n      onDismiss = props.onDismiss,\n      truncated = props.truncated,\n      isMultiline = props.isMultiline,\n      expandSingleLine = props.expandSingleLine,\n      _f = props.messageBarType,\n      messageBarType = _f === void 0 ? MessageBarType.info : _f;\n  var semanticColors = theme.semanticColors,\n      fonts = theme.fonts;\n  var SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var dismissalAndExpandIconStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: (_a = {}, _a[HighContrastSelector] = __assign(__assign({}, getHighContrastNoAdjustStyle()), {\n      color: 'WindowText'\n    }), _a)\n  };\n  var dismissalAndExpandStyle = [getFocusStyle(theme, {\n    inset: 1,\n    highContrastStyle: {\n      outlineOffset: '-6px',\n      outline: '1px solid Highlight'\n    },\n    borderColor: 'transparent'\n  }), {\n    flexShrink: 0,\n    width: 32,\n    height: 32,\n    padding: '8px 12px',\n    selectors: {\n      '& .ms-Button-icon': dismissalAndExpandIconStyle,\n      ':hover': {\n        backgroundColor: 'transparent'\n      },\n      ':active': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }];\n  return {\n    root: [classNames.root, fonts.medium, messageBarType === MessageBarType.error && classNames.error, messageBarType === MessageBarType.blocked && classNames.blocked, messageBarType === MessageBarType.severeWarning && classNames.severeWarning, messageBarType === MessageBarType.success && classNames.success, messageBarType === MessageBarType.warning && classNames.warning, isMultiline ? classNames.multiline : classNames.singleline, !isMultiline && onDismiss && classNames.dismissalSingleLine, !isMultiline && truncated && classNames.expandingSingleLine, {\n      background: semanticColors[backgroundColor[messageBarType]],\n      color: semanticColors.messageText,\n      minHeight: 32,\n      width: '100%',\n      display: 'flex',\n      wordBreak: 'break-word',\n      selectors: (_b = {\n        '.ms-Link': {\n          color: semanticColors.messageLink,\n          selectors: {\n            ':hover': {\n              color: semanticColors.messageLinkHovered\n            }\n          }\n        }\n      }, _b[HighContrastSelector] = __assign(__assign({}, getHighContrastNoAdjustStyle()), {\n        background: highContrastBackgroundColor[messageBarType],\n        border: '1px solid WindowText',\n        color: 'WindowText'\n      }), _b)\n    }, isMultiline && {\n      flexDirection: 'column'\n    }, className],\n    content: [classNames.content, {\n      display: 'flex',\n      width: '100%',\n      lineHeight: 'normal'\n    }],\n    iconContainer: [classNames.iconContainer, {\n      fontSize: IconFontSizes.medium,\n      minWidth: 16,\n      minHeight: 16,\n      display: 'flex',\n      flexShrink: 0,\n      margin: '8px 0 8px 12px'\n    }],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: (_c = {}, _c[HighContrastSelector] = __assign(__assign({}, getHighContrastNoAdjustStyle()), {\n        color: 'WindowText'\n      }), _c)\n    },\n    text: [classNames.text, __assign(__assign({\n      minWidth: 0,\n      display: 'flex',\n      flexGrow: 1,\n      margin: 8\n    }, fonts.small), {\n      selectors: (_d = {}, _d[HighContrastSelector] = __assign({}, getHighContrastNoAdjustStyle()), _d)\n    }), !onDismiss && {\n      marginRight: 12\n    }],\n    innerText: [classNames.innerText, {\n      lineHeight: 16,\n      selectors: {\n        '& span a:last-child': {\n          paddingLeft: 4\n        }\n      }\n    }, truncated && {\n      overflow: 'visible',\n      whiteSpace: 'pre-wrap'\n    }, !isMultiline && {\n      // In high contrast this causes the top and bottom of links' focus outline to be clipped\n      // (not sure of a good way around that while still maintaining text clipping)\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    }, !isMultiline && !truncated && {\n      selectors: (_e = {}, _e[SmallScreenSelector] = {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap'\n      }, _e)\n    }, expandSingleLine && {\n      overflow: 'visible',\n      whiteSpace: 'pre-wrap'\n    }],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [isMultiline ? classNames.actions : classNames.actionsSingleline, {\n      display: 'flex',\n      flexGrow: 0,\n      flexShrink: 0,\n      flexBasis: 'auto',\n      flexDirection: 'row-reverse',\n      alignItems: 'center',\n      margin: '0 12px 0 8px',\n      selectors: {\n        '& button:nth-child(n+2)': {\n          marginLeft: 8\n        }\n      }\n    }, isMultiline && {\n      marginBottom: 8\n    }, onDismiss && !isMultiline && {\n      marginRight: 0\n    }]\n  };\n};","map":{"version":3,"mappings":";;;AAAA,SACEA,oBADF,EAEEC,mBAFF,EAGEC,iBAHF,EAIEC,mBAJF,EAKEC,aALF,EAMEC,aANF,EAOEC,4BAPF,QAQO,eARP;AASA,SAASC,cAAT,QAA+B,oBAA/B;AAIA,IAAMC,gBAAgB,GAAG;AACvBC,MAAI,EAAE,eADiB;AAEvBC,OAAK,EAAE,sBAFgB;AAGvBC,SAAO,EAAE,wBAHc;AAIvBC,eAAa,EAAE,8BAJQ;AAKvBC,SAAO,EAAE,wBALc;AAMvBC,SAAO,EAAE,wBANc;AAOvBC,WAAS,EAAE,yBAPY;AAQvBC,YAAU,EAAE,0BARW;AASvBC,qBAAmB,EAAE,mCATE;AAUvBC,qBAAmB,EAAE,mCAVE;AAWvBC,SAAO,EAAE,uBAXc;AAYvBC,eAAa,EAAE,oBAZQ;AAavBC,MAAI,EAAE,oBAbiB;AAcvBC,WAAS,EAAE,yBAdY;AAevBC,mBAAiB,EAAE,iCAfI;AAgBvBC,kBAAgB,EAAE,gCAhBK;AAiBvBC,WAAS,EAAE,yBAjBY;AAkBvBC,QAAM,EAAE,sBAlBe;AAmBvBC,SAAO,EAAE,uBAnBc;AAoBvBC,mBAAiB,EAAE;AApBI,CAAzB;AAuBA,IAAMC,eAAe,aACnBC,GAACvB,cAAc,CAACG,KAAhB,IAAwB,iBADL,EAEnBoB,GAACvB,cAAc,CAACI,OAAhB,IAA0B,iBAFP,EAGnBmB,GAACvB,cAAc,CAACM,OAAhB,IAA0B,mBAHP,EAInBiB,GAACvB,cAAc,CAACO,OAAhB,IAA0B,mBAJP,EAKnBgB,GAACvB,cAAc,CAACK,aAAhB,IAAgC,yBALb,EAMnBkB,GAACvB,cAAc,CAACwB,IAAhB,IAAuB,gBANJ,KAArB;AASA,IAAMC,2BAA2B,aAC/BC,GAAC1B,cAAc,CAACG,KAAhB,IAAwB,sBADO,EAE/BuB,GAAC1B,cAAc,CAACI,OAAhB,IAA0B,sBAFK,EAG/BsB,GAAC1B,cAAc,CAACM,OAAhB,IAA0B,wBAHK,EAI/BoB,GAAC1B,cAAc,CAACO,OAAhB,IAA0B,yBAJK,EAK/BmB,GAAC1B,cAAc,CAACK,aAAhB,IAAgC,sBALD,EAM/BqB,GAAC1B,cAAc,CAACwB,IAAhB,IAAuB,QANQ,KAAjC;AASA,IAAMG,SAAS,aACbC,GAAC5B,cAAc,CAACG,KAAhB,IAAwB,WADX,EAEbyB,GAAC5B,cAAc,CAACI,OAAhB,IAA0B,WAFb,EAGbwB,GAAC5B,cAAc,CAACM,OAAhB,IAA0B,aAHb,EAIbsB,GAAC5B,cAAc,CAACO,OAAhB,IAA0B,aAJb,EAKbqB,GAAC5B,cAAc,CAACK,aAAhB,IAAgC,mBALnB,EAMbuB,GAAC5B,cAAc,CAACwB,IAAhB,IAAuB,UANV,KAAf;AASA,OAAO,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAA6B;;;AAElD,WAAK,GAOHA,KAAK,MAPP;AAAA,MACAC,SAAS,GAMPD,KAAK,UAPP;AAAA,MAEAE,SAAS,GAKPF,KAAK,UAPP;AAAA,MAGAG,SAAS,GAIPH,KAAK,UAPP;AAAA,MAIAI,WAAW,GAGTJ,KAAK,YAPP;AAAA,MAKAb,gBAAgB,GAEda,KAAK,iBAPP;AAAA,MAMAK,KACEL,KAAK,eAPP;AAAA,MAMAM,cAAc,mBAAGpC,cAAc,CAACwB,IAAlB,GAAsBW,EANpC;AAQM,oBAAc,GAAYE,KAAK,eAA/B;AAAA,MAAgBC,KAAK,GAAKD,KAAK,MAA/B;AAER,MAAME,mBAAmB,GAAG5C,iBAAiB,CAAC,CAAD,EAAID,mBAAJ,CAA7C;AAEA,MAAM8C,UAAU,GAAG5C,mBAAmB,CAACK,gBAAD,EAAmBoC,KAAnB,CAAtC;AAEA,MAAMI,2BAA2B,GAAW;AAC1CC,YAAQ,EAAE5C,aAAa,CAAC6C,MADkB;AAE1CC,UAAM,EAAE,EAFkC;AAG1CC,cAAU,EAAE,MAH8B;AAI1CC,SAAK,EAAEC,cAAc,CAACC,WAJoB;AAK1CC,aAAS,YACP1B,GAAC9B,oBAAD,IAAqByD,sBAChBnD,4BAA4B,EADZ,GACc;AACjC+C,WAAK,EAAE;AAD0B,KADd,CADd;AALiC,GAA5C;AAaA,MAAMK,uBAAuB,GAAW,CACtCtD,aAAa,CAACwC,KAAD,EAAQ;AACnBe,SAAK,EAAE,CADY;AAEnBC,qBAAiB,EAAE;AACjBC,mBAAa,EAAE,MADE;AAEjBC,aAAO,EAAE;AAFQ,KAFA;AAMnBC,eAAW,EAAE;AANM,GAAR,CADyB,EAStC;AACEC,cAAU,EAAE,CADd;AAEEC,SAAK,EAAE,EAFT;AAGEd,UAAM,EAAE,EAHV;AAIEe,WAAO,EAAE,UAJX;AAKEV,aAAS,EAAE;AACT,2BAAqBR,2BADZ;AAET,gBAAU;AACRnB,uBAAe,EAAE;AADT,OAFD;AAKT,iBAAW;AACTA,uBAAe,EAAE;AADR;AALF;AALb,GATsC,CAAxC;AA0BA,SAAO;AACLpB,QAAI,EAAE,CACJsC,UAAU,CAACtC,IADP,EAEJoC,KAAK,CAACsB,MAFF,EAGJxB,cAAc,KAAKpC,cAAc,CAACG,KAAlC,IAA2CqC,UAAU,CAACrC,KAHlD,EAIJiC,cAAc,KAAKpC,cAAc,CAACI,OAAlC,IAA6CoC,UAAU,CAACpC,OAJpD,EAKJgC,cAAc,KAAKpC,cAAc,CAACK,aAAlC,IAAmDmC,UAAU,CAACnC,aAL1D,EAMJ+B,cAAc,KAAKpC,cAAc,CAACM,OAAlC,IAA6CkC,UAAU,CAAClC,OANpD,EAOJ8B,cAAc,KAAKpC,cAAc,CAACO,OAAlC,IAA6CiC,UAAU,CAACjC,OAPpD,EAQJ2B,WAAW,GAAGM,UAAU,CAAChC,SAAd,GAA0BgC,UAAU,CAAC/B,UAR5C,EASJ,CAACyB,WAAD,IAAgBF,SAAhB,IAA6BQ,UAAU,CAAC9B,mBATpC,EAUJ,CAACwB,WAAD,IAAgBD,SAAhB,IAA6BO,UAAU,CAAC7B,mBAVpC,EAWJ;AACEkD,gBAAU,EAAEd,cAAc,CAACzB,eAAe,CAACc,cAAD,CAAhB,CAD5B;AAEEU,WAAK,EAAEC,cAAc,CAACC,WAFxB;AAGEc,eAAS,EAAE,EAHb;AAIEJ,WAAK,EAAE,MAJT;AAKEK,aAAO,EAAE,MALX;AAMEC,eAAS,EAAE,YANb;AAOEf,eAAS;AACP,oBAAY;AACVH,eAAK,EAAEC,cAAc,CAACkB,WADZ;AAEVhB,mBAAS,EAAE;AACT,sBAAU;AACRH,mBAAK,EAAEC,cAAc,CAACmB;AADd;AADD;AAFD;AADL,SASPxC,GAACjC,oBAAD,IAAqByD,sBAChBnD,4BAA4B,EADZ,GACc;AACjC8D,kBAAU,EAAEpC,2BAA2B,CAACW,cAAD,CADN;AAEjC+B,cAAM,EAAE,sBAFyB;AAGjCrB,aAAK,EAAE;AAH0B,OADd,CATd;AAPX,KAXI,EAmCJZ,WAAW,IAAI;AACbkC,mBAAa,EAAE;AADF,KAnCX,EAsCJrC,SAtCI,CADD;AAyCLnB,WAAO,EAAE,CACP4B,UAAU,CAAC5B,OADJ,EAEP;AACEmD,aAAO,EAAE,MADX;AAEEL,WAAK,EAAE,MAFT;AAGEb,gBAAU,EAAE;AAHd,KAFO,CAzCJ;AAiDLhC,iBAAa,EAAE,CACb2B,UAAU,CAAC3B,aADE,EAEb;AACE6B,cAAQ,EAAE5C,aAAa,CAAC8D,MAD1B;AAEES,cAAQ,EAAE,EAFZ;AAGEP,eAAS,EAAE,EAHb;AAIEC,aAAO,EAAE,MAJX;AAKEN,gBAAU,EAAE,CALd;AAMEa,YAAM,EAAE;AANV,KAFa,CAjDV;AA4DLC,QAAI,EAAE;AACJzB,WAAK,EAAEC,cAAc,CAACpB,SAAS,CAACS,cAAD,CAAV,CADjB;AAEJa,eAAS,YACPrB,GAACnC,oBAAD,IAAqByD,sBAChBnD,4BAA4B,EADZ,GACc;AACjC+C,aAAK,EAAE;AAD0B,OADd,CADd;AAFL,KA5DD;AAqELhC,QAAI,EAAE,CACJ0B,UAAU,CAAC1B,IADP;AAGFuD,cAAQ,EAAE;AACVN,aAAO,EAAE;AACTS,cAAQ,EAAE;AACVF,YAAM,EAAE;OACLhC,KAAK,CAACmC,QAAK;AACdxB,eAAS,YACPyB,GAACjF,oBAAD,IAAqByD,aAChBnD,4BAA4B,EADZ,CADd;AADK,MAPZ,EAcJ,CAACiC,SAAD,IAAc;AACZ2C,iBAAW,EAAE;AADD,KAdV,CArED;AAuFL5D,aAAS,EAAE,CACTyB,UAAU,CAACzB,SADF,EAET;AACE8B,gBAAU,EAAE,EADd;AAEEI,eAAS,EAAE;AACT,+BAAuB;AACrB2B,qBAAW,EAAE;AADQ;AADd;AAFb,KAFS,EAUT3C,SAAS,IAAI;AACX4C,cAAQ,EAAE,SADC;AAEXC,gBAAU,EAAE;AAFD,KAVJ,EAcT,CAAC5C,WAAD,IAAgB;AACd;AACA;AACA2C,cAAQ,EAAE,QAHI;AAIdE,kBAAY,EAAE,UAJA;AAKdD,gBAAU,EAAE;AALE,KAdP,EAqBT,CAAC5C,WAAD,IACE,CAACD,SADH,IACgB;AACZgB,eAAS,YACP+B,GAACzC,mBAAD,IAAuB;AACrBsC,gBAAQ,EAAE,SADW;AAErBC,kBAAU,EAAE;AAFS,OADhB;AADG,KAtBP,EA8BT7D,gBAAgB,IAAI;AAClB4D,cAAQ,EAAE,SADQ;AAElBC,gBAAU,EAAE;AAFM,KA9BX,CAvFN;AA0HL9D,qBAAiB,EAAEwB,UAAU,CAACxB,iBA1HzB;AA2HLC,oBAAgB,EAAEuB,UAAU,CAACvB,gBA3HxB;AA4HLC,aAAS,EAAE,CAACsB,UAAU,CAACtB,SAAZ,EAAuBiC,uBAAvB,CA5HN;AA6HLhC,UAAM,EAAE,CAACqB,UAAU,CAACrB,MAAZ,EAAoBgC,uBAApB,CA7HH;AA8HL/B,WAAO,EAAE,CACPc,WAAW,GAAGM,UAAU,CAACpB,OAAd,GAAwBoB,UAAU,CAACnB,iBADvC,EAEP;AACE0C,aAAO,EAAE,MADX;AAEES,cAAQ,EAAE,CAFZ;AAGEf,gBAAU,EAAE,CAHd;AAIEwB,eAAS,EAAE,MAJb;AAKEb,mBAAa,EAAE,aALjB;AAMEc,gBAAU,EAAE,QANd;AAOEZ,YAAM,EAAE,cAPV;AAQErB,eAAS,EAAE;AACT,mCAA2B;AACzBkC,oBAAU,EAAE;AADa;AADlB;AARb,KAFO,EAgBPjD,WAAW,IAAI;AACbkD,kBAAY,EAAE;AADD,KAhBR,EAmBPpD,SAAS,IACP,CAACE,WADH,IACkB;AACdyC,iBAAW,EAAE;AADC,KApBX;AA9HJ,GAAP;AAuJD,CA9MM","names":["HighContrastSelector","ScreenWidthMaxSmall","getScreenSelector","getGlobalClassNames","getFocusStyle","IconFontSizes","getHighContrastNoAdjustStyle","MessageBarType","GlobalClassNames","root","error","blocked","severeWarning","success","warning","multiline","singleline","dismissalSingleLine","expandingSingleLine","content","iconContainer","text","innerText","dismissSingleLine","expandSingleLine","dismissal","expand","actions","actionsSingleline","backgroundColor","_a","info","highContrastBackgroundColor","_b","iconColor","_c","getStyles","props","className","onDismiss","truncated","isMultiline","_f","messageBarType","theme","fonts","SmallScreenSelector","classNames","dismissalAndExpandIconStyle","fontSize","xSmall","height","lineHeight","color","semanticColors","messageText","selectors","__assign","dismissalAndExpandStyle","inset","highContrastStyle","outlineOffset","outline","borderColor","flexShrink","width","padding","medium","background","minHeight","display","wordBreak","messageLink","messageLinkHovered","border","flexDirection","minWidth","margin","icon","flexGrow","small","_d","marginRight","paddingLeft","overflow","whiteSpace","textOverflow","_e","flexBasis","alignItems","marginLeft","marginBottom"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.styles.ts"],"sourcesContent":["import {\n  HighContrastSelector,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nimport type { IStyle, ISemanticColors } from '../../Styling';\nimport type { IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\n\nconst backgroundColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorBackground',\n  [MessageBarType.blocked]: 'errorBackground',\n  [MessageBarType.success]: 'successBackground',\n  [MessageBarType.warning]: 'warningBackground',\n  [MessageBarType.severeWarning]: 'severeWarningBackground',\n  [MessageBarType.info]: 'infoBackground',\n};\n\nconst highContrastBackgroundColor: { [key: string]: string } = {\n  [MessageBarType.error]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.blocked]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.success]: 'rgba(48, 241, 73, 0.3)',\n  [MessageBarType.warning]: 'rgba(255, 254, 57, 0.3)',\n  [MessageBarType.severeWarning]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.info]: 'Window',\n};\n\nconst iconColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorIcon',\n  [MessageBarType.blocked]: 'errorIcon',\n  [MessageBarType.success]: 'successIcon',\n  [MessageBarType.warning]: 'warningIcon',\n  [MessageBarType.severeWarning]: 'severeWarningIcon',\n  [MessageBarType.info]: 'infoIcon',\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const {\n    theme,\n    className,\n    onDismiss,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    messageBarType = MessageBarType.info,\n  } = props;\n  const { semanticColors, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: {\n      [HighContrastSelector]: {\n        ...getHighContrastNoAdjustStyle(),\n        color: 'WindowText',\n      },\n    },\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-6px',\n        outline: '1px solid Highlight',\n      },\n      borderColor: 'transparent',\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent',\n        },\n        ':active': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: semanticColors[backgroundColor[messageBarType]],\n        color: semanticColors.messageText,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.messageLink,\n            selectors: {\n              ':hover': {\n                color: semanticColors.messageLinkHovered,\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n            background: highContrastBackgroundColor[messageBarType],\n            border: '1px solid WindowText',\n            color: 'WindowText',\n          },\n        },\n      },\n      isMultiline && {\n        flexDirection: 'column',\n      },\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal',\n      },\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px',\n      },\n    ],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: {\n        [HighContrastSelector]: {\n          ...getHighContrastNoAdjustStyle(),\n          color: 'WindowText',\n        },\n      },\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        selectors: {\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      !onDismiss && {\n        marginRight: 12,\n      },\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a:last-child': {\n            paddingLeft: 4,\n          },\n        },\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n      !isMultiline && {\n        // In high contrast this causes the top and bottom of links' focus outline to be clipped\n        // (not sure of a good way around that while still maintaining text clipping)\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap',\n            },\n          },\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8,\n          },\n        },\n      },\n      isMultiline && {\n        marginBottom: 8,\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0,\n        },\n    ],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}