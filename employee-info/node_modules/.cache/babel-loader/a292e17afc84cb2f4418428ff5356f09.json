{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, FocusRects, Async, KeyCodes, elementContains, getRTLSafeKeyCode, classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { CheckboxVisibility, ColumnActionsMode, ConstrainMode, DetailsListLayoutMode, ColumnDragEndLocation } from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\nimport { DragDropHelper } from '../../DragDrop';\nimport { GroupedList } from '../../GroupedList';\nimport { List } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles'; // For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\n\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction, getId } from '@fluentui/utilities';\nimport { useConst } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nvar MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nvar DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nvar DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\n\nvar DetailsListInner = function DetailsListInner(props) {\n  var selection = props.selection;\n  var ariaLabelForListHeader = props.ariaLabelForListHeader,\n      ariaLabelForSelectAllCheckbox = props.ariaLabelForSelectAllCheckbox,\n      ariaLabelForSelectionColumn = props.ariaLabelForSelectionColumn,\n      className = props.className,\n      checkboxVisibility = props.checkboxVisibility,\n      compact = props.compact,\n      constrainMode = props.constrainMode,\n      dragDropEvents = props.dragDropEvents,\n      groups = props.groups,\n      groupProps = props.groupProps,\n      indentWidth = props.indentWidth,\n      items = props.items,\n      isPlaceholderData = props.isPlaceholderData,\n      isHeaderVisible = props.isHeaderVisible,\n      layoutMode = props.layoutMode,\n      onItemInvoked = props.onItemInvoked,\n      onItemContextMenu = props.onItemContextMenu,\n      onColumnHeaderClick = props.onColumnHeaderClick,\n      onColumnHeaderContextMenu = props.onColumnHeaderContextMenu,\n      _a = props.selectionMode,\n      selectionMode = _a === void 0 ? selection.mode : _a,\n      selectionPreservedOnEmptyClick = props.selectionPreservedOnEmptyClick,\n      selectionZoneProps = props.selectionZoneProps,\n      ariaLabel = props.ariaLabel,\n      ariaLabelForGrid = props.ariaLabelForGrid,\n      rowElementEventMap = props.rowElementEventMap,\n      _b = props.shouldApplyApplicationRole,\n      shouldApplyApplicationRole = _b === void 0 ? false : _b,\n      getKey = props.getKey,\n      listProps = props.listProps,\n      usePageCache = props.usePageCache,\n      onShouldVirtualize = props.onShouldVirtualize,\n      viewport = props.viewport,\n      minimumPixelsForDrag = props.minimumPixelsForDrag,\n      getGroupHeight = props.getGroupHeight,\n      styles = props.styles,\n      theme = props.theme,\n      _c = props.cellStyleProps,\n      cellStyleProps = _c === void 0 ? DEFAULT_CELL_STYLE_PROPS : _c,\n      onRenderCheckbox = props.onRenderCheckbox,\n      useFastIcons = props.useFastIcons,\n      dragDropHelper = props.dragDropHelper,\n      adjustedColumns = props.adjustedColumns,\n      isCollapsed = props.isCollapsed,\n      isSizing = props.isSizing,\n      isSomeGroupExpanded = props.isSomeGroupExpanded,\n      version = props.version,\n      rootRef = props.rootRef,\n      listRef = props.listRef,\n      focusZoneRef = props.focusZoneRef,\n      columnReorderOptions = props.columnReorderOptions,\n      groupedListRef = props.groupedListRef,\n      headerRef = props.headerRef,\n      onGroupExpandStateChanged = props.onGroupExpandStateChanged,\n      onColumnIsSizingChanged = props.onColumnIsSizingChanged,\n      onRowDidMount = props.onRowDidMount,\n      onRowWillUnmount = props.onRowWillUnmount,\n      disableSelectionZone = props.disableSelectionZone,\n      onColumnResized = props.onColumnResized,\n      onColumnAutoResized = props.onColumnAutoResized,\n      onToggleCollapse = props.onToggleCollapse,\n      onActiveRowChanged = props.onActiveRowChanged,\n      onBlur = props.onBlur,\n      eventsToRegister = props.rowElementEventMap,\n      onRenderMissingItem = props.onRenderMissingItem,\n      onRenderItemColumn = props.onRenderItemColumn,\n      getCellValueKey = props.getCellValueKey,\n      getRowAriaLabel = props.getRowAriaLabel,\n      getRowAriaDescribedBy = props.getRowAriaDescribedBy,\n      checkButtonAriaLabel = props.checkButtonAriaLabel,\n      checkButtonGroupAriaLabel = props.checkButtonGroupAriaLabel,\n      checkboxCellClassName = props.checkboxCellClassName,\n      useReducedRowRenderer = props.useReducedRowRenderer,\n      enableUpdateAnimations = props.enableUpdateAnimations,\n      enterModalSelectionOnTouch = props.enterModalSelectionOnTouch,\n      onRenderDefaultRow = props.onRenderDefaultRow,\n      selectionZoneRef = props.selectionZoneRef,\n      focusZoneProps = props.focusZoneProps;\n  var defaultRole = 'grid';\n  var role = props.role ? props.role : defaultRole;\n  var rowId = getId('row');\n  var groupNestingDepth = getGroupNestingDepth(groups);\n  var groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);\n  var additionalListProps = React.useMemo(function () {\n    return __assign({\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey: getKey,\n      version: version\n    }, listProps);\n  }, [isSizing, getKey, version, listProps]);\n  var selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    var isCollapsedGroupSelectVisible = groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n\n    var isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  var defaultOnRenderDetailsHeader = React.useCallback(function (detailsHeaderProps) {\n    return React.createElement(DetailsHeader, __assign({}, detailsHeaderProps));\n  }, []);\n  var defaultOnRenderDetailsFooter = React.useCallback(function () {\n    return null;\n  }, []);\n  var propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n  var onRenderDetailsHeader = React.useMemo(function () {\n    return propsOnRenderDetailsHeader ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader) : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n  var propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n  var onRenderDetailsFooter = React.useMemo(function () {\n    return propsOnRenderDetailsFooter ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter) : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n  var detailsFooterProps = React.useMemo(function () {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth: groupNestingDepth,\n      selection: selection,\n      selectionMode: selectionMode,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps\n    };\n  }, [adjustedColumns, groupNestingDepth, selection, selectionMode, viewport, checkboxVisibility, indentWidth, cellStyleProps]);\n  var columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n  var onColumnDragEnd = React.useCallback(function (_a, event) {\n    var dropLocation = _a.dropLocation;\n    var finalDropLocation = ColumnDragEndLocation.outside;\n\n    if (columnReorderOnDragEnd) {\n      if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n        finalDropLocation = dropLocation;\n      } else if (rootRef.current) {\n        var clientRect = rootRef.current.getBoundingClientRect();\n\n        if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n          finalDropLocation = ColumnDragEndLocation.surface;\n        }\n      }\n\n      columnReorderOnDragEnd(finalDropLocation);\n    }\n  }, [columnReorderOnDragEnd, rootRef]);\n  var columnReorderProps = React.useMemo(function () {\n    if (columnReorderOptions) {\n      return __assign(__assign({}, columnReorderOptions), {\n        onColumnDragEnd: onColumnDragEnd\n      });\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n  var rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  var colCount = (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) + (adjustedColumns ? adjustedColumns.length : 0) + (groups ? 1 : 0);\n  var classNames = React.useMemo(function () {\n    return getClassNames(styles, {\n      theme: theme,\n      compact: compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className: className\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n  var onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n  var finalOnRenderDetailsGroupFooter = React.useMemo(function () {\n    return onRenderDetailsGroupFooter ? function (groupFooterProps, defaultRender) {\n      return onRenderDetailsGroupFooter(__assign(__assign({}, groupFooterProps), {\n        columns: adjustedColumns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: selection,\n        selectionMode: selectionMode,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps\n      }), defaultRender);\n    } : undefined;\n  }, [onRenderDetailsGroupFooter, adjustedColumns, groupNestingDepth, indentWidth, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps]);\n  var onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n  var finalOnRenderDetailsGroupHeader = React.useMemo(function () {\n    return onRenderDetailsGroupHeader ? function (groupHeaderProps, defaultRender) {\n      var _a, _b;\n\n      var groupIndex = groupHeaderProps.groupIndex;\n      var groupKey = groupIndex !== undefined ? (_b = (_a = groupHeaderProps.groups) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.key : undefined;\n      var totalRowCount = groupKey !== undefined && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].totalRowCount : 0;\n      return onRenderDetailsGroupHeader(__assign(__assign({}, groupHeaderProps), {\n        columns: adjustedColumns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: selection,\n        selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps,\n        ariaColSpan: adjustedColumns.length,\n        ariaPosInSet: undefined,\n        ariaSetSize: undefined,\n        ariaRowCount: undefined,\n        ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined\n      }), defaultRender);\n    } : function (groupHeaderProps, defaultRender) {\n      var _a, _b;\n\n      var groupIndex = groupHeaderProps.groupIndex;\n      var groupKey = groupIndex !== undefined ? (_b = (_a = groupHeaderProps.groups) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.key : undefined;\n      var totalRowCount = groupKey !== undefined && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].totalRowCount : 0;\n      return defaultRender(__assign(__assign({}, groupHeaderProps), {\n        ariaColSpan: adjustedColumns.length,\n        ariaPosInSet: undefined,\n        ariaSetSize: undefined,\n        ariaRowCount: undefined,\n        ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined\n      }));\n    };\n  }, [onRenderDetailsGroupHeader, adjustedColumns, groupNestingDepth, indentWidth, isHeaderVisible, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps, groupedDetailsListIndexMap]);\n  var finalGroupProps = React.useMemo(function () {\n    var _a;\n\n    return __assign(__assign({}, groupProps), {\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: __assign(__assign({}, groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps), {\n        selectAllButtonProps: __assign({\n          'aria-label': checkButtonGroupAriaLabel\n        }, (_a = groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps) === null || _a === void 0 ? void 0 : _a.selectAllButtonProps)\n      })\n    });\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n  var sumColumnWidths = useConst(function () {\n    return memoizeFunction(function (columns) {\n      var totalWidth = 0;\n      columns.forEach(function (column) {\n        return totalWidth += column.calculatedWidth || column.minWidth;\n      });\n      return totalWidth;\n    });\n  });\n  var collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n  var rowWidth = React.useMemo(function () {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n  var onRenderCell = React.useCallback(function (nestingDepth, item, index, group) {\n    var finalOnRenderRow = props.onRenderRow ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow) : onRenderDefaultRow;\n    var groupKey = group ? group.key : undefined;\n    var numOfGroupHeadersBeforeItem = groupKey && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem : 0;\n    var rowRole = role === defaultRole ? undefined : 'presentation';\n    var rowProps = {\n      item: item,\n      itemIndex: index,\n      flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,\n      compact: compact,\n      columns: adjustedColumns,\n      groupNestingDepth: nestingDepth,\n      id: rowId + \"-\" + index,\n      selectionMode: selectionMode,\n      selection: selection,\n      onDidMount: onRowDidMount,\n      onWillUnmount: onRowWillUnmount,\n      onRenderItemColumn: onRenderItemColumn,\n      getCellValueKey: getCellValueKey,\n      eventsToRegister: eventsToRegister,\n      dragDropEvents: dragDropEvents,\n      dragDropHelper: dragDropHelper,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      collapseAllVisibility: collapseAllVisibility,\n      getRowAriaLabel: getRowAriaLabel,\n      getRowAriaDescribedBy: getRowAriaDescribedBy,\n      checkButtonAriaLabel: checkButtonAriaLabel,\n      checkboxCellClassName: checkboxCellClassName,\n      useReducedRowRenderer: useReducedRowRenderer,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps,\n      onRenderDetailsCheckbox: onRenderCheckbox,\n      enableUpdateAnimations: enableUpdateAnimations,\n      rowWidth: rowWidth,\n      useFastIcons: useFastIcons,\n      role: rowRole\n    };\n\n    if (!item) {\n      if (onRenderMissingItem) {\n        return onRenderMissingItem(index, rowProps);\n      }\n\n      return null;\n    }\n\n    return finalOnRenderRow(rowProps);\n  }, [compact, adjustedColumns, selectionMode, selection, rowId, onRowDidMount, onRowWillUnmount, onRenderItemColumn, getCellValueKey, eventsToRegister, dragDropEvents, dragDropHelper, viewport, checkboxVisibility, collapseAllVisibility, getRowAriaLabel, getRowAriaDescribedBy, isHeaderVisible, checkButtonAriaLabel, checkboxCellClassName, useReducedRowRenderer, indentWidth, cellStyleProps, onRenderCheckbox, enableUpdateAnimations, useFastIcons, onRenderDefaultRow, onRenderMissingItem, props.onRenderRow, rowWidth, role, groupedDetailsListIndexMap]);\n  var onRenderListCell = React.useCallback(function (nestingDepth) {\n    return function (item, itemIndex) {\n      return onRenderCell(nestingDepth, item, itemIndex);\n    };\n  }, [onRenderCell]);\n  var isRightArrow = React.useCallback(function (event) {\n    // eslint-disable-next-line deprecation/deprecation\n    return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n  }, [theme]);\n\n  var focusZoneInnerProps = __assign(__assign({}, focusZoneProps), {\n    componentRef: focusZoneProps && focusZoneProps.componentRef ? focusZoneProps.componentRef : focusZoneRef,\n    className: classNames.focusZone,\n    direction: focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.vertical,\n    shouldEnterInnerZone: focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow,\n    onActiveElementChanged: focusZoneProps && focusZoneProps.onActiveElementChanged ? focusZoneProps.onActiveElementChanged : onActiveRowChanged,\n    shouldRaiseClicksOnEnter: false,\n    onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur\n  });\n\n  var list = groups ? React.createElement(GroupedList, {\n    focusZoneProps: focusZoneInnerProps,\n    componentRef: groupedListRef,\n    groups: groups,\n    groupProps: finalGroupProps,\n    items: items,\n    onRenderCell: onRenderCell,\n    role: \"presentation\",\n    selection: selection,\n    selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n    dragDropEvents: dragDropEvents,\n    dragDropHelper: dragDropHelper,\n    eventsToRegister: rowElementEventMap,\n    listProps: additionalListProps,\n    onGroupExpandStateChanged: onGroupExpandStateChanged,\n    usePageCache: usePageCache,\n    onShouldVirtualize: onShouldVirtualize,\n    getGroupHeight: getGroupHeight,\n    compact: compact\n  }) : React.createElement(FocusZone, __assign({}, focusZoneInnerProps), React.createElement(List, __assign({\n    ref: listRef,\n    role: \"presentation\",\n    items: items,\n    onRenderCell: onRenderListCell(0),\n    usePageCache: usePageCache,\n    onShouldVirtualize: onShouldVirtualize\n  }, additionalListProps)));\n  var onHeaderKeyDown = React.useCallback(function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.down) {\n      if (focusZoneRef.current && focusZoneRef.current.focus()) {\n        // select the first item in list after down arrow key event\n        // only if nothing was selected; otherwise start with the already-selected item\n        if (selection.getSelectedIndices().length === 0) {\n          selection.setIndexSelected(0, true, false);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [selection, focusZoneRef]);\n  var onContentKeyDown = React.useCallback(function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.up && !ev.altKey) {\n      if (headerRef.current && headerRef.current.focus()) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [headerRef]);\n  return (// If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n    // with JAWS.\n    React.createElement(\"div\", __assign({\n      ref: rootRef,\n      className: classNames.root,\n      \"data-automationid\": \"DetailsList\",\n      \"data-is-scrollable\": \"false\",\n      \"aria-label\": ariaLabel\n    }, shouldApplyApplicationRole ? {\n      role: 'application'\n    } : {}), React.createElement(FocusRects, null), React.createElement(\"div\", {\n      role: role,\n      \"aria-label\": ariaLabelForGrid,\n      \"aria-rowcount\": isPlaceholderData ? -1 : rowCount,\n      \"aria-colcount\": colCount,\n      \"aria-readonly\": \"true\",\n      \"aria-busy\": isPlaceholderData\n    }, React.createElement(\"div\", {\n      onKeyDown: onHeaderKeyDown,\n      role: \"presentation\",\n      className: classNames.headerWrapper\n    }, isHeaderVisible && onRenderDetailsHeader({\n      componentRef: headerRef,\n      selectionMode: selectionMode,\n      layoutMode: layoutMode,\n      selection: selection,\n      columns: adjustedColumns,\n      onColumnClick: onColumnHeaderClick,\n      onColumnContextMenu: onColumnHeaderContextMenu,\n      onColumnResized: onColumnResized,\n      onColumnIsSizingChanged: onColumnIsSizingChanged,\n      onColumnAutoResized: onColumnAutoResized,\n      groupNestingDepth: groupNestingDepth,\n      isAllCollapsed: isCollapsed,\n      onToggleCollapseAll: onToggleCollapse,\n      ariaLabel: ariaLabelForListHeader,\n      ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n      ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n      selectAllVisibility: selectAllVisibility,\n      collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n      viewport: viewport,\n      columnReorderProps: columnReorderProps,\n      minimumPixelsForDrag: minimumPixelsForDrag,\n      cellStyleProps: cellStyleProps,\n      checkboxVisibility: checkboxVisibility,\n      indentWidth: indentWidth,\n      onRenderDetailsCheckbox: onRenderCheckbox,\n      rowWidth: sumColumnWidths(adjustedColumns),\n      useFastIcons: useFastIcons\n    }, onRenderDetailsHeader)), React.createElement(\"div\", {\n      onKeyDown: onContentKeyDown,\n      role: \"presentation\",\n      className: classNames.contentWrapper\n    }, !disableSelectionZone ? React.createElement(SelectionZone, __assign({\n      ref: selectionZoneRef,\n      selection: selection,\n      selectionPreservedOnEmptyClick: selectionPreservedOnEmptyClick,\n      selectionMode: selectionMode,\n      onItemInvoked: onItemInvoked,\n      onItemContextMenu: onItemContextMenu,\n      enterModalOnTouch: enterModalSelectionOnTouch\n    }, selectionZoneProps || {}), list) : list), onRenderDetailsFooter(__assign({}, detailsFooterProps))))\n  );\n};\n\nvar DetailsListBase =\n/** @class */\nfunction (_super) {\n  __extends(DetailsListBase, _super);\n\n  function DetailsListBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._header = React.createRef();\n    _this._groupedList = React.createRef();\n    _this._list = React.createRef();\n    _this._focusZone = React.createRef();\n    _this._selectionZone = React.createRef();\n\n    _this._onRenderRow = function (props, defaultRender) {\n      return React.createElement(DetailsRow, __assign({}, props));\n    };\n\n    _this._getDerivedStateFromProps = function (nextProps, previousState) {\n      var _a = _this.props,\n          checkboxVisibility = _a.checkboxVisibility,\n          items = _a.items,\n          setKey = _a.setKey,\n          _b = _a.selectionMode,\n          selectionMode = _b === void 0 ? _this._selection.mode : _b,\n          columns = _a.columns,\n          viewport = _a.viewport,\n          compact = _a.compact,\n          dragDropEvents = _a.dragDropEvents;\n      var _c = (_this.props.groupProps || {}).isAllGroupsCollapsed,\n          isAllGroupsCollapsed = _c === void 0 ? undefined : _c;\n      var newViewportWidth = nextProps.viewport && nextProps.viewport.width || 0;\n      var oldViewportWidth = viewport && viewport.width || 0;\n      var shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n      var shouldForceUpdates = false;\n\n      if (nextProps.layoutMode !== _this.props.layoutMode) {\n        shouldForceUpdates = true;\n      }\n\n      var nextState = previousState;\n\n      if (shouldResetSelection) {\n        _this._initialFocusedIndex = nextProps.initialFocusedIndex; // reset focusedItemIndex when setKey changes\n\n        nextState = __assign(__assign({}, nextState), {\n          focusedItemIndex: _this._initialFocusedIndex !== undefined ? _this._initialFocusedIndex : -1\n        });\n      }\n\n      if (!_this.props.disableSelectionZone && nextProps.items !== items) {\n        _this._selection.setItems(nextProps.items, shouldResetSelection);\n      }\n\n      if (nextProps.checkboxVisibility !== checkboxVisibility || nextProps.columns !== columns || newViewportWidth !== oldViewportWidth || nextProps.compact !== compact) {\n        shouldForceUpdates = true;\n      }\n\n      nextState = __assign(__assign({}, nextState), _this._adjustColumns(nextProps, nextState, true));\n\n      if (nextProps.selectionMode !== selectionMode) {\n        shouldForceUpdates = true;\n      }\n\n      if (isAllGroupsCollapsed === undefined && nextProps.groupProps && nextProps.groupProps.isAllGroupsCollapsed !== undefined) {\n        nextState = __assign(__assign({}, nextState), {\n          isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n          isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed\n        });\n      }\n\n      if (nextProps.dragDropEvents !== dragDropEvents) {\n        _this._dragDropHelper && _this._dragDropHelper.dispose();\n        _this._dragDropHelper = nextProps.dragDropEvents ? new DragDropHelper({\n          selection: _this._selection,\n          minimumPixelsForDrag: nextProps.minimumPixelsForDrag\n        }) : undefined;\n        shouldForceUpdates = true;\n      }\n\n      if (shouldForceUpdates) {\n        nextState = __assign(__assign({}, nextState), {\n          version: {}\n        });\n      }\n\n      return nextState;\n    };\n\n    _this._onGroupExpandStateChanged = function (isSomeGroupExpanded) {\n      _this.setState({\n        isSomeGroupExpanded: isSomeGroupExpanded\n      });\n    };\n\n    _this._onColumnIsSizingChanged = function (column, isSizing) {\n      _this.setState({\n        isSizing: isSizing\n      });\n    };\n\n    _this._onRowDidMount = function (row) {\n      var _a = row.props,\n          item = _a.item,\n          itemIndex = _a.itemIndex;\n\n      var itemKey = _this._getItemKey(item, itemIndex);\n\n      _this._activeRows[itemKey] = row; // this is used for column auto resize\n\n      _this._setFocusToRowIfPending(row);\n\n      var onRowDidMount = _this.props.onRowDidMount;\n\n      if (onRowDidMount) {\n        onRowDidMount(item, itemIndex);\n      }\n    };\n\n    _this._onRowWillUnmount = function (row) {\n      var onRowWillUnmount = _this.props.onRowWillUnmount;\n      var _a = row.props,\n          item = _a.item,\n          itemIndex = _a.itemIndex;\n\n      var itemKey = _this._getItemKey(item, itemIndex);\n\n      delete _this._activeRows[itemKey];\n\n      if (onRowWillUnmount) {\n        onRowWillUnmount(item, itemIndex);\n      }\n    };\n\n    _this._onToggleCollapse = function (collapsed) {\n      _this.setState({\n        isCollapsed: collapsed\n      });\n\n      if (_this._groupedList.current) {\n        _this._groupedList.current.toggleCollapseAll(collapsed);\n      }\n    };\n\n    _this._onColumnResized = function (resizingColumn, newWidth, resizingColumnIndex) {\n      var newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n\n      if (_this.props.onColumnResize) {\n        _this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n      }\n\n      _this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n      _this.setState(__assign(__assign({}, _this._adjustColumns(_this.props, _this.state, true, resizingColumnIndex)), {\n        version: {}\n      }));\n    };\n    /**\n     * Callback function when double clicked on the details header column resizer\n     * which will measure the column cells of all the active rows and resize the\n     * column to the max cell width.\n     *\n     * @param column - double clicked column definition\n     * @param columnIndex - double clicked column index\n     * TODO: min width 100 should be changed to const value and should be consistent with the\n     * value used on _onSizerMove method in DetailsHeader\n     */\n\n\n    _this._onColumnAutoResized = function (column, columnIndex) {\n      var max = 0;\n      var count = 0;\n      var totalCount = Object.keys(_this._activeRows).length;\n\n      for (var key in _this._activeRows) {\n        if (_this._activeRows.hasOwnProperty(key)) {\n          var currentRow = _this._activeRows[key];\n          currentRow.measureCell(columnIndex, function (width) {\n            max = Math.max(max, width);\n            count++;\n\n            if (count === totalCount) {\n              _this._onColumnResized(column, max, columnIndex);\n            }\n          });\n        }\n      }\n    };\n    /**\n     * Call back function when an element in FocusZone becomes active. It will translate it into item\n     * and call onActiveItemChanged callback if specified.\n     *\n     * @param row - element that became active in Focus Zone\n     * @param focus - event from Focus Zone\n     */\n\n\n    _this._onActiveRowChanged = function (el, ev) {\n      var _a = _this.props,\n          items = _a.items,\n          onActiveItemChanged = _a.onActiveItemChanged;\n\n      if (!el) {\n        return;\n      } // Check and assign index only if the event was raised from any DetailsRow element\n\n\n      if (el.getAttribute('data-item-index')) {\n        var index = Number(el.getAttribute('data-item-index'));\n\n        if (index >= 0) {\n          if (onActiveItemChanged) {\n            onActiveItemChanged(items[index], index, ev);\n          }\n\n          _this.setState({\n            focusedItemIndex: index\n          });\n        }\n      }\n    };\n\n    _this._onBlur = function (event) {\n      _this.setState({\n        focusedItemIndex: -1\n      });\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._activeRows = {};\n    _this._columnOverrides = {};\n    _this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: _this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: _this._getDerivedStateFromProps\n    };\n    _this._selection = props.selection || new Selection({\n      onSelectionChanged: undefined,\n      getKey: props.getKey,\n      selectionMode: props.selectionMode\n    });\n\n    if (!_this.props.disableSelectionZone) {\n      _this._selection.setItems(props.items, false);\n    }\n\n    _this._dragDropHelper = props.dragDropEvents ? new DragDropHelper({\n      selection: _this._selection,\n      minimumPixelsForDrag: props.minimumPixelsForDrag\n    }) : undefined;\n    _this._initialFocusedIndex = props.initialFocusedIndex;\n    return _this;\n  }\n\n  DetailsListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  };\n\n  DetailsListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  };\n\n  DetailsListBase.prototype.focusIndex = function (index, forceIntoFirstElement, measureItem, scrollToMode) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    var item = this.props.items[index];\n\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      var itemKey = this._getItemKey(item, index);\n\n      var row = this._activeRows[itemKey];\n\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  };\n\n  DetailsListBase.prototype.getStartItemIndexInView = function () {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n\n    return 0;\n  };\n\n  DetailsListBase.prototype.updateColumn = function (column, options) {\n    var _a, _b;\n\n    var NO_COLUMNS = [];\n    var _c = this.props,\n        _d = _c.columns,\n        columns = _d === void 0 ? NO_COLUMNS : _d,\n        selectionMode = _c.selectionMode,\n        checkboxVisibility = _c.checkboxVisibility,\n        columnReorderOptions = _c.columnReorderOptions;\n    var width = options.width,\n        newColumnIndex = options.newColumnIndex;\n    var index = columns.findIndex(function (col) {\n      return col.key === column.key;\n    });\n\n    if (width) {\n      this._onColumnResized(column, width, index);\n    }\n\n    if (newColumnIndex !== undefined && columnReorderOptions) {\n      var isCheckboxColumnHidden = selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n      var showCheckbox = checkboxVisibility !== CheckboxVisibility.hidden;\n      var columnIndex = (showCheckbox ? 2 : 1) + index;\n      var draggedIndex = isCheckboxColumnHidden ? columnIndex - 1 : columnIndex - 2;\n      var targetIndex = isCheckboxColumnHidden ? newColumnIndex - 1 : newColumnIndex - 2;\n      var frozenColumnCountFromStart = (_a = columnReorderOptions.frozenColumnCountFromStart) !== null && _a !== void 0 ? _a : 0;\n      var frozenColumnCountFromEnd = (_b = columnReorderOptions.frozenColumnCountFromEnd) !== null && _b !== void 0 ? _b : 0;\n      var isValidTargetIndex = targetIndex >= frozenColumnCountFromStart && targetIndex < columns.length - frozenColumnCountFromEnd;\n\n      if (isValidTargetIndex) {\n        if (columnReorderOptions.onColumnDrop) {\n          var dragDropDetails = {\n            draggedIndex: draggedIndex,\n            targetIndex: targetIndex\n          };\n          columnReorderOptions.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderOptions.handleColumnReorder) {\n          columnReorderOptions.handleColumnReorder(draggedIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n  };\n\n  DetailsListBase.prototype.componentWillUnmount = function () {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n\n    this._async.dispose();\n  };\n\n  DetailsListBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      var item = this.props.items[this._initialFocusedIndex];\n\n      if (item) {\n        var itemKey = this._getItemKey(item, this._initialFocusedIndex);\n\n        var row = this._activeRows[itemKey];\n\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (this.props.items !== prevProps.items && this.props.items.length > 0 && this.state.focusedItemIndex !== -1 && !elementContains(this._root.current, document.activeElement, false)) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      var index = this.state.focusedItemIndex < this.props.items.length ? this.state.focusedItemIndex : this.props.items.length - 1;\n      var item = this.props.items[index];\n\n      var itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n\n      var row = this._activeRows[itemKey];\n\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  };\n\n  DetailsListBase.prototype.render = function () {\n    return React.createElement(DetailsListInner, __assign({}, this.props, this.state, {\n      selection: this._selection,\n      dragDropHelper: this._dragDropHelper,\n      rootRef: this._root,\n      listRef: this._list,\n      groupedListRef: this._groupedList,\n      focusZoneRef: this._focusZone,\n      headerRef: this._header,\n      selectionZoneRef: this._selectionZone,\n      onGroupExpandStateChanged: this._onGroupExpandStateChanged,\n      onColumnIsSizingChanged: this._onColumnIsSizingChanged,\n      onRowDidMount: this._onRowDidMount,\n      onRowWillUnmount: this._onRowWillUnmount,\n      onColumnResized: this._onColumnResized,\n      onColumnAutoResized: this._onColumnAutoResized,\n      onToggleCollapse: this._onToggleCollapse,\n      onActiveRowChanged: this._onActiveRowChanged,\n      onBlur: this._onBlur,\n      onRenderDefaultRow: this._onRenderRow\n    }));\n  };\n\n  DetailsListBase.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n\n    this._forceListUpdates();\n  };\n\n  DetailsListBase.prototype._getGroupNestingDepth = function () {\n    var groups = this.props.groups;\n    var level = 0;\n    var groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  };\n\n  DetailsListBase.prototype._setFocusToRowIfPending = function (row) {\n    var itemIndex = row.props.itemIndex;\n\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n\n      delete this._initialFocusedIndex;\n    }\n  };\n\n  DetailsListBase.prototype._setFocusToRow = function (row, forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n\n    this._async.setTimeout(function () {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  };\n\n  DetailsListBase.prototype._forceListUpdates = function () {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  };\n\n  DetailsListBase.prototype._notifyColumnsResized = function () {\n    this.state.adjustedColumns.forEach(function (column) {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  };\n\n  DetailsListBase.prototype._adjustColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n    var adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n\n    var viewport = this.props.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    return __assign(__assign({}, previousState), {\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth\n    });\n  };\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n\n\n  DetailsListBase.prototype._getAdjustedColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n    var _this = this;\n\n    var newItems = newProps.items,\n        layoutMode = newProps.layoutMode,\n        selectionMode = newProps.selectionMode,\n        viewport = newProps.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    var newColumns = newProps.columns;\n    var columns = this.props ? this.props.columns : [];\n    var lastWidth = previousState ? previousState.lastWidth : -1;\n    var lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (!forceUpdate && lastWidth === viewportWidth && lastSelectionMode === selectionMode && (!columns || newColumns === columns)) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n    var adjustedColumns;\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps); // Preserve adjusted column calculated widths.\n\n      adjustedColumns.forEach(function (column) {\n        _this._rememberCalculatedWidth(column, column.calculatedWidth);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n      adjustedColumns.forEach(function (column) {\n        _this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  };\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n\n\n  DetailsListBase.prototype._getFixedColumns = function (newColumns, viewportWidth, props) {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.selectionMode,\n        selectionMode = _b === void 0 ? this._selection.mode : _b,\n        checkboxVisibility = _a.checkboxVisibility,\n        flexMargin = _a.flexMargin,\n        skipViewportMeasures = _a.skipViewportMeasures;\n    var remainingWidth = viewportWidth - (flexMargin || 0);\n    var sumProportionalWidth = 0;\n    newColumns.forEach(function (col) {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n    var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    var groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n    var widthFraction = remainingWidth / sumProportionalWidth; // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n\n    if (!skipViewportMeasures) {\n      newColumns.forEach(function (column) {\n        var newColumn = __assign(__assign({}, column), _this._columnOverrides[column.key]);\n\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          var fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          var shrinkWidth = fullWidth - newColumn.maxWidth;\n\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= shrinkWidth / (fullWidth - newColumn.minWidth) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n    return newColumns.map(function (column) {\n      var newColumn = __assign(__assign({}, column), _this._columnOverrides[column.key]); // Delay computation until viewport width is available.\n\n\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n\n      return newColumn;\n    });\n  };\n  /** Builds a set of columns to fix within the viewport width. */\n\n\n  DetailsListBase.prototype._getJustifiedColumns = function (newColumns, viewportWidth, props) {\n    var _this = this;\n\n    var _a = props.selectionMode,\n        selectionMode = _a === void 0 ? this._selection.mode : _a,\n        checkboxVisibility = props.checkboxVisibility;\n    var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    var groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    var totalWidth = 0; // offset because we have one less inner padding.\n\n    var minimumWidth = 0;\n    var availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    var adjustedColumns = newColumns.map(function (column, i) {\n      var baseColumn = __assign(__assign({}, column), {\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH\n      });\n\n      var newColumn = __assign(__assign({}, baseColumn), _this._columnOverrides[column.key]); // eslint-disable-next-line deprecation/deprecation\n\n\n      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {\n        minimumWidth += getPaddedWidth(baseColumn, props);\n      }\n\n      totalWidth += getPaddedWidth(newColumn, props);\n      return newColumn;\n    });\n\n    if (minimumWidth > availableWidth) {\n      return adjustedColumns;\n    }\n\n    var lastIndex = adjustedColumns.length - 1; // Shrink or remove collapsable columns.\n\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      var column = adjustedColumns[lastIndex];\n      var minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      var overflowWidth = totalWidth - availableWidth; // eslint-disable-next-line deprecation/deprecation\n\n      if (column.calculatedWidth - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        var originalWidth = column.calculatedWidth;\n        column.calculatedWidth = Math.max(column.calculatedWidth - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n\n      lastIndex--;\n    } // Then expand columns starting at the beginning, until we've filled the width.\n\n\n    for (var i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      var column = adjustedColumns[i];\n      var isLast = i === adjustedColumns.length - 1;\n      var overrides = this._columnOverrides[column.key];\n\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      var spaceLeft = availableWidth - totalWidth;\n      var increment = void 0;\n\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        var maxWidth = column.maxWidth;\n        var minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = column.calculatedWidth + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  };\n\n  DetailsListBase.prototype._rememberCalculatedWidth = function (column, newCalculatedWidth) {\n    var overrides = this._getColumnOverride(column.key);\n\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  };\n\n  DetailsListBase.prototype._getColumnOverride = function (key) {\n    return this._columnOverrides[key] = this._columnOverrides[key] || {};\n  };\n\n  DetailsListBase.prototype._getItemKey = function (item, itemIndex) {\n    var getKey = this.props.getKey;\n    var itemKey = undefined;\n\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  };\n\n  DetailsListBase.defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true\n  };\n  DetailsListBase = __decorate([withViewport], DetailsListBase);\n  return DetailsListBase;\n}(React.Component);\n\nexport { DetailsListBase };\nexport function buildColumns(items, canResizeColumns, onColumnClick, sortedColumnKey, isSortedDescending, groupedColumnKey, isMultiline, columnActionsMode) {\n  var columns = [];\n\n  if (items && items.length) {\n    var firstItem = items[0];\n\n    for (var propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: columnActionsMode !== null && columnActionsMode !== void 0 ? columnActionsMode : ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column, props, paddingOnly) {\n  var _a = props.cellStyleProps,\n      cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n  return (paddingOnly ? 0 : column.calculatedWidth) + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n}\n\nfunction getGroupNestingDepth(groups) {\n  var level = 0;\n  var groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n\nfunction useGroupedDetailsListIndexMap(groups) {\n  return React.useMemo(function () {\n    var indexMap = {};\n\n    if (groups) {\n      var rowCount = 1;\n      var numGroupHeaders = 1;\n\n      for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {\n        var group = groups_1[_i];\n        var key = group.key;\n        indexMap[key] = {\n          numOfGroupHeadersBeforeItem: numGroupHeaders,\n          totalRowCount: rowCount\n        };\n        numGroupHeaders++;\n        rowCount += group.count + 1;\n      }\n    }\n\n    return indexMap;\n  }, [groups]);\n}","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","FocusRects","Async","KeyCodes","elementContains","getRTLSafeKeyCode","classNamesFunction","memoizeFunction","CheckboxVisibility","ColumnActionsMode","ConstrainMode","DetailsListLayoutMode","ColumnDragEndLocation","DetailsHeader","SelectAllVisibility","DetailsRow","FocusZone","FocusZoneDirection","Selection","SelectionMode","SelectionZone","DragDropHelper","GroupedList","List","withViewport","GetGroupCount","DEFAULT_CELL_STYLE_PROPS","CHECK_CELL_WIDTH","CHECKBOX_WIDTH","SPACER_WIDTH","GROUP_EXPAND_WIDTH","composeRenderFunction","getId","useConst","getClassNames","MIN_COLUMN_WIDTH","DEFAULT_RENDERED_WINDOWS_AHEAD","DEFAULT_RENDERED_WINDOWS_BEHIND","DetailsListInner","props","ariaLabelForSelectAllCheckbox","ariaLabelForSelectionColumn","className","checkboxVisibility","compact","constrainMode","dragDropEvents","groups","groupProps","indentWidth","items","isPlaceholderData","isHeaderVisible","layoutMode","onItemInvoked","onItemContextMenu","onColumnHeaderClick","onColumnHeaderContextMenu","_a","selectionMode","selection","mode","selectionPreservedOnEmptyClick","selectionZoneProps","ariaLabel","ariaLabelForGrid","rowElementEventMap","_b","shouldApplyApplicationRole","getKey","listProps","usePageCache","onShouldVirtualize","viewport","minimumPixelsForDrag","getGroupHeight","styles","theme","_c","cellStyleProps","onRenderCheckbox","useFastIcons","dragDropHelper","adjustedColumns","isCollapsed","isSizing","isSomeGroupExpanded","version","rootRef","listRef","focusZoneRef","columnReorderOptions","groupedListRef","headerRef","onGroupExpandStateChanged","onColumnIsSizingChanged","onRowDidMount","onRowWillUnmount","disableSelectionZone","onColumnResized","onColumnAutoResized","onToggleCollapse","onActiveRowChanged","onBlur","eventsToRegister","onRenderMissingItem","onRenderItemColumn","getCellValueKey","getRowAriaLabel","getRowAriaDescribedBy","checkButtonAriaLabel","checkButtonGroupAriaLabel","checkboxCellClassName","useReducedRowRenderer","enableUpdateAnimations","enterModalSelectionOnTouch","onRenderDefaultRow","selectionZoneRef","focusZoneProps","defaultRole","role","rowId","groupNestingDepth","getGroupNestingDepth","groupedDetailsListIndexMap","useGroupedDetailsListIndexMap","additionalListProps","useMemo","renderedWindowsAhead","renderedWindowsBehind","selectAllVisibility","none","single","hidden","multiple","isCollapsedGroupSelectVisible","headerProps","undefined","isSelectAllVisible","visible","defaultOnRenderDetailsHeader","useCallback","detailsHeaderProps","__assign","defaultOnRenderDetailsFooter","propsOnRenderDetailsHeader","onRenderDetailsHeader","propsOnRenderDetailsFooter","onRenderDetailsFooter","detailsFooterProps","columns","columnReorderOnDragEnd","onDragEnd","onColumnDragEnd","event","dropLocation","finalDropLocation","outside","header","current","clientRect","getBoundingClientRect","clientX","left","right","clientY","top","bottom","surface","columnReorderProps","rowCount","length","colCount","classNames","isFixed","fixedColumns","isHorizontalConstrained","horizontalConstrained","onRenderDetailsGroupFooter","onRenderFooter","finalOnRenderDetailsGroupFooter","groupFooterProps","defaultRender","onRenderDetailsGroupHeader","onRenderHeader","finalOnRenderDetailsGroupHeader","groupHeaderProps","groupKey","groupIndex","key","totalRowCount","ariaColSpan","ariaPosInSet","ariaSetSize","ariaRowCount","ariaRowIndex","finalGroupProps","selectAllButtonProps","sumColumnWidths","totalWidth","forEach","column","calculatedWidth","minWidth","collapseAllVisibility","rowWidth","onRenderCell","nestingDepth","item","index","group","finalOnRenderRow","onRenderRow","numOfGroupHeadersBeforeItem","rowRole","rowProps","itemIndex","flatIndexOffset","id","onDidMount","onWillUnmount","onRenderDetailsCheckbox","onRenderListCell","isRightArrow","which","focusZoneInnerProps","componentRef","focusZone","direction","vertical","shouldEnterInnerZone","onActiveElementChanged","shouldRaiseClicksOnEnter","list","ref","onHeaderKeyDown","ev","down","focus","getSelectedIndices","setIndexSelected","preventDefault","stopPropagation","onContentKeyDown","up","altKey","root","onKeyDown","headerWrapper","onColumnClick","onColumnContextMenu","isAllCollapsed","onToggleCollapseAll","ariaLabelForListHeader","contentWrapper","enterModalOnTouch","__extends","_super","_this","createRef","nextProps","previousState","setKey","_selection","isAllGroupsCollapsed","newViewportWidth","width","oldViewportWidth","shouldResetSelection","shouldForceUpdates","nextState","_initialFocusedIndex","initialFocusedIndex","focusedItemIndex","setItems","_adjustColumns","_dragDropHelper","dispose","setState","row","itemKey","_getItemKey","_activeRows","_setFocusToRowIfPending","collapsed","_groupedList","toggleCollapseAll","resizingColumn","newWidth","resizingColumnIndex","newCalculatedWidth","Math","max","onColumnResize","_rememberCalculatedWidth","state","columnIndex","count","totalCount","Object","keys","hasOwnProperty","currentRow","measureCell","_onColumnResized","el","onActiveItemChanged","getAttribute","Number","_async","_columnOverrides","lastWidth","_getAdjustedColumns","getDerivedStateFromProps","_getDerivedStateFromProps","onSelectionChanged","DetailsListBase","measureItem","scrollToMode","_list","scrollToIndex","forceIntoFirstElement","_setFocusToRow","getStartItemIndexInView","options","NO_COLUMNS","_d","newColumnIndex","findIndex","isCheckboxColumnHidden","showCheckbox","draggedIndex","targetIndex","frozenColumnCountFromStart","frozenColumnCountFromEnd","isValidTargetIndex","onColumnDrop","dragDropDetails","handleColumnReorder","prevProps","prevState","_notifyColumnsResized","_root","document","activeElement","onDidUpdate","_focusZone","_header","_selectionZone","_onGroupExpandStateChanged","_onColumnIsSizingChanged","_onRowDidMount","_onRowWillUnmount","_onColumnAutoResized","_onToggleCollapse","_onActiveRowChanged","_onBlur","_onRenderRow","forceUpdate","call","_forceListUpdates","level","groupsInLevel","children","ignoreNextFocus","setTimeout","currentWidth","newProps","viewportWidth","newItems","newColumns","lastSelectionMode","buildColumns","_getFixedColumns","_getJustifiedColumns","_getColumnOverride","flexMargin","skipViewportMeasures","remainingWidth","sumProportionalWidth","col","flexGrow","maxWidth","getPaddedWidth","rowCheckWidth","groupExpandWidth","_getGroupNestingDepth","widthFraction","newColumn","fullWidth","shrinkWidth","map","min","MAX_VALUE","minimumWidth","availableWidth","i","baseColumn","isCollapsible","isCollapsable","lastIndex","overflowWidth","originalWidth","splice","isLast","overrides","spaceLeft","increment","justified","onHover","Component","canResizeColumns","sortedColumnKey","isSortedDescending","groupedColumnKey","isMultiline","columnActionsMode","firstItem","propName","push","name","fieldName","isSorted","isRowHeader","clickable","isResizable","isGrouped","paddingOnly","cellLeftPadding","cellRightPadding","isPadded","cellExtraRightPadding","indexMap","numGroupHeaders","_i"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsList.base.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  classNamesFunction,\n  memoizeFunction,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  ColumnDragEndLocation,\n  IColumnDragDropDetails,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\n\nimport { DragDropHelper } from '../../DragDrop';\nimport { GroupedList } from '../../GroupedList';\nimport { List, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction, getId } from '@fluentui/utilities';\nimport { useConst } from '@fluentui/react-hooks';\nimport type { IRenderFunction } from '../../Utilities';\nimport type {\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n} from '../DetailsList/DetailsList.types';\nimport type {\n  IDetailsHeader,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport type { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport type { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport type { IFocusZone, IFocusZoneProps } from '../../FocusZone';\nimport type { IObjectWithKey, ISelection } from '../../Selection';\nimport type { IGroupedList, IGroupDividerProps, IGroupRenderProps, IGroup } from '../../GroupedList';\nimport type { IListProps } from '../../List';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n  getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\ntype IDetailsListInnerProps = Omit<IDetailsListProps, 'selection'> &\n  IDetailsListState & {\n    selection: ISelection;\n    dragDropHelper: DragDropHelper | undefined;\n    rootRef: React.RefObject<HTMLDivElement>;\n    listRef: React.RefObject<List>;\n    groupedListRef: React.RefObject<IGroupedList>;\n    focusZoneRef: React.RefObject<IFocusZone>;\n    headerRef: React.RefObject<IDetailsHeader>;\n    selectionZoneRef: React.RefObject<SelectionZone>;\n    onGroupExpandStateChanged: (isSomeGroupExpanded: boolean) => void;\n    onColumnIsSizingChanged: (column: IColumn, isSizing: boolean) => void;\n    onRowDidMount: (row: DetailsRowBase) => void;\n    onRowWillUnmount: (row: DetailsRowBase) => void;\n    onColumnResized: (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number) => void;\n    onColumnAutoResized: (column: IColumn, columnIndex: number) => void;\n    onToggleCollapse: (collapsed: boolean) => void;\n    onActiveRowChanged: (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\n    onBlur: (event: React.FocusEvent<HTMLElement>) => void;\n    onRenderDefaultRow: (detailsRowProps: IDetailsRowProps) => JSX.Element;\n  };\n\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nconst DetailsListInner: React.ComponentType<IDetailsListInnerProps> = (\n  props: IDetailsListInnerProps,\n): JSX.Element | null => {\n  const { selection } = props;\n\n  const {\n    ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn,\n    className,\n    checkboxVisibility,\n    compact,\n    constrainMode,\n    dragDropEvents,\n    groups,\n    groupProps,\n    indentWidth,\n    items,\n    isPlaceholderData,\n    isHeaderVisible,\n    layoutMode,\n    onItemInvoked,\n    onItemContextMenu,\n    onColumnHeaderClick,\n    onColumnHeaderContextMenu,\n    selectionMode = selection.mode,\n    selectionPreservedOnEmptyClick,\n    selectionZoneProps,\n    ariaLabel,\n    ariaLabelForGrid,\n    rowElementEventMap,\n    shouldApplyApplicationRole = false,\n    getKey,\n    listProps,\n    usePageCache,\n    onShouldVirtualize,\n    viewport,\n    minimumPixelsForDrag,\n    getGroupHeight,\n    styles,\n    theme,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    onRenderCheckbox,\n    useFastIcons,\n    dragDropHelper,\n    adjustedColumns,\n    isCollapsed,\n    isSizing,\n    isSomeGroupExpanded,\n    version,\n    rootRef,\n    listRef,\n    focusZoneRef,\n    columnReorderOptions,\n    groupedListRef,\n    headerRef,\n    onGroupExpandStateChanged,\n    onColumnIsSizingChanged,\n    onRowDidMount,\n    onRowWillUnmount,\n    disableSelectionZone,\n    onColumnResized,\n    onColumnAutoResized,\n    onToggleCollapse,\n    onActiveRowChanged,\n    onBlur,\n    rowElementEventMap: eventsToRegister,\n    onRenderMissingItem,\n    onRenderItemColumn,\n    getCellValueKey,\n    getRowAriaLabel,\n    getRowAriaDescribedBy,\n    checkButtonAriaLabel,\n    checkButtonGroupAriaLabel,\n    checkboxCellClassName,\n    useReducedRowRenderer,\n    enableUpdateAnimations,\n    enterModalSelectionOnTouch,\n    onRenderDefaultRow,\n    selectionZoneRef,\n    focusZoneProps,\n  } = props;\n\n  const defaultRole = 'grid';\n  const role = props.role ? props.role : defaultRole;\n\n  const rowId = getId('row');\n\n  const groupNestingDepth = getGroupNestingDepth(groups);\n  const groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);\n\n  const additionalListProps = React.useMemo((): IListProps => {\n    return {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version,\n      ...listProps,\n    };\n  }, [isSizing, getKey, version, listProps]);\n\n  let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    let isCollapsedGroupSelectVisible =\n      groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  const defaultOnRenderDetailsHeader = React.useCallback(\n    (detailsHeaderProps: IDetailsHeaderProps): JSX.Element | null => {\n      return <DetailsHeader {...detailsHeaderProps} />;\n    },\n    [],\n  );\n\n  const defaultOnRenderDetailsFooter = React.useCallback((): JSX.Element | null => {\n    return null;\n  }, []);\n\n  const propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n\n  const onRenderDetailsHeader = React.useMemo(() => {\n    return propsOnRenderDetailsHeader\n      ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n      : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n\n  const propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n\n  const onRenderDetailsFooter = React.useMemo(() => {\n    return propsOnRenderDetailsFooter\n      ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n      : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n\n  const detailsFooterProps = React.useMemo((): IDetailsFooterProps => {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth,\n      selection,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }, [\n    adjustedColumns,\n    groupNestingDepth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    indentWidth,\n    cellStyleProps,\n  ]);\n\n  const columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n\n  const onColumnDragEnd = React.useCallback(\n    (\n      {\n        dropLocation,\n      }: {\n        dropLocation?: ColumnDragEndLocation;\n      },\n      event: MouseEvent,\n    ): void => {\n      let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n      if (columnReorderOnDragEnd) {\n        if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = dropLocation;\n        } else if (rootRef.current) {\n          const clientRect = rootRef.current.getBoundingClientRect();\n          if (\n            event.clientX > clientRect.left &&\n            event.clientX < clientRect.right &&\n            event.clientY > clientRect.top &&\n            event.clientY < clientRect.bottom\n          ) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n        columnReorderOnDragEnd(finalDropLocation);\n      }\n    },\n    [columnReorderOnDragEnd, rootRef],\n  );\n\n  const columnReorderProps = React.useMemo((): IColumnReorderHeaderProps | undefined => {\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd,\n      };\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n\n  const rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  const colCount =\n    (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n    (adjustedColumns ? adjustedColumns.length : 0) +\n    (groups ? 1 : 0);\n\n  const classNames = React.useMemo(() => {\n    return getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n\n  const onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n\n  const finalOnRenderDetailsGroupFooter = React.useMemo(() => {\n    return onRenderDetailsGroupFooter\n      ? (groupFooterProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...groupFooterProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n  }, [\n    onRenderDetailsGroupFooter,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n\n  const finalOnRenderDetailsGroupHeader = React.useMemo(() => {\n    return onRenderDetailsGroupHeader\n      ? (groupHeaderProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return onRenderDetailsGroupHeader(\n            {\n              ...groupHeaderProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n              ariaColSpan: adjustedColumns.length,\n              ariaPosInSet: undefined,\n              ariaSetSize: undefined,\n              ariaRowCount: undefined,\n              ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n            },\n            defaultRender,\n          );\n        }\n      : (groupHeaderProps: IGroupDividerProps, defaultRender: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return defaultRender({\n            ...groupHeaderProps,\n            ariaColSpan: adjustedColumns.length,\n            ariaPosInSet: undefined,\n            ariaSetSize: undefined,\n            ariaRowCount: undefined,\n            ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n          });\n        };\n  }, [\n    onRenderDetailsGroupHeader,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    isHeaderVisible,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n    groupedDetailsListIndexMap,\n  ]);\n\n  const finalGroupProps = React.useMemo((): IGroupRenderProps | undefined => {\n    return {\n      ...groupProps,\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: {\n        ...groupProps?.headerProps,\n        selectAllButtonProps: {\n          'aria-label': checkButtonGroupAriaLabel,\n          ...groupProps?.headerProps?.selectAllButtonProps,\n        },\n      },\n    };\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n\n  const sumColumnWidths = useConst(() =>\n    memoizeFunction((columns: IColumn[]) => {\n      let totalWidth: number = 0;\n\n      columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n      return totalWidth;\n    }),\n  );\n\n  const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n\n  const rowWidth = React.useMemo(() => {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth: number, item: any, index: number, group?: IGroup): React.ReactNode => {\n      const finalOnRenderRow = props.onRenderRow\n        ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)\n        : onRenderDefaultRow;\n\n      const groupKey: string | undefined = group ? group.key : undefined;\n      const numOfGroupHeadersBeforeItem: number =\n        groupKey && groupedDetailsListIndexMap[groupKey]\n          ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem\n          : 0;\n\n      const rowRole = role === defaultRole ? undefined : 'presentation';\n\n      const rowProps: IDetailsRowProps = {\n        item: item,\n        itemIndex: index,\n        flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,\n        compact,\n        columns: adjustedColumns,\n        groupNestingDepth: nestingDepth,\n        id: `${rowId}-${index}`,\n        selectionMode,\n        selection,\n        onDidMount: onRowDidMount,\n        onWillUnmount: onRowWillUnmount,\n        onRenderItemColumn,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations,\n        rowWidth,\n        useFastIcons,\n        role: rowRole,\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return finalOnRenderRow(rowProps);\n    },\n    [\n      compact,\n      adjustedColumns,\n      selectionMode,\n      selection,\n      rowId,\n      onRowDidMount,\n      onRowWillUnmount,\n      onRenderItemColumn,\n      getCellValueKey,\n      eventsToRegister,\n      dragDropEvents,\n      dragDropHelper,\n      viewport,\n      checkboxVisibility,\n      collapseAllVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      isHeaderVisible,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n      onRenderDefaultRow,\n      onRenderMissingItem,\n      props.onRenderRow,\n      rowWidth,\n      role,\n      groupedDetailsListIndexMap,\n    ],\n  );\n\n  const onRenderListCell = React.useCallback(\n    (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n      return (item: any, itemIndex: number): React.ReactNode => {\n        return onRenderCell(nestingDepth, item, itemIndex);\n      };\n    },\n    [onRenderCell],\n  );\n\n  const isRightArrow = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      // eslint-disable-next-line deprecation/deprecation\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n    },\n    [theme],\n  );\n\n  const focusZoneInnerProps: IFocusZoneProps = {\n    ...focusZoneProps,\n    componentRef: focusZoneProps && focusZoneProps.componentRef ? focusZoneProps.componentRef : focusZoneRef,\n    className: classNames.focusZone,\n    direction: focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.vertical,\n    shouldEnterInnerZone:\n      focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow,\n    onActiveElementChanged:\n      focusZoneProps && focusZoneProps.onActiveElementChanged\n        ? focusZoneProps.onActiveElementChanged\n        : onActiveRowChanged,\n    shouldRaiseClicksOnEnter: false,\n    onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur,\n  };\n\n  const list = groups ? (\n    <GroupedList\n      focusZoneProps={focusZoneInnerProps}\n      componentRef={groupedListRef}\n      groups={groups}\n      groupProps={finalGroupProps}\n      items={items}\n      onRenderCell={onRenderCell}\n      role=\"presentation\"\n      selection={selection}\n      selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n      dragDropEvents={dragDropEvents}\n      dragDropHelper={dragDropHelper}\n      eventsToRegister={rowElementEventMap}\n      listProps={additionalListProps}\n      onGroupExpandStateChanged={onGroupExpandStateChanged}\n      usePageCache={usePageCache}\n      onShouldVirtualize={onShouldVirtualize}\n      getGroupHeight={getGroupHeight}\n      compact={compact}\n    />\n  ) : (\n    <FocusZone {...focusZoneInnerProps}>\n      <List\n        ref={listRef}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    </FocusZone>\n  );\n\n  const onHeaderKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.down) {\n        if (focusZoneRef.current && focusZoneRef.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (selection.getSelectedIndices().length === 0) {\n            selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [selection, focusZoneRef],\n  );\n\n  const onContentKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (headerRef.current && headerRef.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [headerRef],\n  );\n\n  return (\n    // If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n    // with JAWS.\n    <div\n      ref={rootRef}\n      className={classNames.root}\n      data-automationid=\"DetailsList\"\n      data-is-scrollable=\"false\"\n      aria-label={ariaLabel}\n      {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n    >\n      <FocusRects />\n      <div\n        role={role}\n        aria-label={ariaLabelForGrid}\n        aria-rowcount={isPlaceholderData ? -1 : rowCount}\n        aria-colcount={colCount}\n        aria-readonly=\"true\"\n        aria-busy={isPlaceholderData}\n      >\n        <div onKeyDown={onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n          {isHeaderVisible &&\n            onRenderDetailsHeader(\n              {\n                componentRef: headerRef,\n                selectionMode: selectionMode,\n                layoutMode: layoutMode!,\n                selection: selection,\n                columns: adjustedColumns,\n                onColumnClick: onColumnHeaderClick,\n                onColumnContextMenu: onColumnHeaderContextMenu,\n                onColumnResized: onColumnResized,\n                onColumnIsSizingChanged: onColumnIsSizingChanged,\n                onColumnAutoResized: onColumnAutoResized,\n                groupNestingDepth: groupNestingDepth,\n                isAllCollapsed: isCollapsed,\n                onToggleCollapseAll: onToggleCollapse,\n                ariaLabel: ariaLabelForListHeader,\n                ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                selectAllVisibility: selectAllVisibility,\n                collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                viewport: viewport,\n                columnReorderProps: columnReorderProps,\n                minimumPixelsForDrag: minimumPixelsForDrag,\n                cellStyleProps: cellStyleProps,\n                checkboxVisibility,\n                indentWidth,\n                onRenderDetailsCheckbox: onRenderCheckbox,\n                rowWidth: sumColumnWidths(adjustedColumns),\n                useFastIcons,\n              },\n              onRenderDetailsHeader,\n            )}\n        </div>\n        <div onKeyDown={onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n          {!disableSelectionZone ? (\n            <SelectionZone\n              ref={selectionZoneRef}\n              selection={selection}\n              selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n              selectionMode={selectionMode}\n              onItemInvoked={onItemInvoked}\n              onItemContextMenu={onItemContextMenu}\n              enterModalOnTouch={enterModalSelectionOnTouch}\n              {...(selectionZoneProps || {})}\n            >\n              {list}\n            </SelectionZone>\n          ) : (\n            list\n          )}\n        </div>\n        {onRenderDetailsFooter({\n          ...detailsFooterProps,\n        })}\n      </div>\n    </div>\n  );\n};\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public updateColumn(column: IColumn, options: { width?: number; newColumnIndex?: number }) {\n    const NO_COLUMNS: IColumn[] = [];\n\n    const { columns = NO_COLUMNS, selectionMode, checkboxVisibility, columnReorderOptions } = this.props;\n    const { width, newColumnIndex } = options;\n    const index = columns.findIndex(col => col.key === column.key);\n\n    if (width) {\n      this._onColumnResized(column, width, index!);\n    }\n\n    if (newColumnIndex !== undefined && columnReorderOptions) {\n      const isCheckboxColumnHidden =\n        selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n\n      const showCheckbox = checkboxVisibility !== CheckboxVisibility.hidden;\n      const columnIndex = (showCheckbox ? 2 : 1) + index!;\n\n      const draggedIndex = isCheckboxColumnHidden ? columnIndex - 1 : columnIndex - 2;\n      const targetIndex = isCheckboxColumnHidden ? newColumnIndex - 1 : newColumnIndex - 2;\n\n      const frozenColumnCountFromStart = columnReorderOptions.frozenColumnCountFromStart ?? 0;\n      const frozenColumnCountFromEnd = columnReorderOptions.frozenColumnCountFromEnd ?? 0;\n      const isValidTargetIndex =\n        targetIndex >= frozenColumnCountFromStart && targetIndex < columns.length - frozenColumnCountFromEnd;\n\n      if (isValidTargetIndex) {\n        if (columnReorderOptions.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex: draggedIndex,\n            targetIndex: targetIndex,\n          };\n          columnReorderOptions.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderOptions.handleColumnReorder) {\n          columnReorderOptions.handleColumnReorder(draggedIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <DetailsListInner\n        {...this.props}\n        {...this.state}\n        selection={this._selection}\n        dragDropHelper={this._dragDropHelper}\n        rootRef={this._root}\n        listRef={this._list}\n        groupedListRef={this._groupedList}\n        focusZoneRef={this._focusZone}\n        headerRef={this._header}\n        selectionZoneRef={this._selectionZone}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        onColumnIsSizingChanged={this._onColumnIsSizingChanged}\n        onRowDidMount={this._onRowDidMount}\n        onRowWillUnmount={this._onRowWillUnmount}\n        onColumnResized={this._onColumnResized}\n        onColumnAutoResized={this._onColumnAutoResized}\n        onToggleCollapse={this._onToggleCollapse}\n        onActiveRowChanged={this._onActiveRowChanged}\n        onBlur={this._onBlur}\n        onRenderDefaultRow={this._onRenderRow}\n      />\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _getDerivedStateFromProps = (\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState => {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (nextProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    let nextState = previousState;\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = nextProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      nextState = {\n        ...nextState,\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      };\n    }\n\n    if (!this.props.disableSelectionZone && nextProps.items !== items) {\n      this._selection.setItems(nextProps.items, shouldResetSelection);\n    }\n\n    if (\n      nextProps.checkboxVisibility !== checkboxVisibility ||\n      nextProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      nextProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    nextState = {\n      ...nextState,\n      ...this._adjustColumns(nextProps, nextState, true),\n    };\n\n    if (nextProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      nextProps.groupProps &&\n      nextProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      nextState = {\n        ...nextState,\n        isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed,\n      };\n    }\n\n    if (nextProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = nextProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing: isSizing });\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IDetailsListState {\n    const adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    return {\n      ...previousState,\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth,\n    };\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState | undefined,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = previousState ? previousState.lastWidth : -1;\n    const lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility, flexMargin, skipViewportMeasures } = this.props;\n    let remainingWidth = viewportWidth - (flexMargin || 0);\n    let sumProportionalWidth = 0;\n\n    newColumns.forEach((col: IColumn) => {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n\n    let widthFraction = remainingWidth / sumProportionalWidth;\n\n    // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n    if (!skipViewportMeasures) {\n      newColumns.forEach((column: IColumn) => {\n        const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          const fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          const shrinkWidth = fullWidth - newColumn.maxWidth;\n\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= (shrinkWidth / (fullWidth - newColumn.minWidth)) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      // Delay computation until viewport width is available.\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n\n      return newColumn;\n    });\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    let minimumWidth = 0;\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const baseColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n      };\n\n      const newColumn = {\n        ...baseColumn,\n        ...this._columnOverrides[column.key],\n      };\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {\n        minimumWidth += getPaddedWidth(baseColumn, props);\n      }\n\n      totalWidth += getPaddedWidth(newColumn, props);\n\n      return newColumn;\n    });\n\n    if (minimumWidth > availableWidth) {\n      return adjustedColumns;\n    }\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this.setState({\n      ...this._adjustColumns(this.props, this.state, true, resizingColumnIndex),\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n  columnActionsMode?: ColumnActionsMode,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: columnActionsMode ?? ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, props: IDetailsListProps, paddingOnly?: true): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    (paddingOnly ? 0 : column.calculatedWidth!) +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n\nfunction getGroupNestingDepth(groups: IDetailsListProps['groups']): number {\n  let level = 0;\n  let groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n\ninterface IGroupedDetailsListIndexMap {\n  [key: string]: { numOfGroupHeadersBeforeItem: number; totalRowCount: number };\n}\n\nfunction useGroupedDetailsListIndexMap(groups: IDetailsListProps['groups']) {\n  return React.useMemo((): IGroupedDetailsListIndexMap => {\n    const indexMap: IGroupedDetailsListIndexMap = {};\n    if (groups) {\n      let rowCount = 1;\n      let numGroupHeaders = 1;\n      for (const group of groups) {\n        const { key } = group;\n        indexMap[key] = { numOfGroupHeadersBeforeItem: numGroupHeaders, totalRowCount: rowCount };\n        numGroupHeaders++;\n        rowCount += group.count + 1;\n      }\n    }\n    return indexMap;\n  }, [groups]);\n}\n"]},"metadata":{},"sourceType":"module"}