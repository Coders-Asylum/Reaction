{"ast":null,"code":"import * as React from 'react';\nimport { css, findIndex } from '@fluentui/utilities';\nimport { DAYS_IN_WEEK } from '@fluentui/date-time-utilities';\nexport var CalendarMonthHeaderRow = function CalendarMonthHeaderRow(props) {\n  var showWeekNumbers = props.showWeekNumbers,\n      strings = props.strings,\n      firstDayOfWeek = props.firstDayOfWeek,\n      allFocusable = props.allFocusable,\n      weeksToShow = props.weeksToShow,\n      weeks = props.weeks,\n      classNames = props.classNames;\n  var dayLabels = strings.shortDays.slice();\n  var firstOfMonthIndex = findIndex(weeks[1], function (day) {\n    return day.originalDate.getDate() === 1;\n  });\n\n  if (weeksToShow === 1 && firstOfMonthIndex >= 0) {\n    // if we only show one week, replace the header with short month name\n    var firstOfMonthIndexOffset = (firstOfMonthIndex + firstDayOfWeek) % DAYS_IN_WEEK;\n    dayLabels[firstOfMonthIndexOffset] = strings.shortMonths[weeks[1][firstOfMonthIndex].originalDate.getMonth()];\n  }\n\n  return React.createElement(\"tr\", null, showWeekNumbers && React.createElement(\"th\", {\n    className: classNames.dayCell\n  }), dayLabels.map(function (val, index) {\n    var i = (index + firstDayOfWeek) % DAYS_IN_WEEK;\n    var label = index === firstOfMonthIndex ? strings.days[i] + ' ' + dayLabels[i] : strings.days[i];\n    return React.createElement(\"th\", {\n      className: css(classNames.dayCell, classNames.weekDayLabelCell),\n      scope: \"col\",\n      key: dayLabels[i] + ' ' + index,\n      title: label,\n      \"aria-label\": label,\n      \"data-is-focusable\": allFocusable ? true : undefined\n    }, dayLabels[i]);\n  }));\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,qBAA/B;AACA,SAASC,YAAT,QAA6B,+BAA7B;AAUA,OAAO,IAAMC,sBAAsB,GAA6D,SAAnFA,sBAAmF,QAAK;AAC3F,qBAAe,GAA4EC,KAAK,gBAAhG;AAAA,MAAiBC,OAAO,GAAmED,KAAK,QAAhG;AAAA,MAA0BE,cAAc,GAAmDF,KAAK,eAAhG;AAAA,MAA0CG,YAAY,GAAqCH,KAAK,aAAhG;AAAA,MAAwDI,WAAW,GAAwBJ,KAAK,YAAhG;AAAA,MAAqEK,KAAK,GAAiBL,KAAK,MAAhG;AAAA,MAA4EM,UAAU,GAAKN,KAAK,WAAhG;AACR,MAAMO,SAAS,GAAGN,OAAO,CAACO,SAAR,CAAkBC,KAAlB,EAAlB;AACA,MAAMC,iBAAiB,GAAGb,SAAS,CAACQ,KAAM,CAAC,CAAD,CAAP,EAAY,UAACM,GAAD,EAAc;AAAK,cAAG,CAACC,YAAJ,CAAiBC,OAAjB,OAA+B,CAA/B;AAAgC,GAA/D,CAAnC;;AACA,MAAIT,WAAW,KAAK,CAAhB,IAAqBM,iBAAiB,IAAI,CAA9C,EAAiD;AAC/C;AACA,QAAMI,uBAAuB,GAAG,CAACJ,iBAAiB,GAAGR,cAArB,IAAuCJ,YAAvE;AACAS,aAAS,CAACO,uBAAD,CAAT,GAAqCb,OAAO,CAACc,WAAR,CAAoBV,KAAM,CAAC,CAAD,CAAN,CAAUK,iBAAV,EAA6BE,YAA7B,CAA0CI,QAA1C,EAApB,CAArC;AACD;;AAED,SACErB,gCACGsB,eAAe,IAAItB;AAAIuB,aAAS,EAAEZ,UAAU,CAACa;AAA1B,IADtB,EAEGZ,SAAS,CAACa,GAAV,CAAc,UAACC,GAAD,EAAcC,KAAd,EAA2B;AACxC,QAAMC,CAAC,GAAG,CAACD,KAAK,GAAGpB,cAAT,IAA2BJ,YAArC;AACA,QAAM0B,KAAK,GAAGF,KAAK,KAAKZ,iBAAV,GAA8BT,OAAO,CAACwB,IAAR,CAAaF,CAAb,IAAkB,GAAlB,GAAwBhB,SAAS,CAACgB,CAAD,CAA/D,GAAqEtB,OAAO,CAACwB,IAAR,CAAaF,CAAb,CAAnF;AACA,WACE5B;AACEuB,eAAS,EAAEtB,GAAG,CAACU,UAAU,CAACa,OAAZ,EAAqBb,UAAU,CAACoB,gBAAhC,CADhB;AAEEC,WAAK,EAAC,KAFR;AAGEC,SAAG,EAAErB,SAAS,CAACgB,CAAD,CAAT,GAAe,GAAf,GAAqBD,KAH5B;AAIEO,WAAK,EAAEL,KAJT;AAIc,oBACAA,KALd;AAKmB,2BACErB,YAAY,GAAG,IAAH,GAAU2B;AAN3C,OAQGvB,SAAS,CAACgB,CAAD,CARZ,CADF;AAYD,GAfA,CAFH,CADF;AAqBD,CA/BM","names":["React","css","findIndex","DAYS_IN_WEEK","CalendarMonthHeaderRow","props","strings","firstDayOfWeek","allFocusable","weeksToShow","weeks","classNames","dayLabels","shortDays","slice","firstOfMonthIndex","day","originalDate","getDate","firstOfMonthIndexOffset","shortMonths","getMonth","showWeekNumbers","className","dayCell","map","val","index","i","label","days","weekDayLabelCell","scope","key","title","undefined"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/CalendarDayGrid/CalendarMonthHeaderRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css, findIndex } from '@fluentui/utilities';\nimport { DAYS_IN_WEEK } from '@fluentui/date-time-utilities';\nimport type { ICalendarDayGridProps, ICalendarDayGridStyles } from './CalendarDayGrid.types';\nimport type { IProcessedStyleSet } from '@fluentui/style-utilities';\nimport type { IDayInfo } from './CalendarDayGrid.base';\n\nexport interface ICalendarDayMonthHeaderRowProps extends ICalendarDayGridProps {\n  weeks: IDayInfo[][];\n  classNames: IProcessedStyleSet<ICalendarDayGridStyles>;\n}\n\nexport const CalendarMonthHeaderRow: React.FunctionComponent<ICalendarDayMonthHeaderRowProps> = props => {\n  const { showWeekNumbers, strings, firstDayOfWeek, allFocusable, weeksToShow, weeks, classNames } = props;\n  const dayLabels = strings.shortDays.slice();\n  const firstOfMonthIndex = findIndex(weeks![1], (day: IDayInfo) => day.originalDate.getDate() === 1);\n  if (weeksToShow === 1 && firstOfMonthIndex >= 0) {\n    // if we only show one week, replace the header with short month name\n    const firstOfMonthIndexOffset = (firstOfMonthIndex + firstDayOfWeek) % DAYS_IN_WEEK;\n    dayLabels[firstOfMonthIndexOffset] = strings.shortMonths[weeks![1][firstOfMonthIndex].originalDate.getMonth()];\n  }\n\n  return (\n    <tr>\n      {showWeekNumbers && <th className={classNames.dayCell} />}\n      {dayLabels.map((val: string, index: number) => {\n        const i = (index + firstDayOfWeek) % DAYS_IN_WEEK;\n        const label = index === firstOfMonthIndex ? strings.days[i] + ' ' + dayLabels[i] : strings.days[i];\n        return (\n          <th\n            className={css(classNames.dayCell, classNames.weekDayLabelCell)}\n            scope=\"col\"\n            key={dayLabels[i] + ' ' + index}\n            title={label}\n            aria-label={label}\n            data-is-focusable={allFocusable ? true : undefined}\n          >\n            {dayLabels[i]}\n          </th>\n        );\n      })}\n    </tr>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}