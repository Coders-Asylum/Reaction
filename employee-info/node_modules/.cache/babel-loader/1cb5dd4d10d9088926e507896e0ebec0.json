{"ast":null,"code":"import { getGlobalClassNames, getInputFocusStyle, getPlaceholderStyles, hiddenContentStyle, HighContrastSelector } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-BasePicker',\n  text: 'ms-BasePicker-text',\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\n  input: 'ms-BasePicker-input'\n};\nexport function getStyles(props) {\n  var _a, _b, _c;\n\n  var className = props.className,\n      theme = props.theme,\n      isFocused = props.isFocused,\n      inputClassName = props.inputClassName,\n      disabled = props.disabled;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\n  }\n\n  var semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      fonts = theme.fonts;\n  var inputBorder = semanticColors.inputBorder,\n      inputBorderHovered = semanticColors.inputBorderHovered,\n      inputFocusBorderAlt = semanticColors.inputFocusBorderAlt;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme); // placeholder style constants\n\n  var placeholderStyles = [fonts.medium, {\n    color: semanticColors.inputPlaceholderText,\n    opacity: 1,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  }];\n  var disabledPlaceholderStyles = {\n    color: semanticColors.disabledText,\n    selectors: (_b = {}, _b[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _b)\n  }; // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\n  // @todo: investigate the performance cost of the calculation below and apply if negligible.\n  //   Replacing with a static color for now.\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\n\n  var disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\n  return {\n    root: [classNames.root, className],\n    text: [classNames.text, {\n      display: 'flex',\n      position: 'relative',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      boxSizing: 'border-box',\n      minWidth: 180,\n      minHeight: 30,\n      border: \"1px solid \" + inputBorder,\n      borderRadius: effects.roundedCorner2\n    }, !isFocused && !disabled && {\n      selectors: {\n        ':hover': {\n          borderColor: inputBorderHovered\n        }\n      }\n    }, isFocused && !disabled && getInputFocusStyle(inputFocusBorderAlt, effects.roundedCorner2), disabled && {\n      borderColor: disabledOverlayColor,\n      selectors: (_c = {\n        ':after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0,\n          background: disabledOverlayColor\n        }\n      }, _c[HighContrastSelector] = {\n        borderColor: 'GrayText',\n        selectors: {\n          ':after': {\n            background: 'none'\n          }\n        }\n      }, _c)\n    }],\n    itemsWrapper: [classNames.itemsWrapper, {\n      display: 'flex',\n      flexWrap: 'wrap',\n      maxWidth: '100%'\n    }],\n    input: [classNames.input, fonts.medium, {\n      height: 30,\n      border: 'none',\n      flexGrow: 1,\n      outline: 'none',\n      padding: '0 6px 0',\n      alignSelf: 'flex-end',\n      borderRadius: effects.roundedCorner2,\n      backgroundColor: 'transparent',\n      color: semanticColors.inputText,\n      selectors: {\n        '::-ms-clear': {\n          display: 'none'\n        }\n      }\n    }, getPlaceholderStyles(placeholderStyles), disabled && getPlaceholderStyles(disabledPlaceholderStyles), inputClassName],\n    screenReaderText: hiddenContentStyle\n  };\n}","map":{"version":3,"mappings":"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","names":["getGlobalClassNames","getInputFocusStyle","getPlaceholderStyles","hiddenContentStyle","HighContrastSelector","GlobalClassNames","root","text","itemsWrapper","input","getStyles","props","theme","isFocused","inputClassName","disabled","Error","effects","fonts","semanticColors","inputBorderHovered","inputFocusBorderAlt","classNames","placeholderStyles","medium","color","inputPlaceholderText","opacity","selectors","_a","disabledPlaceholderStyles","disabledText","_b","disabledOverlayColor","className","display","position","flexWrap","alignItems","boxSizing","minWidth","minHeight","border","inputBorder","borderRadius","roundedCorner2","borderColor","content","top","right","bottom","left","background","_c","maxWidth","height","flexGrow","outline","padding","alignSelf","backgroundColor","inputText","screenReaderText"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/pickers/BasePicker.styles.ts"],"sourcesContent":["import {\n  getGlobalClassNames,\n  getInputFocusStyle,\n  getPlaceholderStyles,\n  hiddenContentStyle,\n  HighContrastSelector,\n} from '../../Styling';\nimport type { IBasePickerStyleProps, IBasePickerStyles } from './BasePicker.types';\nimport type { IStyle } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-BasePicker',\n  text: 'ms-BasePicker-text',\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\n  input: 'ms-BasePicker-input',\n};\n\nexport function getStyles(props: IBasePickerStyleProps): IBasePickerStyles {\n  const { className, theme, isFocused, inputClassName, disabled } = props;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\n  }\n  const { semanticColors, effects, fonts } = theme;\n  const { inputBorder, inputBorderHovered, inputFocusBorderAlt } = semanticColors;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  // placeholder style constants\n  const placeholderStyles: IStyle = [\n    fonts.medium,\n    {\n      color: semanticColors.inputPlaceholderText,\n      opacity: 1,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  ];\n\n  const disabledPlaceholderStyles: IStyle = {\n    color: semanticColors.disabledText,\n    selectors: {\n      [HighContrastSelector]: {\n        color: 'GrayText',\n      },\n    },\n  };\n\n  // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\n  // @todo: investigate the performance cost of the calculation below and apply if negligible.\n  //   Replacing with a static color for now.\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\n  const disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\n\n  return {\n    root: [classNames.root, className],\n    text: [\n      classNames.text,\n      {\n        display: 'flex',\n        position: 'relative',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        boxSizing: 'border-box',\n        minWidth: 180,\n        minHeight: 30,\n        border: `1px solid ${inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n      },\n      !isFocused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: inputBorderHovered,\n            },\n          },\n        },\n      isFocused && !disabled && getInputFocusStyle(inputFocusBorderAlt, effects.roundedCorner2),\n      disabled && {\n        borderColor: disabledOverlayColor,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            background: disabledOverlayColor,\n          },\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n            selectors: {\n              ':after': {\n                background: 'none',\n              },\n            },\n          },\n        },\n      },\n    ],\n    itemsWrapper: [\n      classNames.itemsWrapper,\n      {\n        display: 'flex',\n        flexWrap: 'wrap',\n        maxWidth: '100%',\n      },\n    ],\n    input: [\n      classNames.input,\n      fonts.medium,\n      {\n        height: 30,\n        border: 'none',\n        flexGrow: 1,\n        outline: 'none',\n        padding: '0 6px 0',\n        alignSelf: 'flex-end',\n        borderRadius: effects.roundedCorner2,\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        selectors: {\n          '::-ms-clear': {\n            display: 'none',\n          },\n        },\n      },\n      getPlaceholderStyles(placeholderStyles),\n      disabled && getPlaceholderStyles(disabledPlaceholderStyles),\n      inputClassName,\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}