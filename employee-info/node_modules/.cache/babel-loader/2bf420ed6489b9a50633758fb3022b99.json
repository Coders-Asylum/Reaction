{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\nvar getClassNames = classNamesFunction();\n\nvar GroupHeaderBase =\n/** @class */\nfunction (_super) {\n  __extends(GroupHeaderBase, _super);\n\n  function GroupHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._toggleCollapse = function () {\n      var _a = _this.props,\n          group = _a.group,\n          onToggleCollapse = _a.onToggleCollapse,\n          isGroupLoading = _a.isGroupLoading;\n      var isCollapsed = _this.state.isCollapsed;\n      var newCollapsed = !isCollapsed;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group);\n\n      _this.setState({\n        isCollapsed: newCollapsed,\n        isLoadingVisible: newLoadingVisible\n      });\n\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n    };\n\n    _this._onKeyUp = function (ev) {\n      var _a = _this.props,\n          group = _a.group,\n          onGroupHeaderKeyUp = _a.onGroupHeaderKeyUp;\n\n      if (onGroupHeaderKeyUp) {\n        onGroupHeaderKeyUp(ev, group);\n      }\n\n      if (!ev.defaultPrevented) {\n        // eslint-disable-next-line deprecation/deprecation\n        var shouldOpen = _this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, _this.props.theme); // eslint-disable-next-line deprecation/deprecation\n\n        var shouldClose = !_this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, _this.props.theme);\n\n        if (shouldClose || shouldOpen) {\n          _this._toggleCollapse();\n\n          ev.stopPropagation();\n          ev.preventDefault();\n        }\n      }\n    };\n\n    _this._onToggleClick = function (ev) {\n      _this._toggleCollapse();\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n\n    _this._onToggleSelectGroupClick = function (ev) {\n      var _a = _this.props,\n          onToggleSelectGroup = _a.onToggleSelectGroup,\n          group = _a.group;\n\n      if (onToggleSelectGroup) {\n        onToggleSelectGroup(group);\n      }\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    _this._onHeaderClick = function () {\n      var _a = _this.props,\n          group = _a.group,\n          onGroupHeaderClick = _a.onGroupHeaderClick,\n          onToggleSelectGroup = _a.onToggleSelectGroup;\n\n      if (onGroupHeaderClick) {\n        onGroupHeaderClick(group);\n      } else if (onToggleSelectGroup) {\n        onToggleSelectGroup(group);\n      }\n    };\n\n    _this._onRenderTitle = function (props) {\n      var group = props.group,\n          ariaColSpan = props.ariaColSpan;\n\n      if (!group) {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        className: _this._classNames.title,\n        id: _this._id,\n        role: \"gridcell\",\n        \"aria-colspan\": ariaColSpan\n      }, React.createElement(\"span\", null, group.name), React.createElement(\"span\", {\n        className: _this._classNames.headerCount\n      }, \"(\", group.count, group.hasMoreData && '+', \")\"));\n    };\n\n    _this._id = getId('GroupHeader');\n    _this.state = {\n      isCollapsed: _this.props.group && _this.props.group.isCollapsed,\n      isLoadingVisible: false\n    };\n    return _this;\n  }\n\n  GroupHeaderBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    if (nextProps.group) {\n      var newCollapsed = nextProps.group.isCollapsed;\n      var isGroupLoading = nextProps.isGroupLoading;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n      return __assign(__assign({}, previousState), {\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false\n      });\n    }\n\n    return previousState;\n  };\n\n  GroupHeaderBase.prototype.render = function () {\n    var _a = this.props,\n        group = _a.group,\n        _b = _a.groupLevel,\n        groupLevel = _b === void 0 ? 0 : _b,\n        viewport = _a.viewport,\n        selectionMode = _a.selectionMode,\n        loadingText = _a.loadingText,\n        // eslint-disable-next-line deprecation/deprecation\n    _c = _a.isSelected,\n        // eslint-disable-next-line deprecation/deprecation\n    isSelected = _c === void 0 ? false : _c,\n        _d = _a.selected,\n        selected = _d === void 0 ? false : _d,\n        indentWidth = _a.indentWidth,\n        _e = _a.onRenderTitle,\n        onRenderTitle = _e === void 0 ? this._onRenderTitle : _e,\n        onRenderGroupHeaderCheckbox = _a.onRenderGroupHeaderCheckbox,\n        _f = _a.isCollapsedGroupSelectVisible,\n        isCollapsedGroupSelectVisible = _f === void 0 ? true : _f,\n        expandButtonProps = _a.expandButtonProps,\n        expandButtonIcon = _a.expandButtonIcon,\n        selectAllButtonProps = _a.selectAllButtonProps,\n        theme = _a.theme,\n        styles = _a.styles,\n        className = _a.className,\n        compact = _a.compact,\n        ariaPosInSet = _a.ariaPosInSet,\n        ariaSetSize = _a.ariaSetSize,\n        ariaRowIndex = _a.ariaRowIndex,\n        useFastIcons = _a.useFastIcons;\n    var defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n    var onRenderCheckbox = onRenderGroupHeaderCheckbox ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender) : defaultCheckboxRender;\n    var _g = this.state,\n        isCollapsed = _g.isCollapsed,\n        isLoadingVisible = _g.isLoadingVisible;\n    var canSelectGroup = selectionMode === SelectionMode.multiple;\n    var isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    var currentlySelected = selected || isSelected;\n    var isRTL = getRTL(theme);\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      selected: currentlySelected,\n      isCollapsed: isCollapsed,\n      compact: compact\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: this._classNames.root,\n      style: viewport ? {\n        minWidth: viewport.width\n      } : {},\n      onClick: this._onHeaderClick,\n      role: \"row\",\n      \"aria-setsize\": ariaSetSize,\n      \"aria-posinset\": ariaPosInSet,\n      \"aria-rowindex\": ariaRowIndex,\n      \"data-is-focusable\": true,\n      onKeyUp: this._onKeyUp,\n      \"aria-label\": group.ariaLabel,\n      \"aria-labelledby\": group.ariaLabel ? undefined : this._id,\n      \"aria-expanded\": !this.state.isCollapsed,\n      \"aria-selected\": canSelectGroup ? currentlySelected : undefined,\n      \"aria-level\": groupLevel + 1\n    }, React.createElement(\"div\", {\n      className: this._classNames.groupHeaderContainer,\n      role: \"presentation\"\n    }, isSelectionCheckVisible ? React.createElement(\"div\", {\n      role: \"gridcell\"\n    }, React.createElement(\"button\", __assign({\n      \"data-is-focusable\": false,\n      type: \"button\",\n      className: this._classNames.check,\n      role: \"checkbox\",\n      id: this._id + \"-check\",\n      \"aria-checked\": currentlySelected,\n      \"aria-labelledby\": this._id + \"-check \" + this._id,\n      \"data-selection-toggle\": true,\n      onClick: this._onToggleSelectGroupClick\n    }, selectAllButtonProps), onRenderCheckbox({\n      checked: currentlySelected,\n      theme: theme\n    }, onRenderCheckbox))) : // To make the group header align properly with the column headers, this spacer\n    // needs to be the same width as the check cell in the column header.\n    selectionMode !== SelectionMode.none && React.createElement(GroupSpacer, {\n      indentWidth: CHECK_CELL_WIDTH,\n      count: 1\n    }), React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      count: groupLevel\n    }), React.createElement(\"div\", {\n      className: this._classNames.dropIcon,\n      role: \"presentation\"\n    }, React.createElement(Icon, {\n      iconName: \"Tag\"\n    })), React.createElement(\"div\", {\n      role: \"gridcell\"\n    }, React.createElement(\"button\", __assign({\n      \"data-is-focusable\": false,\n      type: \"button\",\n      className: this._classNames.expand,\n      onClick: this._onToggleClick,\n      \"aria-expanded\": !this.state.isCollapsed\n    }, expandButtonProps), React.createElement(Icon, {\n      className: this._classNames.expandIsCollapsed,\n      iconName: expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')\n    }))), onRenderTitle(this.props, this._onRenderTitle), isLoadingVisible && React.createElement(Spinner, {\n      label: loadingText\n    })));\n  };\n\n  GroupHeaderBase.prototype._defaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(Check, {\n      checked: checkboxProps.checked\n    });\n  };\n\n  GroupHeaderBase.prototype._fastDefaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(FastCheck, {\n      theme: checkboxProps.theme,\n      checked: checkboxProps.checked\n    });\n  };\n\n  GroupHeaderBase.defaultProps = {\n    expandButtonProps: {\n      'aria-label': 'expand collapse group'\n    }\n  };\n  return GroupHeaderBase;\n}(React.Component);\n\nexport { GroupHeaderBase };\nvar FastCheck = React.memo(function (props) {\n  return React.createElement(Check, {\n    theme: props.theme,\n    checked: props.checked,\n    className: props.className,\n    useFastIcons: true\n  });\n});","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,qBAAT,EAAgCC,kBAAhC,EAAoDC,KAApD,EAA2DC,MAA3D,EAAmEC,iBAAnE,EAAsFC,QAAtF,QAAsG,iBAAtG;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,gBAAT,QAAiC,uCAAjC;AASA,IAAMC,aAAa,GAAGX,kBAAkB,EAAxC;;AAOA;AAAA;AAAA;AAAqCY;;AA2BnC,2BAAYC,KAAZ,EAAoC;AAApC,gBACEC,kBAAMD,KAAN,KAAY,IADd;;AAqIQE,4BAAkB;AAClB,eAA8CA,KAAI,CAACF,KAAnD;AAAA,UAAEG,KAAK,WAAP;AAAA,UAASC,gBAAgB,sBAAzB;AAAA,UAA2BC,cAAc,oBAAzC;AACE,qBAAW,GAAKH,KAAI,CAACI,KAAL,CAAUC,WAA1B;AAER,UAAMC,YAAY,GAAG,CAACD,WAAtB;AACA,UAAME,iBAAiB,GAAG,CAACD,YAAD,IAAiBH,cAAjB,IAAmCA,cAAc,CAACF,KAAD,CAA3E;;AAEAD,WAAI,CAACQ,QAAL,CAAc;AACZH,mBAAW,EAAEC,YADD;AAEZG,wBAAgB,EAAEF;AAFN,OAAd;;AAIA,UAAIL,gBAAJ,EAAsB;AACpBA,wBAAgB,CAACD,KAAD,CAAhB;AACD;AACF,KAdO;;AAgBAD,qBAAW,UAACU,EAAD,EAAqC;AAChD,eAAgCV,KAAI,CAACF,KAArC;AAAA,UAAEG,KAAK,WAAP;AAAA,UAASU,kBAAkB,wBAA3B;;AAEN,UAAIA,kBAAJ,EAAwB;AACtBA,0BAAkB,CAACD,EAAD,EAAKT,KAAL,CAAlB;AACD;;AAED,UAAI,CAACS,EAAE,CAACE,gBAAR,EAA0B;AACxB;AACA,YAAMC,UAAU,GAAGb,KAAI,CAACI,KAAL,CAAWC,WAAX,IAA0BK,EAAE,CAACI,KAAH,KAAa1B,iBAAiB,CAACC,QAAQ,CAAC0B,KAAV,EAAiBf,KAAI,CAACF,KAAL,CAAWkB,KAA5B,CAA3E,CAFwB,CAGxB;;AACA,YAAMC,WAAW,GAAG,CAACjB,KAAI,CAACI,KAAL,CAAWC,WAAZ,IAA2BK,EAAE,CAACI,KAAH,KAAa1B,iBAAiB,CAACC,QAAQ,CAAC6B,IAAV,EAAgBlB,KAAI,CAACF,KAAL,CAAWkB,KAA3B,CAA7E;;AACA,YAAIC,WAAW,IAAIJ,UAAnB,EAA+B;AAC7Bb,eAAI,CAACmB,eAAL;;AACAT,YAAE,CAACU,eAAH;AACAV,YAAE,CAACW,cAAH;AACD;AACF;AACF,KAlBO;;AAoBArB,2BAAiB,UAACU,EAAD,EAAkC;AACzDV,WAAI,CAACmB,eAAL;;AACAT,QAAE,CAACU,eAAH;AACAV,QAAE,CAACW,cAAH;AACD,KAJO;;AAMArB,sCAA4B,UAACU,EAAD,EAAkC;AAC9D,eAAiCV,KAAI,CAACF,KAAtC;AAAA,UAAEwB,mBAAmB,yBAArB;AAAA,UAAuBrB,KAAK,WAA5B;;AAEN,UAAIqB,mBAAJ,EAAyB;AACvBA,2BAAmB,CAACrB,KAAD,CAAnB;AACD;;AAEDS,QAAE,CAACW,cAAH;AACAX,QAAE,CAACU,eAAH;AACD,KATO;;AAWApB,2BAAiB;AACjB,eAAqDA,KAAI,CAACF,KAA1D;AAAA,UAAEG,KAAK,WAAP;AAAA,UAASsB,kBAAkB,wBAA3B;AAAA,UAA6BD,mBAAmB,yBAAhD;;AAEN,UAAIC,kBAAJ,EAAwB;AACtBA,0BAAkB,CAACtB,KAAD,CAAlB;AACD,OAFD,MAEO,IAAIqB,mBAAJ,EAAyB;AAC9BA,2BAAmB,CAACrB,KAAD,CAAnB;AACD;AACF,KARO;;AAkBAD,2BAAiB,UAACF,KAAD,EAAyB;AACxC,eAAK,GAAkBA,KAAK,MAA5B;AAAA,UAAO0B,WAAW,GAAK1B,KAAK,YAA5B;;AAER,UAAI,CAACG,KAAL,EAAY;AACV,eAAO,IAAP;AACD;;AAED,aACElB;AAAK0C,iBAAS,EAAEzB,KAAI,CAAC0B,WAAL,CAAiBC,KAAjC;AAAwCC,UAAE,EAAE5B,KAAI,CAAC6B,GAAjD;AAAsDC,YAAI,EAAC,UAA3D;AAAqE,wBAAeN;AAApF,SACEzC,kCAAOkB,KAAK,CAAC8B,IAAb,CADF,EAQEhD;AAAM0C,iBAAS,EAAEzB,KAAI,CAAC0B,WAAL,CAAiBM;AAAlC,cACI/B,KAAK,CAACgC,KADV,EAEGhC,KAAK,CAACiC,WAAN,IAAqB,GAFxB,MARF,CADF;AAeD,KAtBO;;AAzMNlC,SAAI,CAAC6B,GAAL,GAAW3C,KAAK,CAAC,aAAD,CAAhB;AAEAc,SAAI,CAACI,KAAL,GAAa;AACXC,iBAAW,EAAGL,KAAI,CAACF,KAAL,CAAWG,KAAX,IAAoBD,KAAI,CAACF,KAAL,CAAWG,KAAX,CAAiBI,WADxC;AAEXI,sBAAgB,EAAE;AAFP,KAAb;;AAID;;AA5Ba0B,6CAAd,UACEC,SADF,EAEEC,aAFF,EAEkC;AAEhC,QAAID,SAAS,CAACnC,KAAd,EAAqB;AACnB,UAAMK,YAAY,GAAG8B,SAAS,CAACnC,KAAV,CAAgBI,WAArC;AACA,UAAMF,cAAc,GAAGiC,SAAS,CAACjC,cAAjC;AACA,UAAMI,iBAAiB,GAAG,CAACD,YAAD,IAAiBH,cAAjB,IAAmCA,cAAc,CAACiC,SAAS,CAACnC,KAAX,CAA3E;AAEA,mCACKoC,aADL,GACkB;AAChBhC,mBAAW,EAAEC,YAAY,IAAI,KADb;AAEhBG,wBAAgB,EAAEF,iBAAiB,IAAI;AAFvB,OADlB;AAKD;;AAED,WAAO8B,aAAP;AACD,GAjBa;;AA8BPF,qCAAP;AACQ,aAwBF,KAAKrC,KAxBH;AAAA,QACJG,KAAK,WADD;AAAA,QAEJqC,kBAFI;AAAA,QAEJC,UAAU,mBAAG,CAAH,GAAID,EAFV;AAAA,QAGJE,QAAQ,cAHJ;AAAA,QAIJC,aAAa,mBAJT;AAAA,QAKJC,WAAW,iBALP;AAAA,QAMJ;AACAC,sBAPI;AAAA,QAMJ;AACAC,cAAU,mBAAG,KAAH,GAAQD,EAPd;AAAA,QAQJE,gBARI;AAAA,QAQJC,QAAQ,mBAAG,KAAH,GAAQD,EARZ;AAAA,QASJE,WAAW,iBATP;AAAA,QAUJC,qBAVI;AAAA,QAUJC,aAAa,mBAAG,KAAKC,cAAR,GAAsBF,EAV/B;AAAA,QAWJG,2BAA2B,iCAXvB;AAAA,QAYJC,qCAZI;AAAA,QAYJC,6BAA6B,mBAAG,IAAH,GAAOD,EAZhC;AAAA,QAaJE,iBAAiB,uBAbb;AAAA,QAcJC,gBAAgB,sBAdZ;AAAA,QAeJC,oBAAoB,0BAfhB;AAAA,QAgBJxC,KAAK,WAhBD;AAAA,QAiBJyC,MAAM,YAjBF;AAAA,QAkBJhC,SAAS,eAlBL;AAAA,QAmBJiC,OAAO,aAnBH;AAAA,QAoBJC,YAAY,kBApBR;AAAA,QAqBJC,WAAW,iBArBP;AAAA,QAsBJC,YAAY,kBAtBR;AAAA,QAuBJC,YAAY,kBAvBR;AA0BN,QAAMC,qBAAqB,GAAGD,YAAY,GAAG,KAAKE,0BAAR,GAAqC,KAAKC,sBAApF;AAEA,QAAMC,gBAAgB,GAAGf,2BAA2B,GAChDnE,qBAAqB,CAACmE,2BAAD,EAA8BY,qBAA9B,CAD2B,GAEhDA,qBAFJ;AAIM,aAAoC,KAAK3D,KAAzC;AAAA,QAAEC,WAAW,iBAAb;AAAA,QAAeI,gBAAgB,sBAA/B;AAEN,QAAM0D,cAAc,GAAG1B,aAAa,KAAKnD,aAAa,CAAC8E,QAAvD;AACA,QAAMC,uBAAuB,GAAGF,cAAc,KAAKd,6BAA6B,IAAI,EAAEpD,KAAK,IAAIA,KAAK,CAACI,WAAjB,CAAtC,CAA9C;AACA,QAAMiE,iBAAiB,GAAGxB,QAAQ,IAAIF,UAAtC;AAEA,QAAM2B,KAAK,GAAGpF,MAAM,CAAC6B,KAAD,CAApB;AAEA,SAAKU,WAAL,GAAmB9B,aAAa,CAAC6D,MAAD,EAAS;AACvCzC,WAAK,EAAEA,KADgC;AAEvCS,eAAS,WAF8B;AAGvCqB,cAAQ,EAAEwB,iBAH6B;AAIvCjE,iBAAW,aAJ4B;AAKvCqD,aAAO;AALgC,KAAT,CAAhC;;AAQA,QAAI,CAACzD,KAAL,EAAY;AACV,aAAO,IAAP;AACD;;AAED,WACElB;AACE0C,eAAS,EAAE,KAAKC,WAAL,CAAiB8C,IAD9B;AAEEC,WAAK,EAAEjC,QAAQ,GAAG;AAAEkC,gBAAQ,EAAElC,QAAQ,CAACmC;AAArB,OAAH,GAAkC,EAFnD;AAGEC,aAAO,EAAE,KAAKC,cAHhB;AAIE/C,UAAI,EAAC,KAJP;AAIY,sBACI8B,WALhB;AAK2B,uBACVD,YANjB;AAM6B,uBACZE,YAPjB;AAO6B,2BACR,IARrB;AASEiB,aAAO,EAAE,KAAKC,QAThB;AASwB,oBACV9E,KAAK,CAAC+E,SAVpB;AAU6B,yBACV/E,KAAK,CAAC+E,SAAN,GAAkBC,SAAlB,GAA8B,KAAKpD,GAXtD;AAWyD,uBACxC,CAAC,KAAKzB,KAAL,CAAWC,WAZ7B;AAYwC,uBACvB8D,cAAc,GAAGG,iBAAH,GAAuBW,SAbtD;AAa+D,oBACjD1C,UAAU,GAAG;AAd3B,OAgBExD;AAAK0C,eAAS,EAAE,KAAKC,WAAL,CAAiBwD,oBAAjC;AAAuDpD,UAAI,EAAC;AAA5D,OACGuC,uBAAuB,GACtBtF;AAAK+C,UAAI,EAAC;AAAV,OACE/C;AAAA,2BACqB,KADrB;AAEEoG,UAAI,EAAC,QAFP;AAGE1D,eAAS,EAAE,KAAKC,WAAL,CAAiB0D,KAH9B;AAIEtD,UAAI,EAAC,UAJP;AAKEF,QAAE,EAAK,KAAKC,GAAL,GAAQ,QALjB;AAKyB,sBACTyC,iBANhB;AAMiC,yBACX,KAAKzC,GAAL,GAAQ,SAAR,GAAkB,KAAKA,GAP7C;AAOkD,+BACzB,IARzB;AASE+C,aAAO,EAAE,KAAKS;AAThB,OAUM7B,oBAVN,GAYGU,gBAAgB,CAAC;AAAEoB,aAAO,EAAEhB,iBAAX;AAA8BtD,WAAK;AAAnC,KAAD,EAAwCkD,gBAAxC,CAZnB,CADF,CADsB,GAkBtB;AACA;AACAzB,iBAAa,KAAKnD,aAAa,CAACiG,IAAhC,IAAwCxG,oBAACU,WAAD,EAAY;AAACsD,iBAAW,EAAEpD,gBAAd;AAAgCsC,WAAK,EAAE;AAAvC,KAAZ,CArB5C,EAwBElD,oBAACU,WAAD,EAAY;AAACsD,iBAAW,EAAEA,WAAd;AAA2Bd,WAAK,EAAEM;AAAlC,KAAZ,CAxBF,EA0BExD;AAAK0C,eAAS,EAAE,KAAKC,WAAL,CAAiB8D,QAAjC;AAA2C1D,UAAI,EAAC;AAAhD,OACE/C,oBAACS,IAAD,EAAK;AAACiG,cAAQ,EAAC;AAAV,KAAL,CADF,CA1BF,EA6BE1G;AAAK+C,UAAI,EAAC;AAAV,OACE/C;AAAA,2BACqB,KADrB;AAEEoG,UAAI,EAAC,QAFP;AAGE1D,eAAS,EAAE,KAAKC,WAAL,CAAiBgE,MAH9B;AAIEd,aAAO,EAAE,KAAKe,cAJhB;AAI8B,uBACb,CAAC,KAAKvF,KAAL,CAAWC;AAL7B,OAMMiD,iBANN,GAQEvE,oBAACS,IAAD,EAAK;AACHiC,eAAS,EAAE,KAAKC,WAAL,CAAiBkE,iBADzB;AAEHH,cAAQ,EAAElC,gBAAgB,KAAKgB,KAAK,GAAG,gBAAH,GAAsB,iBAAhC;AAFvB,KAAL,CARF,CADF,CA7BF,EA6CGtB,aAAa,CAAC,KAAKnD,KAAN,EAAa,KAAKoD,cAAlB,CA7ChB,EA8CGzC,gBAAgB,IAAI1B,oBAACW,OAAD,EAAQ;AAACmG,WAAK,EAAEnD;AAAR,KAAR,CA9CvB,CAhBF,CADF;AAmED,GAxHM;;AAyLCP,qDAAR,UAA+B2D,aAA/B,EAAuE;AACrE,WAAO/G,oBAACQ,KAAD,EAAM;AAAC+F,aAAO,EAAEQ,aAAa,CAACR;AAAxB,KAAN,CAAP;AACD,GAFO;;AAIAnD,yDAAR,UAAmC2D,aAAnC,EAA2E;AACzE,WAAO/G,oBAACgH,SAAD,EAAU;AAAC/E,WAAK,EAAE8E,aAAa,CAAC9E,KAAtB;AAA6BsE,aAAO,EAAEQ,aAAa,CAACR;AAApD,KAAV,CAAP;AACD,GAFO;;AAlOMnD,iCAAkC;AAC9CmB,qBAAiB,EAAE;AAAE,oBAAc;AAAhB;AAD2B,GAAlC;AA6PhB;AA9PA,EAAqCvE,KAAK,CAACiH,SAA3C;;SAAa7D;AAgQb,IAAM4D,SAAS,GAAGhH,KAAK,CAACkH,IAAN,CAAW,UAACnG,KAAD,EAAiE;AAC5F,SAAOf,oBAACQ,KAAD,EAAM;AAACyB,SAAK,EAAElB,KAAK,CAACkB,KAAd;AAAqBsE,WAAO,EAAExF,KAAK,CAACwF,OAApC;AAA6C7D,aAAS,EAAE3B,KAAK,CAAC2B,SAA9D;AAAyEqC,gBAAY;AAArF,GAAN,CAAP;AACD,CAFiB,CAAlB","names":["React","composeRenderFunction","classNamesFunction","getId","getRTL","getRTLSafeKeyCode","KeyCodes","SelectionMode","Check","Icon","GroupSpacer","Spinner","CHECK_CELL_WIDTH","getClassNames","__extends","props","_super","_this","group","onToggleCollapse","isGroupLoading","state","isCollapsed","newCollapsed","newLoadingVisible","setState","isLoadingVisible","ev","onGroupHeaderKeyUp","defaultPrevented","shouldOpen","which","right","theme","shouldClose","left","_toggleCollapse","stopPropagation","preventDefault","onToggleSelectGroup","onGroupHeaderClick","ariaColSpan","className","_classNames","title","id","_id","role","name","headerCount","count","hasMoreData","GroupHeaderBase","nextProps","previousState","_b","groupLevel","viewport","selectionMode","loadingText","_c","isSelected","_d","selected","indentWidth","_e","onRenderTitle","_onRenderTitle","onRenderGroupHeaderCheckbox","_f","isCollapsedGroupSelectVisible","expandButtonProps","expandButtonIcon","selectAllButtonProps","styles","compact","ariaPosInSet","ariaSetSize","ariaRowIndex","useFastIcons","defaultCheckboxRender","_fastDefaultCheckboxRender","_defaultCheckboxRender","onRenderCheckbox","canSelectGroup","multiple","isSelectionCheckVisible","currentlySelected","isRTL","root","style","minWidth","width","onClick","_onHeaderClick","onKeyUp","_onKeyUp","ariaLabel","undefined","groupHeaderContainer","type","check","_onToggleSelectGroupClick","checked","none","dropIcon","iconName","expand","_onToggleClick","expandIsCollapsed","label","checkboxProps","FastCheck","Component","memo"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupHeader.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\nimport type { IProcessedStyleSet, ITheme } from '../../Styling';\nimport type {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n  private _id: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupHeaderProps,\n    previousState: IGroupHeaderState,\n  ): IGroupHeaderState {\n    if (nextProps.group) {\n      const newCollapsed = nextProps.group.isCollapsed;\n      const isGroupLoading = nextProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n\n      return {\n        ...previousState,\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      };\n    }\n\n    return previousState;\n  }\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this._id = getId('GroupHeader');\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderTitle = this._onRenderTitle,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      compact,\n      ariaPosInSet,\n      ariaSetSize,\n      ariaRowIndex,\n      useFastIcons,\n    } = this.props;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        onClick={this._onHeaderClick}\n        role=\"row\"\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        aria-rowindex={ariaRowIndex}\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-label={group.ariaLabel}\n        aria-labelledby={group.ariaLabel ? undefined : this._id}\n        aria-expanded={!this.state.isCollapsed}\n        aria-selected={canSelectGroup ? currentlySelected : undefined}\n        aria-level={groupLevel + 1}\n      >\n        <div className={this._classNames.groupHeaderContainer} role=\"presentation\">\n          {isSelectionCheckVisible ? (\n            <div role=\"gridcell\">\n              <button\n                data-is-focusable={false}\n                type=\"button\"\n                className={this._classNames.check}\n                role=\"checkbox\"\n                id={`${this._id}-check`}\n                aria-checked={currentlySelected}\n                aria-labelledby={`${this._id}-check ${this._id}`}\n                data-selection-toggle={true}\n                onClick={this._onToggleSelectGroupClick}\n                {...selectAllButtonProps}\n              >\n                {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n              </button>\n            </div>\n          ) : (\n            // To make the group header align properly with the column headers, this spacer\n            // needs to be the same width as the check cell in the column header.\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={CHECK_CELL_WIDTH} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon} role=\"presentation\">\n            <Icon iconName=\"Tag\" />\n          </div>\n          <div role=\"gridcell\">\n            <button\n              data-is-focusable={false}\n              type=\"button\"\n              className={this._classNames.expand}\n              onClick={this._onToggleClick}\n              aria-expanded={!this.state.isCollapsed}\n              {...expandButtonProps}\n            >\n              <Icon\n                className={this._classNames.expandIsCollapsed}\n                iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n              />\n            </button>\n          </div>\n\n          {onRenderTitle(this.props, this._onRenderTitle)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { group, onGroupHeaderKeyUp } = this.props;\n\n    if (onGroupHeaderKeyUp) {\n      onGroupHeaderKeyUp(ev, group);\n    }\n\n    if (!ev.defaultPrevented) {\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n      if (shouldClose || shouldOpen) {\n        this._toggleCollapse();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group, ariaColSpan } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.title} id={this._id} role=\"gridcell\" aria-colspan={ariaColSpan}>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </div>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n"]},"metadata":{},"sourceType":"module"}