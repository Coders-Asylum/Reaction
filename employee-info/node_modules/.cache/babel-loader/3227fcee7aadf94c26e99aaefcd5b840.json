{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List } from '../../List';\nimport { SelectionMode } from '../../Selection';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nvar getClassNames = classNamesFunction();\nvar ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.rowHeight,\n    COMPACT_ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.compactRowHeight;\n\nvar GroupedListBase =\n/** @class */\nfunction (_super) {\n  __extends(GroupedListBase, _super);\n\n  function GroupedListBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._list = React.createRef();\n\n    _this._renderGroup = function (group, groupIndex) {\n      var _a = _this.props,\n          dragDropEvents = _a.dragDropEvents,\n          dragDropHelper = _a.dragDropHelper,\n          eventsToRegister = _a.eventsToRegister,\n          groupProps = _a.groupProps,\n          items = _a.items,\n          listProps = _a.listProps,\n          onRenderCell = _a.onRenderCell,\n          selectionMode = _a.selectionMode,\n          selection = _a.selection,\n          viewport = _a.viewport,\n          onShouldVirtualize = _a.onShouldVirtualize,\n          groups = _a.groups,\n          compact = _a.compact; // override group header/footer props as needed\n\n      var dividerProps = {\n        onToggleSelectGroup: _this._onToggleSelectGroup,\n        onToggleCollapse: _this._onToggleCollapse,\n        onToggleSummarize: _this._onToggleSummarize\n      };\n\n      var headerProps = __assign(__assign({}, groupProps.headerProps), dividerProps);\n\n      var showAllProps = __assign(__assign({}, groupProps.showAllProps), dividerProps);\n\n      var footerProps = __assign(__assign({}, groupProps.footerProps), dividerProps);\n\n      var groupNestingDepth = _this._getGroupNestingDepth();\n\n      if (!groupProps.showEmptyGroups && group && group.count === 0) {\n        return null;\n      }\n\n      var finalListProps = __assign(__assign({}, listProps || {}), {\n        version: _this.state.version\n      });\n\n      return React.createElement(GroupedListSection, {\n        key: _this._getGroupKey(group, groupIndex),\n        dragDropEvents: dragDropEvents,\n        dragDropHelper: dragDropHelper,\n        eventsToRegister: eventsToRegister,\n        footerProps: footerProps,\n        getGroupItemLimit: groupProps && groupProps.getGroupItemLimit,\n        group: group,\n        groupIndex: groupIndex,\n        groupNestingDepth: groupNestingDepth,\n        groupProps: groupProps,\n        headerProps: headerProps,\n        listProps: finalListProps,\n        items: items,\n        onRenderCell: onRenderCell,\n        onRenderGroupHeader: groupProps.onRenderHeader,\n        onRenderGroupShowAll: groupProps.onRenderShowAll,\n        onRenderGroupFooter: groupProps.onRenderFooter,\n        selectionMode: selectionMode,\n        selection: selection,\n        showAllProps: showAllProps,\n        viewport: viewport,\n        onShouldVirtualize: onShouldVirtualize,\n        groupedListClassNames: _this._classNames,\n        groups: groups,\n        compact: compact\n      });\n    };\n\n    _this._getDefaultGroupItemLimit = function (group) {\n      return group.children && group.children.length > 0 ? group.children.length : group.count;\n    };\n\n    _this._getGroupItemLimit = function (group) {\n      var groupProps = _this.props.groupProps;\n      var getGroupItemLimit = groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : _this._getDefaultGroupItemLimit;\n      return getGroupItemLimit(group);\n    };\n\n    _this._getGroupHeight = function (group) {\n      var rowHeight = _this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n      return rowHeight + (group.isCollapsed ? 0 : rowHeight * _this._getGroupItemLimit(group));\n    };\n\n    _this._getPageHeight = function (itemIndex) {\n      var groups = _this.state.groups;\n      var _a = _this.props.getGroupHeight,\n          getGroupHeight = _a === void 0 ? _this._getGroupHeight : _a;\n      var pageGroup = groups && groups[itemIndex];\n\n      if (pageGroup) {\n        return getGroupHeight(pageGroup, itemIndex);\n      } else {\n        return 0;\n      }\n    };\n\n    _this._onToggleCollapse = function (group) {\n      var groupProps = _this.props.groupProps;\n      var onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n      if (group) {\n        if (onToggleCollapse) {\n          onToggleCollapse(group);\n        }\n\n        group.isCollapsed = !group.isCollapsed;\n\n        _this._updateIsSomeGroupExpanded();\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this._onToggleSelectGroup = function (group) {\n      var _a = _this.props,\n          selection = _a.selection,\n          selectionMode = _a.selectionMode;\n\n      if (group && selection && selectionMode === SelectionMode.multiple) {\n        selection.toggleRangeSelected(group.startIndex, group.count);\n      }\n    };\n\n    _this._isInnerZoneKeystroke = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n    };\n\n    _this._onToggleSummarize = function (group) {\n      var groupProps = _this.props.groupProps;\n      var onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n      if (onToggleSummarize) {\n        onToggleSummarize(group);\n      } else {\n        if (group) {\n          group.isShowingAll = !group.isShowingAll;\n        }\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this._getPageSpecification = function (itemIndex) {\n      var groups = _this.state.groups;\n      var pageGroup = groups && groups[itemIndex];\n      return {\n        key: pageGroup && pageGroup.key\n      };\n    };\n\n    initializeComponentRef(_this);\n    _this._isSomeGroupExpanded = _this._computeIsSomeGroupExpanded(props.groups);\n\n    var _a = props.listProps,\n        _b = _a === void 0 ? {} : _a,\n        _c = _b.version,\n        version = _c === void 0 ? {} : _c;\n\n    _this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version: version\n    };\n    return _this;\n  }\n\n  GroupedListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    var groups = nextProps.groups,\n        selectionMode = nextProps.selectionMode,\n        compact = nextProps.compact,\n        items = nextProps.items,\n        listProps = nextProps.listProps;\n    var listVersion = listProps && listProps.version;\n\n    var nextState = __assign(__assign({}, previousState), {\n      selectionMode: selectionMode,\n      compact: compact,\n      groups: groups,\n      listProps: listProps\n    });\n\n    var shouldForceUpdates = false;\n    var previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (listVersion !== previousListVersion || items !== previousState.items || groups !== previousState.groups || selectionMode !== previousState.selectionMode || compact !== previousState.compact) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (groups !== previousState.groups) {\n      nextState = __assign(__assign({}, nextState), {\n        groups: groups\n      });\n    }\n\n    if (selectionMode !== previousState.selectionMode || compact !== previousState.compact) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = __assign(__assign({}, nextState), {\n        version: {}\n      });\n    }\n\n    return nextState;\n  };\n\n  GroupedListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  };\n\n  GroupedListBase.prototype.getStartItemIndexInView = function () {\n    return this._list.current.getStartItemIndexInView() || 0;\n  };\n\n  GroupedListBase.prototype.componentDidMount = function () {\n    var _a = this.props,\n        groupProps = _a.groupProps,\n        _b = _a.groups,\n        groups = _b === void 0 ? [] : _b;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  };\n\n  GroupedListBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        usePageCache = _a.usePageCache,\n        onShouldVirtualize = _a.onShouldVirtualize,\n        theme = _a.theme,\n        _b = _a.role,\n        role = _b === void 0 ? 'treegrid' : _b,\n        styles = _a.styles,\n        compact = _a.compact,\n        _c = _a.focusZoneProps,\n        focusZoneProps = _c === void 0 ? {} : _c,\n        _d = _a.rootListProps,\n        rootListProps = _d === void 0 ? {} : _d;\n    var _e = this.state,\n        groups = _e.groups,\n        version = _e.version;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      compact: compact\n    });\n    var _f = focusZoneProps.shouldEnterInnerZone,\n        shouldEnterInnerZone = _f === void 0 ? this._isInnerZoneKeystroke : _f;\n    return React.createElement(FocusZone, __assign({\n      direction: FocusZoneDirection.vertical,\n      \"data-automationid\": \"GroupedList\",\n      \"data-is-scrollable\": \"false\",\n      role: \"presentation\"\n    }, focusZoneProps, {\n      shouldEnterInnerZone: shouldEnterInnerZone,\n      className: css(this._classNames.root, focusZoneProps.className)\n    }), !groups ? this._renderGroup(undefined, 0) : React.createElement(List, __assign({\n      ref: this._list,\n      role: role,\n      items: groups,\n      onRenderCell: this._renderGroup,\n      getItemCountForPage: this._returnOne,\n      getPageHeight: this._getPageHeight,\n      getPageSpecification: this._getPageSpecification,\n      usePageCache: usePageCache,\n      onShouldVirtualize: onShouldVirtualize,\n      version: version\n    }, rootListProps)));\n  };\n\n  GroupedListBase.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n\n    this._forceListUpdates();\n  };\n\n  GroupedListBase.prototype.toggleCollapseAll = function (allCollapsed) {\n    var _a = this.state.groups,\n        groups = _a === void 0 ? [] : _a;\n    var groupProps = this.props.groupProps;\n    var onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  };\n\n  GroupedListBase.prototype._setGroupsCollapsedState = function (groups, isCollapsed) {\n    for (var groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  };\n\n  GroupedListBase.prototype._returnOne = function () {\n    return 1;\n  };\n\n  GroupedListBase.prototype._getGroupKey = function (group, index) {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  };\n\n  GroupedListBase.prototype._getGroupNestingDepth = function () {\n    var groups = this.state.groups;\n    var level = 0;\n    var groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  };\n\n  GroupedListBase.prototype._forceListUpdates = function (groups) {\n    this.setState({\n      version: {}\n    });\n  };\n\n  GroupedListBase.prototype._computeIsSomeGroupExpanded = function (groups) {\n    var _this = this;\n\n    return !!(groups && groups.some(function (group) {\n      return group.children ? _this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed;\n    }));\n  };\n\n  GroupedListBase.prototype._updateIsSomeGroupExpanded = function () {\n    var groups = this.state.groups;\n    var onGroupExpandStateChanged = this.props.onGroupExpandStateChanged;\n\n    var newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  };\n\n  GroupedListBase.defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false\n  };\n  return GroupedListBase;\n}(React.Component);\n\nexport { GroupedListBase };","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","classNamesFunction","KeyCodes","getRTLSafeKeyCode","css","GroupedListSection","List","SelectionMode","DEFAULT_ROW_HEIGHTS","FocusZone","FocusZoneDirection","getClassNames","ROW_HEIGHT","COMPACT_ROW_HEIGHT","__extends","props","_super","_this","createRef","group","groupIndex","dragDropEvents","dragDropHelper","eventsToRegister","groupProps","items","listProps","onRenderCell","selectionMode","selection","viewport","onShouldVirtualize","groups","compact","dividerProps","onToggleSelectGroup","_onToggleSelectGroup","onToggleCollapse","_onToggleCollapse","onToggleSummarize","_onToggleSummarize","headerProps","showAllProps","footerProps","groupNestingDepth","_getGroupNestingDepth","showEmptyGroups","count","finalListProps","version","state","key","_getGroupKey","getGroupItemLimit","onRenderGroupHeader","onRenderHeader","onRenderGroupShowAll","onRenderShowAll","onRenderGroupFooter","onRenderFooter","groupedListClassNames","_classNames","children","length","_getDefaultGroupItemLimit","rowHeight","isCollapsed","_getGroupItemLimit","itemIndex","getGroupHeight","_getGroupHeight","_a","pageGroup","_updateIsSomeGroupExpanded","forceUpdate","multiple","toggleRangeSelected","startIndex","ev","which","right","isShowingAll","_isSomeGroupExpanded","_computeIsSomeGroupExpanded","_c","GroupedListBase","nextProps","previousState","listVersion","nextState","shouldForceUpdates","previousListVersion","index","measureItem","scrollToMode","_list","current","scrollToIndex","getStartItemIndexInView","_b","isAllGroupsCollapsed","_setGroupsCollapsedState","className","usePageCache","theme","role","styles","focusZoneProps","_d","rootListProps","_isInnerZoneKeystroke","_f","__assign","direction","vertical","shouldEnterInnerZone","root","_renderGroup","undefined","ref","getItemCountForPage","_returnOne","getPageHeight","_getPageHeight","getPageSpecification","_getPageSpecification","call","_forceListUpdates","allCollapsed","onToggleCollapseAll","String","level","groupsInLevel","setState","some","onGroupExpandStateChanged","newIsSomeGroupExpanded","isHeaderVisible","Component"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupedList.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode } from '../../List';\nimport { SelectionMode } from '../../Selection';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport type { IListProps } from '../../List';\nimport type { IGroupHeaderProps } from './GroupHeader';\nimport type { IGroupShowAllProps } from './GroupShowAll.styles';\nimport type { IGroupFooterProps } from './GroupFooter.types';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  selectionMode?: IGroupedListProps['selectionMode'];\n  compact?: IGroupedListProps['compact'];\n  groups?: IGroup[];\n  items?: IGroupedListProps['items'];\n  listProps?: IGroupedListProps['listProps'];\n  version: {};\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false,\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupedListProps,\n    previousState: IGroupedListState,\n  ): IGroupedListState {\n    const { groups, selectionMode, compact, items, listProps } = nextProps;\n    const listVersion = listProps && listProps.version;\n\n    let nextState = {\n      ...previousState,\n      selectionMode,\n      compact,\n      groups,\n      listProps,\n    };\n\n    let shouldForceUpdates = false;\n\n    const previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (\n      listVersion !== previousListVersion ||\n      items !== previousState.items ||\n      groups !== previousState.groups ||\n      selectionMode !== previousState.selectionMode ||\n      compact !== previousState.compact\n    ) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (groups !== previousState.groups) {\n      nextState = {\n        ...nextState,\n        groups,\n      };\n    }\n\n    if (selectionMode !== previousState.selectionMode || compact !== previousState.compact) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  }\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    const { listProps: { version = {} } = {} } = props;\n\n    this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      usePageCache,\n      onShouldVirtualize,\n      theme,\n      role = 'treegrid',\n      styles,\n      compact,\n      focusZoneProps = {},\n      rootListProps = {},\n    } = this.props;\n    const { groups, version } = this.state;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact: compact,\n    });\n\n    const { shouldEnterInnerZone = this._isInnerZoneKeystroke } = focusZoneProps;\n\n    return (\n      <FocusZone\n        direction={FocusZoneDirection.vertical}\n        data-automationid=\"GroupedList\"\n        data-is-scrollable=\"false\"\n        role=\"presentation\"\n        {...focusZoneProps}\n        shouldEnterInnerZone={shouldEnterInnerZone}\n        className={css(this._classNames.root, focusZoneProps.className)}\n      >\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role={role}\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            {...rootListProps}\n          />\n        )}\n      </FocusZone>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact,\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize,\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    const finalListProps: IListProps = {\n      ...(listProps || {}),\n      version: this.state.version,\n    };\n\n    return (\n      <GroupedListSection\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={finalListProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.children && group.children.length > 0 ? group.children.length : group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit =\n      groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    const { selection, selectionMode } = this.props;\n\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _isInnerZoneKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    // eslint-disable-next-line deprecation/deprecation\n    return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    this.setState({\n      version: {},\n    });\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number,\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key,\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(\n      groups &&\n      groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n    );\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}