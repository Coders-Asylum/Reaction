{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, getId } from '../../Utilities';\nvar getClassNames = classNamesFunction(); // if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\n\nvar ZERO_THRESHOLD = 0.01;\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\n\nvar ProgressIndicatorBase =\n/** @class */\nfunction (_super) {\n  __extends(ProgressIndicatorBase, _super);\n\n  function ProgressIndicatorBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._onRenderProgress = function (props) {\n      var _a = _this.props,\n          ariaLabel = _a.ariaLabel,\n          ariaValueText = _a.ariaValueText,\n          barHeight = _a.barHeight,\n          className = _a.className,\n          description = _a.description,\n          // eslint-disable-next-line deprecation/deprecation\n      _b = _a.label,\n          // eslint-disable-next-line deprecation/deprecation\n      label = _b === void 0 ? _this.props.title : _b,\n          styles = _a.styles,\n          theme = _a.theme;\n      var percentComplete = typeof _this.props.percentComplete === 'number' ? Math.min(100, Math.max(0, _this.props.percentComplete * 100)) : undefined;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        className: className,\n        barHeight: barHeight,\n        indeterminate: percentComplete === undefined ? true : false\n      });\n      var progressBarStyles = {\n        width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n        transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined\n      };\n      var ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n      var ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n      var ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete) : undefined;\n      return React.createElement(\"div\", {\n        className: classNames.itemProgress\n      }, React.createElement(\"div\", {\n        className: classNames.progressTrack\n      }), React.createElement(\"div\", {\n        className: classNames.progressBar,\n        style: progressBarStyles,\n        role: \"progressbar\",\n        \"aria-describedby\": description ? _this._descriptionId : undefined,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": label ? _this._labelId : undefined,\n        \"aria-valuemin\": ariaValueMin,\n        \"aria-valuemax\": ariaValueMax,\n        \"aria-valuenow\": ariaValueNow,\n        \"aria-valuetext\": ariaValueText\n      }));\n    };\n\n    var id = getId('progress-indicator');\n    _this._labelId = id + '-label';\n    _this._descriptionId = id + '-description';\n    return _this;\n  }\n\n  ProgressIndicatorBase.prototype.render = function () {\n    var _a = this.props,\n        barHeight = _a.barHeight,\n        className = _a.className,\n        // eslint-disable-next-line deprecation/deprecation\n    _b = _a.label,\n        // eslint-disable-next-line deprecation/deprecation\n    label = _b === void 0 ? this.props.title : _b,\n        // Fall back to deprecated value.\n    description = _a.description,\n        styles = _a.styles,\n        theme = _a.theme,\n        progressHidden = _a.progressHidden,\n        _c = _a.onRenderProgress,\n        onRenderProgress = _c === void 0 ? this._onRenderProgress : _c;\n    var percentComplete = typeof this.props.percentComplete === 'number' ? Math.min(100, Math.max(0, this.props.percentComplete * 100)) : undefined;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      barHeight: barHeight,\n      indeterminate: percentComplete === undefined ? true : false\n    });\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, label ? React.createElement(\"div\", {\n      id: this._labelId,\n      className: classNames.itemName\n    }, label) : null, !progressHidden ? onRenderProgress(__assign(__assign({}, this.props), {\n      percentComplete: percentComplete\n    }), this._onRenderProgress) : null, description ? React.createElement(\"div\", {\n      id: this._descriptionId,\n      className: classNames.itemDescription\n    }, description) : null);\n  };\n\n  ProgressIndicatorBase.defaultProps = {\n    label: '',\n    description: '',\n    width: 180\n  };\n  return ProgressIndicatorBase;\n}(React.Component);\n\nexport { ProgressIndicatorBase };","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","getId","getClassNames","ZERO_THRESHOLD","__extends","props","_super","_this","ariaLabel","ariaValueText","barHeight","className","description","_b","label","title","styles","theme","percentComplete","Math","min","max","undefined","classNames","indeterminate","progressBarStyles","width","transition","ariaValueMin","ariaValueMax","ariaValueNow","floor","itemProgress","progressTrack","progressBar","style","role","_descriptionId","_labelId","id","ProgressIndicatorBase","progressHidden","_c","onRenderProgress","_onRenderProgress","root","itemName","itemDescription","Component"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/ProgressIndicator/ProgressIndicator.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, getId } from '../../Utilities';\nimport type {\n  IProgressIndicatorProps,\n  IProgressIndicatorStyleProps,\n  IProgressIndicatorStyles,\n} from './ProgressIndicator.types';\n\nconst getClassNames = classNamesFunction<IProgressIndicatorStyleProps, IProgressIndicatorStyles>();\n\n// if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\nconst ZERO_THRESHOLD = 0.01;\n\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\nexport class ProgressIndicatorBase extends React.Component<IProgressIndicatorProps, {}> {\n  public static defaultProps = {\n    label: '',\n    description: '',\n    width: 180,\n  };\n\n  private _labelId: string;\n  private _descriptionId: string;\n\n  constructor(props: IProgressIndicatorProps) {\n    super(props);\n\n    const id = getId('progress-indicator');\n    this._labelId = id + '-label';\n    this._descriptionId = id + '-description';\n  }\n\n  public render() {\n    const {\n      barHeight,\n      className,\n      // eslint-disable-next-line deprecation/deprecation\n      label = this.props.title, // Fall back to deprecated value.\n      description,\n      styles,\n      theme,\n      progressHidden,\n      onRenderProgress = this._onRenderProgress,\n    } = this.props;\n\n    const percentComplete =\n      typeof this.props.percentComplete === 'number'\n        ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n        : undefined;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      barHeight,\n      indeterminate: percentComplete === undefined ? true : false,\n    });\n\n    return (\n      <div className={classNames.root}>\n        {label ? (\n          <div id={this._labelId} className={classNames.itemName}>\n            {label}\n          </div>\n        ) : null}\n        {!progressHidden\n          ? onRenderProgress(\n              {\n                ...(this.props as IProgressIndicatorProps),\n                percentComplete: percentComplete,\n              },\n              this._onRenderProgress,\n            )\n          : null}\n        {description ? (\n          <div id={this._descriptionId} className={classNames.itemDescription}>\n            {description}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n\n  private _onRenderProgress = (props: IProgressIndicatorProps): JSX.Element => {\n    const {\n      ariaLabel,\n      ariaValueText,\n      barHeight,\n      className,\n      description,\n      // eslint-disable-next-line deprecation/deprecation\n      label = this.props.title,\n      styles,\n      theme,\n    } = this.props;\n\n    const percentComplete =\n      typeof this.props.percentComplete === 'number'\n        ? Math.min(100, Math.max(0, this.props.percentComplete * 100))\n        : undefined;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      barHeight,\n      indeterminate: percentComplete === undefined ? true : false,\n    });\n\n    const progressBarStyles = {\n      width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n      transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined,\n    };\n\n    const ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n    const ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n    const ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete!) : undefined;\n\n    return (\n      <div className={classNames.itemProgress}>\n        <div className={classNames.progressTrack} />\n        <div\n          className={classNames.progressBar}\n          style={progressBarStyles}\n          role=\"progressbar\"\n          aria-describedby={description ? this._descriptionId : undefined}\n          aria-label={ariaLabel}\n          aria-labelledby={label ? this._labelId : undefined}\n          aria-valuemin={ariaValueMin}\n          aria-valuemax={ariaValueMax}\n          aria-valuenow={ariaValueNow}\n          aria-valuetext={ariaValueText}\n        />\n      </div>\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}