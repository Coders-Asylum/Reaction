{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, classNamesFunction, format } from '@fluentui/utilities';\nimport { Icon } from '../../../Icon';\nimport { addMonths, compareDatePart, getMonthStart, getMonthEnd } from '@fluentui/date-time-utilities';\nimport { CalendarDayGrid } from '../../CalendarDayGrid/CalendarDayGrid';\nimport { useId } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nexport var CalendarDayBase = function CalendarDayBase(props) {\n  var dayGrid = React.useRef(null);\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      focus: function focus() {\n        var _a, _b;\n\n        (_b = (_a = dayGrid.current) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);\n      }\n    };\n  }, []);\n  var strings = props.strings,\n      navigatedDate = props.navigatedDate,\n      dateTimeFormatter = props.dateTimeFormatter,\n      styles = props.styles,\n      theme = props.theme,\n      className = props.className,\n      onHeaderSelect = props.onHeaderSelect,\n      showSixWeeksByDefault = props.showSixWeeksByDefault,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      restrictedDates = props.restrictedDates,\n      onNavigateDate = props.onNavigateDate,\n      showWeekNumbers = props.showWeekNumbers,\n      dateRangeType = props.dateRangeType,\n      animationDirection = props.animationDirection;\n  var monthAndYearId = useId();\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    headerIsClickable: !!onHeaderSelect,\n    showWeekNumbers: showWeekNumbers,\n    animationDirection: animationDirection\n  });\n  var monthAndYear = dateTimeFormatter.formatMonthYear(navigatedDate, strings);\n  var HeaderButtonComponentType = onHeaderSelect ? 'button' : 'div';\n  var headerAriaLabel = strings.yearPickerHeaderAriaLabel ? format(strings.yearPickerHeaderAriaLabel, monthAndYear) : monthAndYear;\n  return React.createElement(\"div\", {\n    className: classNames.root\n  }, React.createElement(\"div\", {\n    className: classNames.header\n  }, React.createElement(HeaderButtonComponentType // if this component rerenders when text changes, aria-live will not be announced, so make key consistent\n  , {\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\",\n    \"aria-label\": onHeaderSelect ? headerAriaLabel : undefined,\n    key: monthAndYear,\n    className: classNames.monthAndYear,\n    onClick: onHeaderSelect,\n    \"data-is-focusable\": !!onHeaderSelect,\n    tabIndex: onHeaderSelect ? 0 : -1,\n    onKeyDown: onButtonKeyDown(onHeaderSelect),\n    type: \"button\"\n  }, React.createElement(\"span\", {\n    id: monthAndYearId\n  }, monthAndYear)), React.createElement(CalendarDayNavigationButtons, __assign({}, props, {\n    classNames: classNames\n  }))), React.createElement(CalendarDayGrid, __assign({}, props, {\n    styles: styles,\n    componentRef: dayGrid,\n    strings: strings,\n    navigatedDate: navigatedDate,\n    weeksToShow: showSixWeeksByDefault ? 6 : undefined,\n    dateTimeFormatter: dateTimeFormatter,\n    minDate: minDate,\n    maxDate: maxDate,\n    restrictedDates: restrictedDates,\n    onNavigateDate: onNavigateDate,\n    labelledBy: monthAndYearId,\n    dateRangeType: dateRangeType\n  })));\n};\nCalendarDayBase.displayName = 'CalendarDayBase';\n\nvar CalendarDayNavigationButtons = function CalendarDayNavigationButtons(props) {\n  var _a, _b;\n\n  var minDate = props.minDate,\n      maxDate = props.maxDate,\n      navigatedDate = props.navigatedDate,\n      allFocusable = props.allFocusable,\n      strings = props.strings,\n      navigationIcons = props.navigationIcons,\n      showCloseButton = props.showCloseButton,\n      classNames = props.classNames,\n      onNavigateDate = props.onNavigateDate,\n      onDismiss = props.onDismiss;\n\n  var onSelectNextMonth = function onSelectNextMonth() {\n    onNavigateDate(addMonths(navigatedDate, 1), false);\n  };\n\n  var onSelectPrevMonth = function onSelectPrevMonth() {\n    onNavigateDate(addMonths(navigatedDate, -1), false);\n  };\n\n  var leftNavigationIcon = navigationIcons.leftNavigation;\n  var rightNavigationIcon = navigationIcons.rightNavigation;\n  var closeNavigationIcon = navigationIcons.closeIcon; // determine if previous/next months are in bounds\n\n  var prevMonthInBounds = minDate ? compareDatePart(minDate, getMonthStart(navigatedDate)) < 0 : true;\n  var nextMonthInBounds = maxDate ? compareDatePart(getMonthEnd(navigatedDate), maxDate) < 0 : true; // use aria-disabled instead of disabled so focus is not lost\n  // when a prev/next button becomes disabled after being clicked\n\n  return React.createElement(\"div\", {\n    className: classNames.monthComponents\n  }, React.createElement(\"button\", {\n    className: css(classNames.headerIconButton, (_a = {}, _a[classNames.disabledStyle] = !prevMonthInBounds, _a)),\n    tabIndex: prevMonthInBounds ? undefined : allFocusable ? 0 : -1,\n    \"aria-disabled\": !prevMonthInBounds,\n    onClick: prevMonthInBounds ? onSelectPrevMonth : undefined,\n    onKeyDown: prevMonthInBounds ? onButtonKeyDown(onSelectPrevMonth) : undefined,\n    title: strings.prevMonthAriaLabel ? strings.prevMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, -1).getMonth()] : undefined,\n    type: \"button\"\n  }, React.createElement(Icon, {\n    iconName: leftNavigationIcon\n  })), React.createElement(\"button\", {\n    className: css(classNames.headerIconButton, (_b = {}, _b[classNames.disabledStyle] = !nextMonthInBounds, _b)),\n    tabIndex: nextMonthInBounds ? undefined : allFocusable ? 0 : -1,\n    \"aria-disabled\": !nextMonthInBounds,\n    onClick: nextMonthInBounds ? onSelectNextMonth : undefined,\n    onKeyDown: nextMonthInBounds ? onButtonKeyDown(onSelectNextMonth) : undefined,\n    title: strings.nextMonthAriaLabel ? strings.nextMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, 1).getMonth()] : undefined,\n    type: \"button\"\n  }, React.createElement(Icon, {\n    iconName: rightNavigationIcon\n  })), showCloseButton && React.createElement(\"button\", {\n    className: css(classNames.headerIconButton),\n    onClick: onDismiss,\n    onKeyDown: onButtonKeyDown(onDismiss),\n    title: strings.closeButtonAriaLabel,\n    type: \"button\"\n  }, React.createElement(Icon, {\n    iconName: closeNavigationIcon\n  })));\n};\n\nCalendarDayNavigationButtons.displayName = 'CalendarDayNavigationButtons';\n\nvar onButtonKeyDown = function onButtonKeyDown(callback) {\n  return function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.enter:\n        callback === null || callback === void 0 ? void 0 : callback();\n        break;\n    }\n  };\n};","map":{"version":3,"mappings":"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","names":["React","KeyCodes","css","classNamesFunction","format","Icon","addMonths","compareDatePart","getMonthStart","getMonthEnd","CalendarDayGrid","useId","getClassNames","CalendarDayBase","dayGrid","useRef","useImperativeHandle","props","componentRef","focus","current","_a","_b","navigatedDate","dateTimeFormatter","styles","theme","className","onHeaderSelect","showSixWeeksByDefault","minDate","maxDate","restrictedDates","onNavigateDate","showWeekNumbers","dateRangeType","animationDirection","monthAndYearId","classNames","headerIsClickable","monthAndYear","formatMonthYear","strings","HeaderButtonComponentType","headerAriaLabel","yearPickerHeaderAriaLabel","root","header","undefined","key","onClick","tabIndex","onKeyDown","onButtonKeyDown","type","id","CalendarDayNavigationButtons","__assign","weeksToShow","labelledBy","displayName","allFocusable","navigationIcons","showCloseButton","onDismiss","onSelectNextMonth","onSelectPrevMonth","leftNavigationIcon","leftNavigation","rightNavigationIcon","rightNavigation","closeNavigationIcon","closeIcon","prevMonthInBounds","nextMonthInBounds","monthComponents","headerIconButton","disabledStyle","title","prevMonthAriaLabel","months","getMonth","iconName","nextMonthAriaLabel","closeButtonAriaLabel","callback","ev","which","enter"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/Calendar/src/components/Calendar/CalendarDay/CalendarDay.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { KeyCodes, css, classNamesFunction, format } from '@fluentui/utilities';\nimport { Icon } from '../../../Icon';\nimport { addMonths, compareDatePart, getMonthStart, getMonthEnd } from '@fluentui/date-time-utilities';\nimport { CalendarDayGrid } from '../../CalendarDayGrid/CalendarDayGrid';\nimport { useId } from '@fluentui/react-hooks';\nimport type { ICalendarDayProps, ICalendarDayStyleProps, ICalendarDayStyles } from './CalendarDay.types';\nimport type { IProcessedStyleSet } from '@fluentui/style-utilities';\nimport type { ICalendarDayGrid } from '../../CalendarDayGrid/CalendarDayGrid.types';\n\nconst getClassNames = classNamesFunction<ICalendarDayStyleProps, ICalendarDayStyles>();\n\nexport const CalendarDayBase: React.FunctionComponent<ICalendarDayProps> = props => {\n  const dayGrid = React.useRef<ICalendarDayGrid>(null);\n\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus() {\n        dayGrid.current?.focus?.();\n      },\n    }),\n    [],\n  );\n\n  const {\n    strings,\n    navigatedDate,\n    dateTimeFormatter,\n    styles,\n    theme,\n    className,\n    onHeaderSelect,\n    showSixWeeksByDefault,\n    minDate,\n    maxDate,\n    restrictedDates,\n    onNavigateDate,\n    showWeekNumbers,\n    dateRangeType,\n    animationDirection,\n  } = props;\n  const monthAndYearId = useId();\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    className: className,\n    headerIsClickable: !!onHeaderSelect,\n    showWeekNumbers: showWeekNumbers,\n    animationDirection: animationDirection,\n  });\n\n  const monthAndYear = dateTimeFormatter.formatMonthYear(navigatedDate, strings);\n  const HeaderButtonComponentType = onHeaderSelect ? 'button' : 'div';\n  const headerAriaLabel = strings.yearPickerHeaderAriaLabel\n    ? format(strings.yearPickerHeaderAriaLabel, monthAndYear)\n    : monthAndYear;\n\n  return (\n    <div className={classNames.root}>\n      <div className={classNames.header}>\n        <HeaderButtonComponentType\n          // if this component rerenders when text changes, aria-live will not be announced, so make key consistent\n          aria-live=\"polite\"\n          aria-atomic=\"true\"\n          aria-label={onHeaderSelect ? headerAriaLabel : undefined}\n          key={monthAndYear}\n          className={classNames.monthAndYear}\n          onClick={onHeaderSelect}\n          data-is-focusable={!!onHeaderSelect}\n          tabIndex={onHeaderSelect ? 0 : -1} // prevent focus if there's no action for the button\n          onKeyDown={onButtonKeyDown(onHeaderSelect)}\n          type=\"button\"\n        >\n          <span id={monthAndYearId}>{monthAndYear}</span>\n        </HeaderButtonComponentType>\n        <CalendarDayNavigationButtons {...props} classNames={classNames} />\n      </div>\n      <CalendarDayGrid\n        {...props}\n        styles={styles}\n        componentRef={dayGrid}\n        strings={strings}\n        navigatedDate={navigatedDate!}\n        weeksToShow={showSixWeeksByDefault ? 6 : undefined}\n        dateTimeFormatter={dateTimeFormatter!}\n        minDate={minDate}\n        maxDate={maxDate}\n        restrictedDates={restrictedDates}\n        onNavigateDate={onNavigateDate}\n        labelledBy={monthAndYearId}\n        dateRangeType={dateRangeType}\n      />\n    </div>\n  );\n};\nCalendarDayBase.displayName = 'CalendarDayBase';\n\ninterface ICalendarDayNavigationButtonsProps extends ICalendarDayProps {\n  classNames: IProcessedStyleSet<ICalendarDayStyles>;\n}\n\nconst CalendarDayNavigationButtons = (props: ICalendarDayNavigationButtonsProps): JSX.Element => {\n  const {\n    minDate,\n    maxDate,\n    navigatedDate,\n    allFocusable,\n    strings,\n    navigationIcons,\n    showCloseButton,\n    classNames,\n    onNavigateDate,\n    onDismiss,\n  } = props;\n\n  const onSelectNextMonth = (): void => {\n    onNavigateDate(addMonths(navigatedDate, 1), false);\n  };\n\n  const onSelectPrevMonth = (): void => {\n    onNavigateDate(addMonths(navigatedDate, -1), false);\n  };\n  const leftNavigationIcon = navigationIcons.leftNavigation;\n  const rightNavigationIcon = navigationIcons.rightNavigation;\n  const closeNavigationIcon = navigationIcons.closeIcon;\n\n  // determine if previous/next months are in bounds\n  const prevMonthInBounds = minDate ? compareDatePart(minDate, getMonthStart(navigatedDate)) < 0 : true;\n  const nextMonthInBounds = maxDate ? compareDatePart(getMonthEnd(navigatedDate), maxDate) < 0 : true;\n\n  // use aria-disabled instead of disabled so focus is not lost\n  // when a prev/next button becomes disabled after being clicked\n  return (\n    <div className={classNames.monthComponents}>\n      <button\n        className={css(classNames.headerIconButton, {\n          [classNames.disabledStyle]: !prevMonthInBounds,\n        })}\n        tabIndex={prevMonthInBounds ? undefined : allFocusable ? 0 : -1}\n        aria-disabled={!prevMonthInBounds}\n        onClick={prevMonthInBounds ? onSelectPrevMonth : undefined}\n        onKeyDown={prevMonthInBounds ? onButtonKeyDown(onSelectPrevMonth) : undefined}\n        title={\n          strings.prevMonthAriaLabel\n            ? strings.prevMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, -1).getMonth()]\n            : undefined\n        }\n        type=\"button\"\n      >\n        <Icon iconName={leftNavigationIcon} />\n      </button>\n      <button\n        className={css(classNames.headerIconButton, {\n          [classNames.disabledStyle]: !nextMonthInBounds,\n        })}\n        tabIndex={nextMonthInBounds ? undefined : allFocusable ? 0 : -1}\n        aria-disabled={!nextMonthInBounds}\n        onClick={nextMonthInBounds ? onSelectNextMonth : undefined}\n        onKeyDown={nextMonthInBounds ? onButtonKeyDown(onSelectNextMonth) : undefined}\n        title={\n          strings.nextMonthAriaLabel\n            ? strings.nextMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, 1).getMonth()]\n            : undefined\n        }\n        type=\"button\"\n      >\n        <Icon iconName={rightNavigationIcon} />\n      </button>\n      {showCloseButton && (\n        <button\n          className={css(classNames.headerIconButton)}\n          onClick={onDismiss}\n          onKeyDown={onButtonKeyDown(onDismiss)}\n          title={strings.closeButtonAriaLabel}\n          type=\"button\"\n        >\n          <Icon iconName={closeNavigationIcon} />\n        </button>\n      )}\n    </div>\n  );\n};\nCalendarDayNavigationButtons.displayName = 'CalendarDayNavigationButtons';\n\nconst onButtonKeyDown = (\n  callback?: () => void,\n): ((ev: React.KeyboardEvent<HTMLButtonElement | HTMLDivElement>) => void) => (\n  ev: React.KeyboardEvent<HTMLButtonElement>,\n) => {\n  // eslint-disable-next-line deprecation/deprecation\n  switch (ev.which) {\n    case KeyCodes.enter:\n      callback?.();\n      break;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}