{"ast":null,"code":"import { useTheme } from './useTheme';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport { mergeStylesRenderer } from './styleRenderers/mergeStylesRenderer';\n\nvar graphGet = function graphGet(graphNode, path) {\n  for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n    var key = path_1[_i];\n    graphNode = graphNode.get(key);\n\n    if (!graphNode) {\n      return;\n    }\n  }\n\n  return graphNode;\n};\n\nvar graphSet = function graphSet(graphNode, path, value) {\n  for (var i = 0; i < path.length - 1; i++) {\n    var key = path[i];\n    var current = graphNode.get(key);\n\n    if (!current) {\n      current = new Map();\n      graphNode.set(key, current);\n    }\n\n    graphNode = current;\n  }\n\n  graphNode.set(path[path.length - 1], value);\n};\n/**\n * Registers a css object, optionally as a function of the theme.\n *\n * @param styleOrFunction - Either a css javascript object, or a function which takes in `ITheme`\n * and returns a css javascript object.\n *\n * @deprecated Use `mergeStyles` instead for v8 related code. We will be using a new implementation of `makeStyles` in\n * future versions of the library.\n */\n\n\nexport function makeStyles(styleOrFunction) {\n  // Create graph of inputs to map to output.\n  var graph = new Map(); // eslint-disable-next-line deprecation/deprecation\n\n  return function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var theme = options.theme;\n    var win = useWindow();\n    var contextualTheme = useTheme();\n    theme = theme || contextualTheme;\n    var renderer = mergeStylesRenderer;\n    var id = renderer.getId();\n    var isStyleFunction = typeof styleOrFunction === 'function';\n    var path = isStyleFunction ? [id, win, theme] : [id, win];\n    var value = graphGet(graph, path);\n\n    if (!value) {\n      var styles = isStyleFunction ? styleOrFunction(theme) : styleOrFunction;\n      value = mergeStylesRenderer.renderStyles(styles, {\n        targetWindow: win,\n        rtl: !!theme.rtl\n      });\n      graphSet(graph, path, value);\n    }\n\n    return value;\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA,SAASC,SAAT,QAA0B,iCAA1B;AACA,SAASC,mBAAT,QAAoC,sCAApC;;AAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAA2BC,IAA3B,EAAsC;AACrD,OAAkB,yBAAlB,EAAkBC,kBAAlB,EAAkBA,IAAlB,EAAwB;AAAnB,QAAMC,GAAG,aAAT;AACHH,aAAS,GAAGA,SAAS,CAACI,GAAV,CAAcD,GAAd,CAAZ;;AAEA,QAAI,CAACH,SAAL,EAAgB;AACd;AACD;AACF;;AAED,SAAOA,SAAP;AACD,CAVD;;AAYA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CAACL,SAAD,EAA2BC,IAA3B,EAAwCK,KAAxC,EAAkD;AACjE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACO,MAAL,GAAc,CAAlC,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,QAAMJ,GAAG,GAAGF,IAAI,CAACM,CAAD,CAAhB;AAEA,QAAIE,OAAO,GAAGT,SAAS,CAACI,GAAV,CAAcD,GAAd,CAAd;;AAEA,QAAI,CAACM,OAAL,EAAc;AACZA,aAAO,GAAG,IAAIC,GAAJ,EAAV;AAEAV,eAAS,CAACW,GAAV,CAAcR,GAAd,EAAmBM,OAAnB;AACD;;AAEDT,aAAS,GAAGS,OAAZ;AACD;;AAEDT,WAAS,CAACW,GAAV,CAAcV,IAAI,CAACA,IAAI,CAACO,MAAL,GAAc,CAAf,CAAlB,EAAqCF,KAArC;AACD,CAhBD;AA0BA;;;;;;;;;;;AASA,OAAM,SAAUM,UAAV,CACJC,eADI,EACsD;AAG1D;AACA,MAAMC,KAAK,GAAG,IAAIJ,GAAJ,EAAd,CAJ0D,CAM1D;;AACA,SAAO,UAACK,OAAD,EAA+B;AAA9B;AAAAA;AAA8B;;AAC9B,aAAK,GAAKA,OAAO,MAAjB;AACN,QAAMC,GAAG,GAAGnB,SAAS,EAArB;AACA,QAAMoB,eAAe,GAAGrB,QAAQ,EAAhC;AAEAsB,SAAK,GAAGA,KAAK,IAAID,eAAjB;AACA,QAAME,QAAQ,GAAGrB,mBAAjB;AAEA,QAAMsB,EAAE,GAAGD,QAAQ,CAACE,KAAT,EAAX;AACA,QAAMC,eAAe,GAAG,OAAOT,eAAP,KAA2B,UAAnD;AACA,QAAMZ,IAAI,GAAGqB,eAAe,GAAG,CAACF,EAAD,EAAKJ,GAAL,EAAUE,KAAV,CAAH,GAAsB,CAACE,EAAD,EAAKJ,GAAL,CAAlD;AACA,QAAIV,KAAK,GAAGP,QAAQ,CAACe,KAAD,EAAQb,IAAR,CAApB;;AAEA,QAAI,CAACK,KAAL,EAAY;AACV,UAAMiB,MAAM,GAAGD,eAAe,GAAIT,eAA+C,CAACK,KAAD,CAAnD,GAA8DL,eAA5F;AAEAP,WAAK,GAAGR,mBAAmB,CAAC0B,YAApB,CAAiCD,MAAjC,EAAyC;AAAEE,oBAAY,EAAET,GAAhB;AAAqBU,WAAG,EAAE,CAAC,CAACR,KAAM,CAACQ;AAAnC,OAAzC,CAAR;AACArB,cAAQ,CAACS,KAAD,EAAQb,IAAR,EAAcK,KAAd,CAAR;AACD;;AAED,WAAOA,KAAP;AACD,GArBD;AAsBD","names":["useTheme","useWindow","mergeStylesRenderer","graphGet","graphNode","path","_i","key","get","graphSet","value","i","length","current","Map","set","makeStyles","styleOrFunction","graph","options","win","contextualTheme","theme","renderer","id","getId","isStyleFunction","styles","renderStyles","targetWindow","rtl"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/utilities/src/utilities/ThemeProvider/makeStyles.ts"],"sourcesContent":["import { useTheme } from './useTheme';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport { mergeStylesRenderer } from './styleRenderers/mergeStylesRenderer';\nimport type { IStyle } from '@fluentui/style-utilities';\nimport type { Theme } from '@fluentui/theme';\n\nconst graphGet = (graphNode: Map<any, any>, path: any[]): any | undefined => {\n  for (const key of path) {\n    graphNode = graphNode.get(key);\n\n    if (!graphNode) {\n      return;\n    }\n  }\n\n  return graphNode;\n};\n\nconst graphSet = (graphNode: Map<any, any>, path: any[], value: any) => {\n  for (let i = 0; i < path.length - 1; i++) {\n    const key = path[i];\n\n    let current = graphNode.get(key);\n\n    if (!current) {\n      current = new Map();\n\n      graphNode.set(key, current);\n    }\n\n    graphNode = current;\n  }\n\n  graphNode.set(path[path.length - 1], value);\n};\n\n/**\n * Options that can be provided to the hook generated by `makeStyles`.\n * @deprecated Only used in deprecated `makeStyles` implementation below.\n */\nexport type UseStylesOptions = {\n  theme?: Theme;\n};\n\n/**\n * Registers a css object, optionally as a function of the theme.\n *\n * @param styleOrFunction - Either a css javascript object, or a function which takes in `ITheme`\n * and returns a css javascript object.\n *\n * @deprecated Use `mergeStyles` instead for v8 related code. We will be using a new implementation of `makeStyles` in\n * future versions of the library.\n */\nexport function makeStyles<TStyleSet extends { [key in keyof TStyleSet]: IStyle } = { [key: string]: IStyle }>(\n  styleOrFunction: TStyleSet | ((theme: Theme) => TStyleSet),\n  // eslint-disable-next-line deprecation/deprecation\n): (options?: UseStylesOptions) => { [key in keyof TStyleSet]: string } {\n  // Create graph of inputs to map to output.\n  const graph = new Map();\n\n  // eslint-disable-next-line deprecation/deprecation\n  return (options: UseStylesOptions = {}) => {\n    let { theme } = options;\n    const win = useWindow();\n    const contextualTheme = useTheme();\n\n    theme = theme || contextualTheme;\n    const renderer = mergeStylesRenderer;\n\n    const id = renderer.getId();\n    const isStyleFunction = typeof styleOrFunction === 'function';\n    const path = isStyleFunction ? [id, win, theme] : [id, win];\n    let value = graphGet(graph, path);\n\n    if (!value) {\n      const styles = isStyleFunction ? (styleOrFunction as (theme: Theme) => TStyleSet)(theme!) : styleOrFunction;\n\n      value = mergeStylesRenderer.renderStyles(styles, { targetWindow: win, rtl: !!theme!.rtl });\n      graphSet(graph, path, value);\n    }\n\n    return value;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}