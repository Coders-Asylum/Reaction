{"ast":null,"code":"import { mergeThemes } from '@fluentui/theme';\nimport * as React from 'react';\nimport { useTheme } from './useTheme';\nimport { getId } from '@fluentui/utilities';\nvar themeToIdMap = new Map();\n\nvar getThemeId = function getThemeId() {\n  var themes = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    themes[_i] = arguments[_i];\n  }\n\n  var ids = [];\n\n  for (var _a = 0, themes_1 = themes; _a < themes_1.length; _a++) {\n    var theme = themes_1[_a];\n\n    if (theme) {\n      var id = theme.id || themeToIdMap.get(theme);\n\n      if (!id) {\n        id = getId('');\n        themeToIdMap.set(theme, id);\n      }\n\n      ids.push(id);\n    }\n  }\n\n  return ids.join('-');\n};\n\nexport var useThemeProviderState = function useThemeProviderState(draftState) {\n  var userTheme = draftState.theme; // Pull contextual theme.\n\n  var parentTheme = useTheme(); // Update the incoming theme with a memoized version of the merged theme.\n\n  var theme = draftState.theme = React.useMemo(function () {\n    var mergedTheme = mergeThemes(parentTheme, userTheme);\n    mergedTheme.id = getThemeId(parentTheme, userTheme);\n    return mergedTheme;\n  }, [parentTheme, userTheme]);\n  draftState.customizerContext = React.useMemo(function () {\n    return {\n      customizations: {\n        inCustomizerContext: true,\n        settings: {\n          theme: theme\n        },\n        scopedSettings: theme.components || {}\n      }\n    };\n  }, [theme]);\n\n  if (draftState.theme.rtl !== parentTheme.rtl) {\n    draftState.dir = draftState.theme.rtl ? 'rtl' : 'ltr';\n  }\n};","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,QAA4B,iBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AAKA,IAAMC,YAAY,GAAG,IAAIC,GAAJ,EAArB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAC;;OAAA,yCAA+C;AAA/CC;;;AAClB,MAAMC,GAAG,GAAa,EAAtB;;AAEA,OAAoB,6BAApB,EAAoBC,oBAApB,EAAoBA,IAApB,EAA4B;AAAvB,QAAMC,KAAK,eAAX;;AACH,QAAIA,KAAJ,EAAW;AACT,UAAIC,EAAE,GAAID,KAAe,CAACC,EAAhB,IAAsBP,YAAY,CAACQ,GAAb,CAAiBF,KAAjB,CAAhC;;AAEA,UAAI,CAACC,EAAL,EAAS;AACPA,UAAE,GAAGR,KAAK,CAAC,EAAD,CAAV;AACAC,oBAAY,CAACS,GAAb,CAAiBH,KAAjB,EAAwBC,EAAxB;AACD;;AACDH,SAAG,CAACM,IAAJ,CAASH,EAAT;AACD;AACF;;AAED,SAAOH,GAAG,CAACO,IAAJ,CAAS,GAAT,CAAP;AACD,CAhBD;;AAkBA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,UAAD,EAA+B;AAClE,MAAMC,SAAS,GAAiBD,UAAU,CAACP,KAA3C,CADkE,CAGlE;;AACA,MAAMS,WAAW,GAAGjB,QAAQ,EAA5B,CAJkE,CAMlE;;AACA,MAAMQ,KAAK,GAAIO,UAAU,CAACP,KAAX,GAAmBT,KAAK,CAACmB,OAAN,CAAqB;AACrD,QAAMC,WAAW,GAAUrB,WAAW,CAACmB,WAAD,EAAcD,SAAd,CAAtC;AAEAG,eAAW,CAACV,EAAZ,GAAiBL,UAAU,CAACa,WAAD,EAAcD,SAAd,CAA3B;AAEA,WAAOG,WAAP;AACD,GANiC,EAM/B,CAACF,WAAD,EAAcD,SAAd,CAN+B,CAAlC;AAQAD,YAAU,CAACK,iBAAX,GAA+BrB,KAAK,CAACmB,OAAN,CAC7B;AAAM,WAAC;AACLG,oBAAc,EAAE;AACdC,2BAAmB,EAAE,IADP;AAEdC,gBAAQ,EAAE;AAAEf,eAAK;AAAP,SAFI;AAGdgB,sBAAc,EAAEhB,KAAK,CAACiB,UAAN,IAAoB;AAHtB;AADX,KAAD;AAMJ,GAP2B,EAQ7B,CAACjB,KAAD,CAR6B,CAA/B;;AAWA,MAAIO,UAAU,CAACP,KAAX,CAAiBkB,GAAjB,KAAyBT,WAAW,CAACS,GAAzC,EAA8C;AAC5CX,cAAU,CAACY,GAAX,GAAiBZ,UAAU,CAACP,KAAX,CAAiBkB,GAAjB,GAAuB,KAAvB,GAA+B,KAAhD;AACD;AACF,CA7BM","names":["mergeThemes","React","useTheme","getId","themeToIdMap","Map","getThemeId","themes","ids","_a","theme","id","get","set","push","join","useThemeProviderState","draftState","userTheme","parentTheme","useMemo","mergedTheme","customizerContext","customizations","inCustomizerContext","settings","scopedSettings","components","rtl","dir"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/utilities/src/utilities/ThemeProvider/useThemeProviderState.tsx"],"sourcesContent":["import { mergeThemes } from '@fluentui/theme';\nimport * as React from 'react';\nimport { useTheme } from './useTheme';\nimport { getId } from '@fluentui/utilities';\nimport type { PartialTheme, Theme } from '@fluentui/theme';\nimport type { ThemeProviderState } from './ThemeProvider.types';\nimport type { ICustomizerContext } from '@fluentui/utilities';\n\nconst themeToIdMap = new Map<Object, string>();\n\nconst getThemeId = (...themes: (Theme | PartialTheme | undefined)[]) => {\n  const ids: string[] = [];\n\n  for (const theme of themes) {\n    if (theme) {\n      let id = (theme as Theme).id || themeToIdMap.get(theme);\n\n      if (!id) {\n        id = getId('');\n        themeToIdMap.set(theme, id);\n      }\n      ids.push(id);\n    }\n  }\n\n  return ids.join('-');\n};\n\nexport const useThemeProviderState = (draftState: ThemeProviderState) => {\n  const userTheme: PartialTheme = draftState.theme;\n\n  // Pull contextual theme.\n  const parentTheme = useTheme();\n\n  // Update the incoming theme with a memoized version of the merged theme.\n  const theme = (draftState.theme = React.useMemo<Theme>(() => {\n    const mergedTheme: Theme = mergeThemes(parentTheme, userTheme);\n\n    mergedTheme.id = getThemeId(parentTheme, userTheme);\n\n    return mergedTheme;\n  }, [parentTheme, userTheme]));\n\n  draftState.customizerContext = React.useMemo<ICustomizerContext>(\n    () => ({\n      customizations: {\n        inCustomizerContext: true,\n        settings: { theme },\n        scopedSettings: theme.components || {},\n      },\n    }),\n    [theme],\n  );\n\n  if (draftState.theme.rtl !== parentTheme.rtl) {\n    draftState.dir = draftState.theme.rtl ? 'rtl' : 'ltr';\n  }\n};\n"]},"metadata":{},"sourceType":"module"}