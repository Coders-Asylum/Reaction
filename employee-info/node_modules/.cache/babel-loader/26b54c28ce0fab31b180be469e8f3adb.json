{"ast":null,"code":"var _a, _b;\n\nimport { __assign } from \"tslib\";\nimport { FontWeights, concatStyleSets, getFocusStyle, HighContrastSelector, getPlaceholderStyles, hiddenContentStyle, getInputFocusStyle, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nvar ComboBoxHeight = 32;\nvar ComboBoxLineHeight = 30;\nvar ComboBoxCaretDownWidth = 32;\nvar ComboBoxOptionHeight = 36;\nvar getDisabledStyles = memoizeFunction(function (theme) {\n  var _a;\n\n  var semanticColors = theme.semanticColors;\n  return {\n    backgroundColor: semanticColors.disabledBackground,\n    color: semanticColors.disabledText,\n    cursor: 'default',\n    selectors: (_a = {\n      ':after': {\n        borderColor: semanticColors.disabledBackground\n      }\n    }, _a[HighContrastSelector] = {\n      color: 'GrayText',\n      selectors: {\n        ':after': {\n          borderColor: 'GrayText'\n        }\n      }\n    }, _a)\n  };\n});\nvar listOptionHighContrastStyles = {\n  selectors: (_a = {}, _a[HighContrastSelector] = __assign({\n    backgroundColor: 'Highlight',\n    borderColor: 'Highlight',\n    color: 'HighlightText'\n  }, getHighContrastNoAdjustStyle()), _a)\n};\nvar inputHighContrastStyles = {\n  selectors: (_b = {}, _b[HighContrastSelector] = __assign({\n    color: 'WindowText',\n    backgroundColor: 'Window'\n  }, getHighContrastNoAdjustStyle()), _b)\n};\nexport var getOptionStyles = memoizeFunction(function (theme, customStylesForAllOptions, customOptionStylesForCurrentOption, isPending, isHidden, isSelected) {\n  var _a;\n\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors;\n  var option = {\n    textHoveredColor: semanticColors.menuItemTextHovered,\n    textSelectedColor: palette.neutralDark,\n    textDisabledColor: semanticColors.disabledText,\n    backgroundHoveredColor: semanticColors.menuItemBackgroundHovered,\n    backgroundPressedColor: semanticColors.menuItemBackgroundPressed\n  };\n  var optionStyles = {\n    root: [theme.fonts.medium, {\n      backgroundColor: isPending ? option.backgroundHoveredColor : 'transparent',\n      boxSizing: 'border-box',\n      cursor: 'pointer',\n      display: isHidden ? 'none' : 'block',\n      width: '100%',\n      height: 'auto',\n      minHeight: ComboBoxOptionHeight,\n      lineHeight: '20px',\n      padding: '0 8px',\n      position: 'relative',\n      borderWidth: '1px',\n      borderStyle: 'solid',\n      borderColor: 'transparent',\n      borderRadius: 0,\n      wordWrap: 'break-word',\n      overflowWrap: 'break-word',\n      textAlign: 'left',\n      selectors: __assign(__assign((_a = {}, _a[HighContrastSelector] = {\n        border: 'none',\n        borderColor: 'Background'\n      }, _a), !isHidden && {\n        '&.ms-Checkbox': {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }), {\n        '&.ms-Button--command:hover:active': {\n          backgroundColor: option.backgroundPressedColor\n        },\n        '.ms-Checkbox-label': {\n          width: '100%'\n        }\n      })\n    }, isSelected ? [{\n      backgroundColor: 'transparent',\n      color: option.textSelectedColor,\n      selectors: {\n        ':hover': [{\n          backgroundColor: option.backgroundHoveredColor\n        }, listOptionHighContrastStyles]\n      }\n    }, getFocusStyle(theme, {\n      inset: -1,\n      isFocusedOnly: false\n    }), listOptionHighContrastStyles] : []],\n    rootHovered: {\n      backgroundColor: option.backgroundHoveredColor,\n      color: option.textHoveredColor\n    },\n    rootFocused: {\n      backgroundColor: option.backgroundHoveredColor\n    },\n    rootDisabled: {\n      color: option.textDisabledColor,\n      cursor: 'default'\n    },\n    optionText: {\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      minWidth: '0px',\n      maxWidth: '100%',\n      wordWrap: 'break-word',\n      overflowWrap: 'break-word',\n      display: 'inline-block'\n    },\n    optionTextWrapper: {\n      maxWidth: '100%',\n      display: 'flex',\n      alignItems: 'center'\n    }\n  };\n  return concatStyleSets(optionStyles, customStylesForAllOptions, customOptionStylesForCurrentOption);\n});\nexport var getCaretDownButtonStyles = memoizeFunction(function (theme, customStyles) {\n  var _a, _b;\n\n  var semanticColors = theme.semanticColors,\n      fonts = theme.fonts;\n  var caret = {\n    buttonTextColor: semanticColors.bodySubtext,\n    buttonTextHoveredCheckedColor: semanticColors.buttonTextChecked,\n    buttonBackgroundHoveredColor: semanticColors.listItemBackgroundHovered,\n    buttonBackgroundCheckedColor: semanticColors.listItemBackgroundChecked,\n    buttonBackgroundCheckedHoveredColor: semanticColors.listItemBackgroundCheckedHovered\n  };\n  var buttonHighContrastStyles = {\n    selectors: (_a = {}, _a[HighContrastSelector] = __assign({\n      backgroundColor: 'Highlight',\n      borderColor: 'Highlight',\n      color: 'HighlightText'\n    }, getHighContrastNoAdjustStyle()), _a)\n  };\n  var styles = {\n    root: {\n      color: caret.buttonTextColor,\n      fontSize: fonts.small.fontSize,\n      position: 'absolute',\n      top: 0,\n      height: '100%',\n      lineHeight: ComboBoxLineHeight,\n      width: ComboBoxCaretDownWidth,\n      textAlign: 'center',\n      cursor: 'default',\n      selectors: (_b = {}, _b[HighContrastSelector] = __assign({\n        backgroundColor: 'ButtonFace',\n        borderColor: 'ButtonText',\n        color: 'ButtonText'\n      }, getHighContrastNoAdjustStyle()), _b)\n    },\n    icon: {\n      fontSize: fonts.small.fontSize\n    },\n    rootHovered: [{\n      backgroundColor: caret.buttonBackgroundHoveredColor,\n      color: caret.buttonTextHoveredCheckedColor,\n      cursor: 'pointer'\n    }, buttonHighContrastStyles],\n    rootPressed: [{\n      backgroundColor: caret.buttonBackgroundCheckedColor,\n      color: caret.buttonTextHoveredCheckedColor\n    }, buttonHighContrastStyles],\n    rootChecked: [{\n      backgroundColor: caret.buttonBackgroundCheckedColor,\n      color: caret.buttonTextHoveredCheckedColor\n    }, buttonHighContrastStyles],\n    rootCheckedHovered: [{\n      backgroundColor: caret.buttonBackgroundCheckedHoveredColor,\n      color: caret.buttonTextHoveredCheckedColor\n    }, buttonHighContrastStyles],\n    rootDisabled: [getDisabledStyles(theme), {\n      position: 'absolute'\n    }]\n  };\n  return concatStyleSets(styles, customStyles);\n});\nexport var getStyles = memoizeFunction(function (theme, customStyles, comboBoxOptionWidth) {\n  var _a, _b, _c, _d, _e, _f;\n\n  var semanticColors = theme.semanticColors,\n      fonts = theme.fonts,\n      effects = theme.effects;\n  var root = {\n    textColor: semanticColors.inputText,\n    borderColor: semanticColors.inputBorder,\n    borderHoveredColor: semanticColors.inputBorderHovered,\n    borderPressedColor: semanticColors.inputFocusBorderAlt,\n    borderFocusedColor: semanticColors.inputFocusBorderAlt,\n    backgroundColor: semanticColors.inputBackground,\n    erroredColor: semanticColors.errorText\n  };\n  var option = {\n    headerTextColor: semanticColors.menuHeader,\n    dividerBorderColor: semanticColors.bodyDivider\n  }; // placeholder style variables\n\n  var placeholderHighContrastStyles = {\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  };\n  var placeholderStyles = [{\n    color: semanticColors.inputPlaceholderText\n  }, placeholderHighContrastStyles];\n  var placeholderStylesHovered = [{\n    color: semanticColors.inputTextHovered\n  }, placeholderHighContrastStyles];\n  var disabledPlaceholderStyles = [{\n    color: semanticColors.disabledText\n  }, placeholderHighContrastStyles];\n\n  var ComboBoxRootHighContrastFocused = __assign(__assign({\n    color: 'HighlightText',\n    backgroundColor: 'Window'\n  }, getHighContrastNoAdjustStyle()), {\n    selectors: {\n      ':after': {\n        borderColor: 'Highlight'\n      }\n    }\n  });\n\n  var focusBorderStyles = getInputFocusStyle(root.borderPressedColor, effects.roundedCorner2, 'border', 0);\n  var styles = {\n    container: {},\n    label: {},\n    labelDisabled: {},\n    root: [theme.fonts.medium, {\n      boxShadow: 'none',\n      marginLeft: '0',\n      paddingRight: ComboBoxCaretDownWidth,\n      paddingLeft: 9,\n      color: root.textColor,\n      position: 'relative',\n      outline: '0',\n      userSelect: 'none',\n      backgroundColor: root.backgroundColor,\n      cursor: 'text',\n      display: 'block',\n      height: ComboBoxHeight,\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      boxSizing: 'border-box',\n      selectors: {\n        '.ms-Label': {\n          display: 'inline-block',\n          marginBottom: '8px'\n        },\n        '&.is-open': {\n          selectors: (_b = {}, _b[HighContrastSelector] = ComboBoxRootHighContrastFocused, _b)\n        },\n        // setting border using pseudo-element here in order to\n        // prevent chevron button to overlap ComboBox border under certain resolutions\n        ':after': {\n          pointerEvents: 'none',\n          content: \"''\",\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: root.borderColor,\n          borderRadius: effects.roundedCorner2\n        }\n      }\n    }],\n    rootHovered: {\n      selectors: (_c = {\n        ':after': {\n          borderColor: root.borderHoveredColor\n        },\n        '.ms-ComboBox-Input': [{\n          color: semanticColors.inputTextHovered\n        }, getPlaceholderStyles(placeholderStylesHovered), inputHighContrastStyles]\n      }, _c[HighContrastSelector] = __assign(__assign({\n        color: 'HighlightText',\n        backgroundColor: 'Window'\n      }, getHighContrastNoAdjustStyle()), {\n        selectors: {\n          ':after': {\n            borderColor: 'Highlight'\n          }\n        }\n      }), _c)\n    },\n    rootPressed: [{\n      position: 'relative',\n      selectors: (_d = {}, _d[HighContrastSelector] = ComboBoxRootHighContrastFocused, _d)\n    }],\n    rootFocused: [{\n      selectors: (_e = {\n        '.ms-ComboBox-Input': [{\n          color: semanticColors.inputTextHovered\n        }, inputHighContrastStyles]\n      }, _e[HighContrastSelector] = ComboBoxRootHighContrastFocused, _e)\n    }, focusBorderStyles],\n    rootDisabled: getDisabledStyles(theme),\n    rootError: {\n      selectors: {\n        ':after': {\n          borderColor: root.erroredColor\n        },\n        ':hover:after': {\n          borderColor: semanticColors.inputBorderHovered\n        }\n      }\n    },\n    rootDisallowFreeForm: {},\n    input: [getPlaceholderStyles(placeholderStyles), {\n      backgroundColor: root.backgroundColor,\n      color: root.textColor,\n      boxSizing: 'border-box',\n      width: '100%',\n      height: '100%',\n      borderStyle: 'none',\n      outline: 'none',\n      font: 'inherit',\n      textOverflow: 'ellipsis',\n      padding: '0',\n      selectors: {\n        '::-ms-clear': {\n          display: 'none'\n        }\n      }\n    }, inputHighContrastStyles],\n    inputDisabled: [getDisabledStyles(theme), getPlaceholderStyles(disabledPlaceholderStyles)],\n    errorMessage: [theme.fonts.small, {\n      color: root.erroredColor,\n      marginTop: '5px'\n    }],\n    callout: {\n      boxShadow: effects.elevation8\n    },\n    optionsContainerWrapper: {\n      width: comboBoxOptionWidth\n    },\n    optionsContainer: {\n      display: 'block'\n    },\n    screenReaderText: hiddenContentStyle,\n    header: [fonts.medium, {\n      fontWeight: FontWeights.semibold,\n      color: option.headerTextColor,\n      backgroundColor: 'none',\n      borderStyle: 'none',\n      height: ComboBoxOptionHeight,\n      lineHeight: ComboBoxOptionHeight,\n      cursor: 'default',\n      padding: '0 8px',\n      userSelect: 'none',\n      textAlign: 'left',\n      selectors: (_f = {}, _f[HighContrastSelector] = __assign({\n        color: 'GrayText'\n      }, getHighContrastNoAdjustStyle()), _f)\n    }],\n    divider: {\n      height: 1,\n      backgroundColor: option.dividerBorderColor\n    }\n  };\n  return concatStyleSets(styles, customStyles);\n});","map":{"version":3,"mappings":"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","names":["FontWeights","concatStyleSets","getFocusStyle","HighContrastSelector","getPlaceholderStyles","hiddenContentStyle","getInputFocusStyle","getHighContrastNoAdjustStyle","memoizeFunction","ComboBoxHeight","ComboBoxLineHeight","ComboBoxCaretDownWidth","ComboBoxOptionHeight","getDisabledStyles","theme","backgroundColor","semanticColors","disabledBackground","color","disabledText","cursor","selectors","borderColor","_a","listOptionHighContrastStyles","__assign","inputHighContrastStyles","_b","getOptionStyles","customStylesForAllOptions","customOptionStylesForCurrentOption","isPending","isHidden","isSelected","option","textHoveredColor","menuItemTextHovered","textSelectedColor","palette","neutralDark","textDisabledColor","backgroundHoveredColor","menuItemBackgroundHovered","backgroundPressedColor","menuItemBackgroundPressed","optionStyles","root","fonts","medium","boxSizing","display","width","height","minHeight","lineHeight","padding","position","borderWidth","borderStyle","borderRadius","wordWrap","overflowWrap","textAlign","border","alignItems","inset","isFocusedOnly","rootHovered","rootFocused","rootDisabled","optionText","overflow","whiteSpace","textOverflow","minWidth","maxWidth","optionTextWrapper","getCaretDownButtonStyles","customStyles","caret","buttonTextColor","bodySubtext","buttonTextHoveredCheckedColor","buttonTextChecked","buttonBackgroundHoveredColor","listItemBackgroundHovered","buttonBackgroundCheckedColor","listItemBackgroundChecked","buttonBackgroundCheckedHoveredColor","listItemBackgroundCheckedHovered","buttonHighContrastStyles","styles","fontSize","small","top","icon","rootPressed","rootChecked","rootCheckedHovered","getStyles","comboBoxOptionWidth","effects","textColor","inputText","inputBorder","borderHoveredColor","inputBorderHovered","borderPressedColor","inputFocusBorderAlt","borderFocusedColor","inputBackground","erroredColor","errorText","headerTextColor","menuHeader","dividerBorderColor","bodyDivider","placeholderHighContrastStyles","placeholderStyles","inputPlaceholderText","placeholderStylesHovered","inputTextHovered","disabledPlaceholderStyles","ComboBoxRootHighContrastFocused","focusBorderStyles","roundedCorner2","container","label","labelDisabled","boxShadow","marginLeft","paddingRight","paddingLeft","outline","userSelect","marginBottom","pointerEvents","content","left","bottom","right","_c","_d","_e","rootError","rootDisallowFreeForm","input","font","inputDisabled","errorMessage","marginTop","callout","elevation8","optionsContainerWrapper","optionsContainer","screenReaderText","header","fontWeight","semibold","_f","divider"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/ComboBox/ComboBox.styles.ts"],"sourcesContent":["import {\n  FontWeights,\n  concatStyleSets,\n  getFocusStyle,\n  HighContrastSelector,\n  getPlaceholderStyles,\n  hiddenContentStyle,\n  getInputFocusStyle,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nimport type { IRawStyle, ITheme, IStyle } from '../../Styling';\nimport type { IComboBoxOptionStyles, IComboBoxStyles } from './ComboBox.types';\nimport type { IButtonStyles } from '../../Button';\n\nconst ComboBoxHeight = 32;\nconst ComboBoxLineHeight = 30;\nconst ComboBoxCaretDownWidth = 32;\nconst ComboBoxOptionHeight = 36;\n\nconst getDisabledStyles = memoizeFunction(\n  (theme: ITheme): IRawStyle => {\n    const { semanticColors } = theme;\n\n    return {\n      backgroundColor: semanticColors.disabledBackground,\n      color: semanticColors.disabledText,\n      cursor: 'default',\n      selectors: {\n        ':after': {\n          borderColor: semanticColors.disabledBackground,\n        },\n        [HighContrastSelector]: {\n          color: 'GrayText',\n          selectors: {\n            ':after': {\n              borderColor: 'GrayText',\n            },\n          },\n        },\n      },\n    };\n  },\n);\n\nconst listOptionHighContrastStyles: IRawStyle = {\n  selectors: {\n    [HighContrastSelector]: {\n      backgroundColor: 'Highlight',\n      borderColor: 'Highlight',\n      color: 'HighlightText',\n      ...getHighContrastNoAdjustStyle(),\n    },\n  },\n};\n\nconst inputHighContrastStyles: IRawStyle = {\n  selectors: {\n    [HighContrastSelector]: {\n      color: 'WindowText',\n      backgroundColor: 'Window',\n      ...getHighContrastNoAdjustStyle(),\n    },\n  },\n};\n\nexport const getOptionStyles = memoizeFunction(\n  (\n    theme: ITheme,\n    customStylesForAllOptions?: Partial<IComboBoxOptionStyles>,\n    customOptionStylesForCurrentOption?: Partial<IComboBoxOptionStyles>,\n    isPending?: boolean,\n    isHidden?: boolean,\n    isSelected?: boolean,\n  ): Partial<IComboBoxOptionStyles> => {\n    const { palette, semanticColors } = theme;\n\n    const option = {\n      textHoveredColor: semanticColors.menuItemTextHovered,\n      textSelectedColor: palette.neutralDark,\n      textDisabledColor: semanticColors.disabledText,\n      backgroundHoveredColor: semanticColors.menuItemBackgroundHovered,\n      backgroundPressedColor: semanticColors.menuItemBackgroundPressed,\n    };\n\n    const optionStyles: IComboBoxOptionStyles = {\n      root: [\n        theme.fonts.medium,\n        {\n          backgroundColor: isPending ? option.backgroundHoveredColor : 'transparent',\n          boxSizing: 'border-box',\n          cursor: 'pointer',\n          display: isHidden ? 'none' : 'block',\n          width: '100%',\n          height: 'auto',\n          minHeight: ComboBoxOptionHeight,\n          lineHeight: '20px',\n          padding: '0 8px',\n          position: 'relative',\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: 'transparent',\n          borderRadius: 0,\n          wordWrap: 'break-word',\n          overflowWrap: 'break-word',\n          textAlign: 'left',\n          selectors: {\n            [HighContrastSelector]: {\n              border: 'none',\n              borderColor: 'Background',\n            },\n            ...(!isHidden && {\n              '&.ms-Checkbox': {\n                display: 'flex',\n                alignItems: 'center',\n              },\n            }),\n            '&.ms-Button--command:hover:active': {\n              backgroundColor: option.backgroundPressedColor,\n            },\n            '.ms-Checkbox-label': {\n              width: '100%',\n            },\n          },\n        },\n        isSelected\n          ? [\n              {\n                backgroundColor: 'transparent',\n                color: option.textSelectedColor,\n                selectors: {\n                  ':hover': [\n                    {\n                      backgroundColor: option.backgroundHoveredColor,\n                    },\n                    listOptionHighContrastStyles,\n                  ],\n                },\n              },\n              getFocusStyle(theme, { inset: -1, isFocusedOnly: false }),\n              listOptionHighContrastStyles,\n            ]\n          : [],\n      ],\n      rootHovered: {\n        backgroundColor: option.backgroundHoveredColor,\n        color: option.textHoveredColor,\n      },\n      rootFocused: {\n        backgroundColor: option.backgroundHoveredColor,\n      },\n      rootDisabled: {\n        color: option.textDisabledColor,\n        cursor: 'default',\n      },\n      optionText: {\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        minWidth: '0px',\n        maxWidth: '100%',\n        wordWrap: 'break-word',\n        overflowWrap: 'break-word',\n        display: 'inline-block',\n      },\n      optionTextWrapper: {\n        maxWidth: '100%',\n        display: 'flex',\n        alignItems: 'center',\n      },\n    };\n\n    return concatStyleSets(optionStyles, customStylesForAllOptions, customOptionStylesForCurrentOption);\n  },\n);\n\nexport const getCaretDownButtonStyles = memoizeFunction(\n  (theme: ITheme, customStyles?: Partial<IButtonStyles>): IButtonStyles => {\n    const { semanticColors, fonts } = theme;\n\n    const caret = {\n      buttonTextColor: semanticColors.bodySubtext,\n      buttonTextHoveredCheckedColor: semanticColors.buttonTextChecked,\n      buttonBackgroundHoveredColor: semanticColors.listItemBackgroundHovered,\n      buttonBackgroundCheckedColor: semanticColors.listItemBackgroundChecked,\n      buttonBackgroundCheckedHoveredColor: semanticColors.listItemBackgroundCheckedHovered,\n    };\n\n    const buttonHighContrastStyles: IStyle = {\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'Highlight',\n          borderColor: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    };\n\n    const styles: IButtonStyles = {\n      root: {\n        color: caret.buttonTextColor,\n        fontSize: fonts.small.fontSize,\n        position: 'absolute',\n        top: 0,\n        height: '100%',\n        lineHeight: ComboBoxLineHeight,\n        width: ComboBoxCaretDownWidth,\n        textAlign: 'center',\n        cursor: 'default',\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'ButtonFace',\n            borderColor: 'ButtonText',\n            color: 'ButtonText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      icon: {\n        fontSize: fonts.small.fontSize,\n      },\n      rootHovered: [\n        {\n          backgroundColor: caret.buttonBackgroundHoveredColor,\n          color: caret.buttonTextHoveredCheckedColor,\n          cursor: 'pointer',\n        },\n        buttonHighContrastStyles,\n      ],\n      rootPressed: [\n        {\n          backgroundColor: caret.buttonBackgroundCheckedColor,\n          color: caret.buttonTextHoveredCheckedColor,\n        },\n        buttonHighContrastStyles,\n      ],\n      rootChecked: [\n        {\n          backgroundColor: caret.buttonBackgroundCheckedColor,\n          color: caret.buttonTextHoveredCheckedColor,\n        },\n        buttonHighContrastStyles,\n      ],\n      rootCheckedHovered: [\n        {\n          backgroundColor: caret.buttonBackgroundCheckedHoveredColor,\n          color: caret.buttonTextHoveredCheckedColor,\n        },\n        buttonHighContrastStyles,\n      ],\n      rootDisabled: [\n        getDisabledStyles(theme),\n        {\n          position: 'absolute',\n        },\n      ],\n    };\n    return concatStyleSets(styles, customStyles);\n  },\n);\n\nexport const getStyles = memoizeFunction(\n  (theme: ITheme, customStyles?: Partial<IComboBoxStyles>, comboBoxOptionWidth?: string): Partial<IComboBoxStyles> => {\n    const { semanticColors, fonts, effects } = theme;\n\n    const root = {\n      textColor: semanticColors.inputText,\n      borderColor: semanticColors.inputBorder,\n      borderHoveredColor: semanticColors.inputBorderHovered,\n      borderPressedColor: semanticColors.inputFocusBorderAlt,\n      borderFocusedColor: semanticColors.inputFocusBorderAlt,\n      backgroundColor: semanticColors.inputBackground,\n      erroredColor: semanticColors.errorText,\n    };\n\n    const option = {\n      headerTextColor: semanticColors.menuHeader,\n      dividerBorderColor: semanticColors.bodyDivider,\n    };\n\n    // placeholder style variables\n    const placeholderHighContrastStyles: IRawStyle = {\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    };\n    const placeholderStyles: IStyle = [\n      {\n        color: semanticColors.inputPlaceholderText,\n      },\n      placeholderHighContrastStyles,\n    ];\n    const placeholderStylesHovered: IStyle = [\n      {\n        color: semanticColors.inputTextHovered,\n      },\n      placeholderHighContrastStyles,\n    ];\n    const disabledPlaceholderStyles: IStyle = [\n      {\n        color: semanticColors.disabledText,\n      },\n      placeholderHighContrastStyles,\n    ];\n\n    const ComboBoxRootHighContrastFocused = {\n      color: 'HighlightText',\n      backgroundColor: 'Window',\n      ...getHighContrastNoAdjustStyle(),\n      selectors: {\n        ':after': {\n          borderColor: 'Highlight',\n        },\n      },\n    };\n\n    const focusBorderStyles: IStyle = getInputFocusStyle(root.borderPressedColor, effects.roundedCorner2, 'border', 0);\n\n    const styles: IComboBoxStyles = {\n      container: {},\n      label: {},\n      labelDisabled: {},\n      root: [\n        theme.fonts.medium,\n        {\n          boxShadow: 'none',\n          marginLeft: '0',\n          paddingRight: ComboBoxCaretDownWidth,\n          paddingLeft: 9,\n          color: root.textColor,\n          position: 'relative',\n          outline: '0',\n          userSelect: 'none',\n          backgroundColor: root.backgroundColor,\n          cursor: 'text',\n          display: 'block',\n          height: ComboBoxHeight,\n          whiteSpace: 'nowrap',\n          textOverflow: 'ellipsis',\n          boxSizing: 'border-box', // Border-box matches Dropdown and TextField\n          selectors: {\n            '.ms-Label': {\n              display: 'inline-block',\n              marginBottom: '8px',\n            },\n            '&.is-open': {\n              selectors: {\n                [HighContrastSelector]: ComboBoxRootHighContrastFocused,\n              },\n            },\n            // setting border using pseudo-element here in order to\n            // prevent chevron button to overlap ComboBox border under certain resolutions\n            ':after': {\n              pointerEvents: 'none',\n              content: \"''\",\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              bottom: 0,\n              right: 0,\n              borderWidth: '1px',\n              borderStyle: 'solid',\n              borderColor: root.borderColor,\n              borderRadius: effects.roundedCorner2,\n            },\n          },\n        },\n      ],\n\n      rootHovered: {\n        selectors: {\n          ':after': {\n            borderColor: root.borderHoveredColor,\n          },\n          '.ms-ComboBox-Input': [\n            {\n              color: semanticColors.inputTextHovered,\n            },\n            getPlaceholderStyles(placeholderStylesHovered),\n            inputHighContrastStyles,\n          ],\n          [HighContrastSelector]: {\n            color: 'HighlightText',\n            backgroundColor: 'Window',\n            ...getHighContrastNoAdjustStyle(),\n            selectors: {\n              ':after': {\n                borderColor: 'Highlight',\n              },\n            },\n          },\n        },\n      },\n\n      rootPressed: [\n        {\n          position: 'relative',\n          selectors: {\n            [HighContrastSelector]: ComboBoxRootHighContrastFocused,\n          },\n        },\n      ],\n\n      rootFocused: [\n        {\n          selectors: {\n            '.ms-ComboBox-Input': [\n              {\n                color: semanticColors.inputTextHovered,\n              },\n              inputHighContrastStyles,\n            ],\n            [HighContrastSelector]: ComboBoxRootHighContrastFocused,\n          },\n        },\n        focusBorderStyles,\n      ],\n\n      rootDisabled: getDisabledStyles(theme),\n\n      rootError: {\n        selectors: {\n          ':after': {\n            borderColor: root.erroredColor,\n          },\n          ':hover:after': {\n            borderColor: semanticColors.inputBorderHovered,\n          },\n        },\n      },\n\n      rootDisallowFreeForm: {},\n\n      input: [\n        getPlaceholderStyles(placeholderStyles),\n        {\n          backgroundColor: root.backgroundColor,\n          color: root.textColor,\n          boxSizing: 'border-box',\n          width: '100%',\n          height: '100%',\n          borderStyle: 'none',\n          outline: 'none',\n          font: 'inherit',\n          textOverflow: 'ellipsis',\n          padding: '0',\n          selectors: {\n            '::-ms-clear': {\n              display: 'none',\n            },\n          },\n        },\n        inputHighContrastStyles,\n      ],\n\n      inputDisabled: [getDisabledStyles(theme), getPlaceholderStyles(disabledPlaceholderStyles)],\n      errorMessage: [\n        theme.fonts.small,\n        {\n          color: root.erroredColor,\n          marginTop: '5px',\n        },\n      ],\n\n      callout: {\n        boxShadow: effects.elevation8,\n      },\n\n      optionsContainerWrapper: {\n        width: comboBoxOptionWidth,\n      },\n\n      optionsContainer: {\n        display: 'block',\n      },\n      screenReaderText: hiddenContentStyle,\n\n      header: [\n        fonts.medium,\n        {\n          fontWeight: FontWeights.semibold,\n          color: option.headerTextColor,\n          backgroundColor: 'none',\n          borderStyle: 'none',\n          height: ComboBoxOptionHeight,\n          lineHeight: ComboBoxOptionHeight,\n          cursor: 'default',\n          padding: '0 8px',\n          userSelect: 'none',\n          textAlign: 'left',\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'GrayText',\n              ...getHighContrastNoAdjustStyle(),\n            },\n          },\n        },\n      ],\n\n      divider: {\n        height: 1,\n        backgroundColor: option.dividerBorderColor,\n      },\n    };\n\n    return concatStyleSets(styles, customStyles);\n  },\n);\n"]},"metadata":{},"sourceType":"module"}