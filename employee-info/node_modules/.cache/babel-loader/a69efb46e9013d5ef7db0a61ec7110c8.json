{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, warnDeprecations, initializeComponentRef } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { IconButton } from '../../Button';\nimport { DialogFooter } from './DialogFooter';\nimport { withResponsiveMode } from '../../ResponsiveMode';\nvar getClassNames = classNamesFunction();\nvar DialogFooterType = React.createElement(DialogFooter, null).type;\nvar COMPONENT_NAME = 'DialogContent'; // eslint-disable-next-line deprecation/deprecation\n\nvar DialogContentBase =\n/** @class */\nfunction (_super) {\n  __extends(DialogContentBase, _super);\n\n  function DialogContentBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    initializeComponentRef(_this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      titleId: 'titleProps.id'\n    });\n    return _this;\n  }\n\n  DialogContentBase.prototype.render = function () {\n    var _a = this.props,\n        showCloseButton = _a.showCloseButton,\n        className = _a.className,\n        closeButtonAriaLabel = _a.closeButtonAriaLabel,\n        onDismiss = _a.onDismiss,\n        subTextId = _a.subTextId,\n        subText = _a.subText,\n        _b = _a.titleProps,\n        titleProps = _b === void 0 ? {} : _b,\n        // eslint-disable-next-line deprecation/deprecation\n    titleId = _a.titleId,\n        title = _a.title,\n        type = _a.type,\n        styles = _a.styles,\n        theme = _a.theme,\n        draggableHeaderClassName = _a.draggableHeaderClassName;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isLargeHeader: type === DialogType.largeHeader,\n      isClose: type === DialogType.close,\n      draggableHeaderClassName: draggableHeaderClassName\n    });\n\n    var groupings = this._groupChildren();\n\n    var subTextContent;\n\n    if (subText) {\n      subTextContent = React.createElement(\"p\", {\n        className: classNames.subText,\n        id: subTextId\n      }, subText);\n    }\n\n    return React.createElement(\"div\", {\n      className: classNames.content\n    }, React.createElement(\"div\", {\n      className: classNames.header\n    }, React.createElement(\"div\", __assign({\n      id: titleId,\n      role: \"heading\",\n      \"aria-level\": 1\n    }, titleProps, {\n      className: css(classNames.title, titleProps.className)\n    }), title), React.createElement(\"div\", {\n      className: classNames.topButton\n    }, this.props.topButtonsProps.map(function (props, index) {\n      return React.createElement(IconButton, __assign({\n        key: props.uniqueId || index\n      }, props));\n    }), (type === DialogType.close || showCloseButton && type !== DialogType.largeHeader) && React.createElement(IconButton, {\n      className: classNames.button,\n      iconProps: {\n        iconName: 'Cancel'\n      },\n      ariaLabel: closeButtonAriaLabel,\n      onClick: onDismiss\n    }))), React.createElement(\"div\", {\n      className: classNames.inner\n    }, React.createElement(\"div\", {\n      className: classNames.innerContent\n    }, subTextContent, groupings.contents), groupings.footers));\n  }; // @TODO - typing the footers as an array of DialogFooter is difficult because\n  // casing \"child as DialogFooter\" causes a problem because\n  // \"Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other.\"\n\n\n  DialogContentBase.prototype._groupChildren = function () {\n    var groupings = {\n      footers: [],\n      contents: []\n    };\n    React.Children.map(this.props.children, function (child) {\n      if (typeof child === 'object' && child !== null && child.type === DialogFooterType) {\n        groupings.footers.push(child);\n      } else {\n        groupings.contents.push(child);\n      }\n    });\n    return groupings;\n  };\n\n  DialogContentBase.defaultProps = {\n    showCloseButton: false,\n    className: '',\n    topButtonsProps: [],\n    closeButtonAriaLabel: 'Close'\n  };\n  DialogContentBase = __decorate([withResponsiveMode], DialogContentBase);\n  return DialogContentBase;\n}(React.Component);\n\nexport { DialogContentBase };","map":{"version":3,"mappings":"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","names":["React","classNamesFunction","css","warnDeprecations","initializeComponentRef","DialogType","IconButton","DialogFooter","withResponsiveMode","getClassNames","DialogFooterType","type","COMPONENT_NAME","__extends","props","_super","_this","titleId","DialogContentBase","showCloseButton","className","closeButtonAriaLabel","onDismiss","subTextId","subText","_b","titleProps","title","styles","theme","draggableHeaderClassName","classNames","isLargeHeader","largeHeader","isClose","close","groupings","_groupChildren","subTextContent","id","content","header","role","topButton","topButtonsProps","map","index","__assign","key","uniqueId","button","iconProps","iconName","ariaLabel","onClick","inner","innerContent","contents","footers","Children","children","child","push","Component"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/Dialog/DialogContent.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, css, warnDeprecations, initializeComponentRef } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { IconButton } from '../../Button';\nimport { DialogFooter } from './DialogFooter';\nimport { withResponsiveMode } from '../../ResponsiveMode';\nimport type { IDialogContentProps, IDialogContentStyleProps, IDialogContentStyles } from './DialogContent.types';\nimport type { IDialogFooterProps } from './DialogFooter.types';\n\nconst getClassNames = classNamesFunction<IDialogContentStyleProps, IDialogContentStyles>();\n\nconst DialogFooterType = ((<DialogFooter />) as React.ReactElement<IDialogFooterProps>).type;\n\nconst COMPONENT_NAME = 'DialogContent';\n\n// eslint-disable-next-line deprecation/deprecation\n@withResponsiveMode\nexport class DialogContentBase extends React.Component<IDialogContentProps, {}> {\n  public static defaultProps: IDialogContentProps = {\n    showCloseButton: false,\n    className: '',\n    topButtonsProps: [],\n    closeButtonAriaLabel: 'Close',\n  };\n\n  constructor(props: IDialogContentProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      titleId: 'titleProps.id',\n    });\n  }\n\n  public render(): JSX.Element {\n    const {\n      showCloseButton,\n      className,\n      closeButtonAriaLabel,\n      onDismiss,\n      subTextId,\n      subText,\n      titleProps = {},\n      // eslint-disable-next-line deprecation/deprecation\n      titleId,\n      title,\n      type,\n      styles,\n      theme,\n      draggableHeaderClassName,\n    } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isLargeHeader: type === DialogType.largeHeader,\n      isClose: type === DialogType.close,\n      draggableHeaderClassName,\n    });\n\n    const groupings = this._groupChildren();\n    let subTextContent;\n    if (subText) {\n      subTextContent = (\n        <p className={classNames.subText} id={subTextId}>\n          {subText}\n        </p>\n      );\n    }\n\n    return (\n      <div className={classNames.content}>\n        <div className={classNames.header}>\n          <div\n            id={titleId}\n            role=\"heading\"\n            aria-level={1}\n            {...titleProps}\n            className={css(classNames.title, titleProps.className)}\n          >\n            {title}\n          </div>\n          <div className={classNames.topButton}>\n            {this.props.topButtonsProps!.map((props, index) => (\n              <IconButton key={props.uniqueId || index} {...props} />\n            ))}\n            {(type === DialogType.close || (showCloseButton && type !== DialogType.largeHeader)) && (\n              <IconButton\n                className={classNames.button}\n                iconProps={{ iconName: 'Cancel' }}\n                ariaLabel={closeButtonAriaLabel}\n                onClick={onDismiss as any}\n              />\n            )}\n          </div>\n        </div>\n        <div className={classNames.inner}>\n          <div className={classNames.innerContent}>\n            {subTextContent}\n            {groupings.contents}\n          </div>\n          {groupings.footers}\n        </div>\n      </div>\n    );\n  }\n\n  // @TODO - typing the footers as an array of DialogFooter is difficult because\n  // casing \"child as DialogFooter\" causes a problem because\n  // \"Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other.\"\n  private _groupChildren(): { footers: any[]; contents: any[] } {\n    const groupings: { footers: any[]; contents: any[] } = {\n      footers: [],\n      contents: [],\n    };\n\n    React.Children.map(this.props.children, child => {\n      if (typeof child === 'object' && child !== null && (child as any).type === DialogFooterType) {\n        groupings.footers.push(child);\n      } else {\n        groupings.contents.push(child);\n      }\n    });\n\n    return groupings;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}