{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, getRTL, getId, KeyCodes, classNamesFunction } from '../../Utilities';\nimport { ColumnDragEndLocation, CheckboxVisibility } from './DetailsList.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon, FontIcon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { DragDropHelper } from '../../DragDrop';\nimport { DetailsColumn } from '../../components/DetailsList/DetailsColumn';\nimport { SelectAllVisibility } from './DetailsHeader.types';\nvar getClassNames = classNamesFunction();\nvar MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nvar MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nvar NO_COLUMNS = [];\n\nvar DetailsHeaderBase =\n/** @class */\nfunction (_super) {\n  __extends(DetailsHeaderBase, _super);\n\n  function DetailsHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._rootElement = React.createRef();\n    _this._rootComponent = React.createRef();\n    _this._draggedColumnIndex = -1;\n    _this._dropHintDetails = {};\n\n    _this._updateDroppingState = function (newValue, event) {\n      if (_this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n        _this._resetDropHints();\n      }\n    };\n\n    _this._onDragOver = function (item, event) {\n      if (_this._draggedColumnIndex >= 0) {\n        event.stopPropagation();\n\n        _this._computeDropHintToBeShown(event.clientX);\n      }\n    };\n\n    _this._onDrop = function (item, event) {\n      // Safe to assume this is defined since we're handling a drop event\n      var columnReorderProps = _this._getColumnReorderProps(); // Target index will not get changed if draggeditem is after target item.\n\n\n      if (_this._draggedColumnIndex >= 0 && event) {\n        var targetIndex = _this._draggedColumnIndex > _this._currentDropHintIndex ? _this._currentDropHintIndex : _this._currentDropHintIndex - 1;\n\n        var isValidDrop = _this._isValidCurrentDropHintIndex();\n\n        event.stopPropagation();\n\n        if (isValidDrop) {\n          _this._onDropIndexInfo.sourceIndex = _this._draggedColumnIndex;\n          _this._onDropIndexInfo.targetIndex = targetIndex;\n\n          if (columnReorderProps.onColumnDrop) {\n            var dragDropDetails = {\n              draggedIndex: _this._draggedColumnIndex,\n              targetIndex: targetIndex\n            };\n            columnReorderProps.onColumnDrop(dragDropDetails);\n            /* eslint-disable deprecation/deprecation */\n          } else if (columnReorderProps.handleColumnReorder) {\n            columnReorderProps.handleColumnReorder(_this._draggedColumnIndex, targetIndex);\n            /* eslint-enable deprecation/deprecation */\n          }\n        }\n      }\n\n      _this._resetDropHints();\n\n      _this._dropHintDetails = {};\n      _this._draggedColumnIndex = -1;\n    };\n\n    _this._updateDragInfo = function (props, event) {\n      // Safe to assume this is defined since we're handling a drag event\n      var columnReorderProps = _this._getColumnReorderProps();\n\n      var itemIndex = props.itemIndex;\n\n      if (itemIndex >= 0) {\n        // Column index is set based on the checkbox\n        _this._draggedColumnIndex = _this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\n\n        _this._getDropHintPositions();\n\n        if (columnReorderProps.onColumnDragStart) {\n          columnReorderProps.onColumnDragStart(true);\n        }\n      } else if (event && _this._draggedColumnIndex >= 0) {\n        _this._resetDropHints();\n\n        _this._draggedColumnIndex = -1;\n        _this._dropHintDetails = {};\n\n        if (columnReorderProps.onColumnDragEnd) {\n          var columnDragEndLocation = _this._isEventOnHeader(event);\n\n          columnReorderProps.onColumnDragEnd({\n            dropLocation: columnDragEndLocation\n          }, event);\n        }\n      }\n    };\n\n    _this._getDropHintPositions = function () {\n      var _a = _this.props.columns,\n          columns = _a === void 0 ? NO_COLUMNS : _a; // Safe to assume this is defined since we're handling a drag/drop event\n\n      var columnReorderProps = _this._getColumnReorderProps();\n\n      var prevX = 0;\n      var prevMid = 0;\n      var prevRef;\n      var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n      var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n      for (var i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n        if (_this._rootElement.current) {\n          var dropHintElement = _this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0];\n\n          if (dropHintElement) {\n            if (i === frozenColumnCountFromStart) {\n              prevX = dropHintElement.offsetLeft;\n              prevMid = dropHintElement.offsetLeft;\n              prevRef = dropHintElement;\n            } else {\n              var newMid = (dropHintElement.offsetLeft + prevX) / 2;\n              _this._dropHintDetails[i - 1] = {\n                originX: prevX,\n                startX: prevMid,\n                endX: newMid,\n                dropHintElementRef: prevRef\n              };\n              prevMid = newMid;\n              prevRef = dropHintElement;\n              prevX = dropHintElement.offsetLeft;\n\n              if (i === columns.length - frozenColumnCountFromEnd) {\n                _this._dropHintDetails[i] = {\n                  originX: prevX,\n                  startX: prevMid,\n                  endX: dropHintElement.offsetLeft,\n                  dropHintElementRef: prevRef\n                };\n              }\n            }\n          }\n        }\n      }\n    };\n    /**\n     * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n     */\n\n\n    _this._computeDropHintToBeShown = function (clientX) {\n      var isRtl = getRTL(_this.props.theme);\n\n      if (_this._rootElement.current) {\n        var clientRect = _this._rootElement.current.getBoundingClientRect();\n\n        var headerOriginX = clientRect.left;\n        var eventXRelativePosition = clientX - headerOriginX;\n        var currentDropHintIndex = _this._currentDropHintIndex;\n\n        if (_this._isValidCurrentDropHintIndex()) {\n          if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex].startX, _this._dropHintDetails[currentDropHintIndex].endX)) {\n            return;\n          }\n        }\n\n        var _a = _this.props.columns,\n            columns = _a === void 0 ? NO_COLUMNS : _a; // Safe to assume this is defined since we're handling a drag/drop event\n\n        var columnReorderProps = _this._getColumnReorderProps();\n\n        var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n        var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n        var currentIndex = frozenColumnCountFromStart;\n        var lastValidColumn = columns.length - frozenColumnCountFromEnd;\n        var indexToUpdate = -1;\n\n        if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[currentIndex].endX)) {\n          indexToUpdate = currentIndex;\n        } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[lastValidColumn].startX)) {\n          indexToUpdate = lastValidColumn;\n        } else if (_this._isValidCurrentDropHintIndex()) {\n          if (_this._dropHintDetails[currentDropHintIndex + 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex + 1].startX, _this._dropHintDetails[currentDropHintIndex + 1].endX)) {\n            indexToUpdate = currentDropHintIndex + 1;\n          } else if (_this._dropHintDetails[currentDropHintIndex - 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex - 1].startX, _this._dropHintDetails[currentDropHintIndex - 1].endX)) {\n            indexToUpdate = currentDropHintIndex - 1;\n          }\n        }\n\n        if (indexToUpdate === -1) {\n          var startIndex = frozenColumnCountFromStart;\n          var endIndex = lastValidColumn;\n\n          while (startIndex < endIndex) {\n            var middleIndex = Math.ceil((endIndex + startIndex) / 2);\n\n            if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].startX, _this._dropHintDetails[middleIndex].endX)) {\n              indexToUpdate = middleIndex;\n              break;\n            } else if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n              endIndex = middleIndex;\n            } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n              startIndex = middleIndex;\n            }\n          }\n        }\n\n        if (indexToUpdate === _this._draggedColumnIndex || indexToUpdate === _this._draggedColumnIndex + 1) {\n          if (_this._isValidCurrentDropHintIndex()) {\n            _this._resetDropHints();\n          }\n        } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n          _this._resetDropHints();\n\n          _this._updateDropHintElement(_this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n\n          _this._currentDropHintIndex = indexToUpdate;\n        }\n      }\n    };\n\n    _this._renderColumnSizer = function (_a) {\n      var _b;\n\n      var columnIndex = _a.columnIndex;\n      var _c = _this.props.columns,\n          columns = _c === void 0 ? NO_COLUMNS : _c;\n      var column = columns[columnIndex];\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      var classNames = _this._classNames;\n      return column.isResizable ? React.createElement(\"div\", {\n        key: column.key + \"_sizer\",\n        \"aria-hidden\": true,\n        role: \"button\",\n        \"data-is-focusable\": false,\n        onClick: _stopPropagation,\n        \"data-sizer-index\": columnIndex,\n        onBlur: _this._onSizerBlur,\n        className: css(classNames.cellSizer, columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd, (_b = {}, _b[classNames.cellIsResizing] = columnResizeDetails && columnResizeDetails.columnIndex === columnIndex, _b)),\n        onDoubleClick: _this._onSizerDoubleClick.bind(_this, columnIndex)\n      }) : null;\n    };\n\n    _this._onRenderColumnHeaderTooltip = function (tooltipHostProps) {\n      return React.createElement(\"span\", {\n        className: tooltipHostProps.hostClassName\n      }, tooltipHostProps.children);\n    };\n    /**\n     * Called when the select all toggle is clicked.\n     */\n\n\n    _this._onSelectAllClicked = function () {\n      var selection = _this.props.selection;\n\n      if (selection) {\n        selection.toggleAllSelected();\n      }\n    };\n\n    _this._onRootMouseDown = function (ev) {\n      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n      var columnIndex = Number(columnIndexAttr);\n      var _a = _this.props.columns,\n          columns = _a === void 0 ? NO_COLUMNS : _a;\n\n      if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n        // Ignore anything except the primary button.\n        return;\n      }\n\n      _this.setState({\n        columnResizeDetails: {\n          columnIndex: columnIndex,\n          columnMinWidth: columns[columnIndex].calculatedWidth,\n          originX: ev.clientX\n        }\n      });\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    _this._onRootMouseMove = function (ev) {\n      var _a = _this.state,\n          columnResizeDetails = _a.columnResizeDetails,\n          isSizing = _a.isSizing;\n\n      if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n        _this.setState({\n          isSizing: true\n        });\n      }\n    };\n\n    _this._onRootKeyDown = function (ev) {\n      var _a = _this.state,\n          columnResizeDetails = _a.columnResizeDetails,\n          isSizing = _a.isSizing;\n      var _b = _this.props,\n          _c = _b.columns,\n          columns = _c === void 0 ? NO_COLUMNS : _c,\n          onColumnResized = _b.onColumnResized;\n      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n\n      if (!columnIndexAttr || isSizing) {\n        return;\n      }\n\n      var columnIndex = Number(columnIndexAttr);\n\n      if (!columnResizeDetails) {\n        // eslint-disable-next-line deprecation/deprecation\n        if (ev.which === KeyCodes.enter) {\n          _this.setState({\n            columnResizeDetails: {\n              columnIndex: columnIndex,\n              columnMinWidth: columns[columnIndex].calculatedWidth\n            }\n          });\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      } else {\n        var increment = void 0; // eslint-disable-next-line deprecation/deprecation\n\n        if (ev.which === KeyCodes.enter) {\n          _this.setState({\n            columnResizeDetails: undefined\n          });\n\n          ev.preventDefault();\n          ev.stopPropagation(); // eslint-disable-next-line deprecation/deprecation\n        } else if (ev.which === KeyCodes.left) {\n          increment = getRTL(_this.props.theme) ? 1 : -1; // eslint-disable-next-line deprecation/deprecation\n        } else if (ev.which === KeyCodes.right) {\n          increment = getRTL(_this.props.theme) ? -1 : 1;\n        }\n\n        if (increment) {\n          if (!ev.shiftKey) {\n            increment *= 10;\n          }\n\n          _this.setState({\n            columnResizeDetails: __assign(__assign({}, columnResizeDetails), {\n              columnMinWidth: columnResizeDetails.columnMinWidth + increment\n            })\n          });\n\n          if (onColumnResized) {\n            onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    };\n    /**\n     * mouse move event handler in the header\n     * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n     *\n     * @param ev - mouse move event\n     */\n\n\n    _this._onSizerMouseMove = function (ev) {\n      var // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = ev.buttons;\n      var _a = _this.props,\n          onColumnIsSizingChanged = _a.onColumnIsSizingChanged,\n          onColumnResized = _a.onColumnResized,\n          _b = _a.columns,\n          columns = _b === void 0 ? NO_COLUMNS : _b;\n      var columnResizeDetails = _this.state.columnResizeDetails;\n\n      if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n        // cancel mouse down event and return early when the primary button is not pressed\n        _this._onSizerMouseUp(ev);\n\n        return;\n      }\n\n      if (ev.clientX !== columnResizeDetails.originX) {\n        if (onColumnIsSizingChanged) {\n          onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], true);\n        }\n      }\n\n      if (onColumnResized) {\n        var movement = ev.clientX - columnResizeDetails.originX;\n\n        if (getRTL(_this.props.theme)) {\n          movement = -movement;\n        }\n\n        onColumnResized(columns[columnResizeDetails.columnIndex], columnResizeDetails.columnMinWidth + movement, columnResizeDetails.columnIndex);\n      }\n    };\n\n    _this._onSizerBlur = function (ev) {\n      var columnResizeDetails = _this.state.columnResizeDetails;\n\n      if (columnResizeDetails) {\n        _this.setState({\n          columnResizeDetails: undefined,\n          isSizing: false\n        });\n      }\n    };\n    /**\n     * mouse up event handler in the header\n     * clear the resize related state.\n     * This is to ensure we can catch double click event\n     *\n     * @param ev - mouse up event\n     */\n\n\n    _this._onSizerMouseUp = function (ev) {\n      var _a = _this.props,\n          _b = _a.columns,\n          columns = _b === void 0 ? NO_COLUMNS : _b,\n          onColumnIsSizingChanged = _a.onColumnIsSizingChanged;\n      var columnResizeDetails = _this.state.columnResizeDetails;\n\n      _this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false\n      });\n\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], false);\n      }\n    };\n\n    _this._onToggleCollapseAll = function () {\n      var onToggleCollapseAll = _this.props.onToggleCollapseAll;\n      var newCollapsed = !_this.state.isAllCollapsed;\n\n      _this.setState({\n        isAllCollapsed: newCollapsed\n      });\n\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(newCollapsed);\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      columnResizeDetails: undefined,\n      isAllCollapsed: _this.props.isAllCollapsed,\n      isAllSelected: !!_this.props.selection && _this.props.selection.isAllSelected()\n    };\n    _this._onDropIndexInfo = {\n      sourceIndex: -1,\n      targetIndex: -1\n    };\n    _this._id = getId('header');\n    _this._currentDropHintIndex = -1; // The drag drop handler won't do any work until subscribe() is called,\n    // so always set it up for convenience\n\n    _this._dragDropHelper = new DragDropHelper({\n      selection: {\n        getSelection: function getSelection() {\n          return;\n        }\n      },\n      minimumPixelsForDrag: _this.props.minimumPixelsForDrag\n    });\n    return _this;\n  }\n\n  DetailsHeaderBase.prototype.componentDidMount = function () {\n    var selection = this.props.selection;\n\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged); // this._rootElement.current will be null in tests using react-test-renderer\n\n\n    if (this._rootElement.current) {\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n\n      if (this._getColumnReorderProps()) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());\n      }\n    }\n  };\n\n  DetailsHeaderBase.prototype.componentDidUpdate = function (prevProps) {\n    if (this._getColumnReorderProps()) {\n      if (!this._subscriptionObject && this._rootElement.current) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());\n      }\n    } else if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n\n      delete this._subscriptionObject;\n    }\n\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      var _a = prevProps.columns,\n          previousColumns = _a === void 0 ? NO_COLUMNS : _a;\n      var _b = this.props.columns,\n          columns = _b === void 0 ? NO_COLUMNS : _b;\n\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: -1,\n          targetIndex: -1\n        };\n      }\n    }\n\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n      this.setState({\n        isAllCollapsed: this.props.isAllCollapsed\n      });\n    }\n  };\n\n  DetailsHeaderBase.prototype.componentWillUnmount = function () {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n\n      delete this._subscriptionObject;\n    }\n\n    this._dragDropHelper.dispose();\n\n    this._events.dispose();\n  };\n\n  DetailsHeaderBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b,\n        ariaLabel = _a.ariaLabel,\n        ariaLabelForToggleAllGroupsButton = _a.ariaLabelForToggleAllGroupsButton,\n        ariaLabelForSelectAllCheckbox = _a.ariaLabelForSelectAllCheckbox,\n        selectAllVisibility = _a.selectAllVisibility,\n        ariaLabelForSelectionColumn = _a.ariaLabelForSelectionColumn,\n        indentWidth = _a.indentWidth,\n        onColumnClick = _a.onColumnClick,\n        onColumnContextMenu = _a.onColumnContextMenu,\n        _c = _a.onRenderColumnHeaderTooltip,\n        onRenderColumnHeaderTooltip = _c === void 0 ? this._onRenderColumnHeaderTooltip : _c,\n        styles = _a.styles,\n        selectionMode = _a.selectionMode,\n        theme = _a.theme,\n        onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox,\n        groupNestingDepth = _a.groupNestingDepth,\n        useFastIcons = _a.useFastIcons,\n        checkboxVisibility = _a.checkboxVisibility,\n        className = _a.className;\n    var _d = this.state,\n        isAllSelected = _d.isAllSelected,\n        columnResizeDetails = _d.columnResizeDetails,\n        isSizing = _d.isSizing,\n        isAllCollapsed = _d.isAllCollapsed;\n    var showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    var isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n    var isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\n\n    var columnReorderProps = this._getColumnReorderProps();\n\n    var frozenColumnCountFromStart = columnReorderProps && columnReorderProps.frozenColumnCountFromStart ? columnReorderProps.frozenColumnCountFromStart : 0;\n    var frozenColumnCountFromEnd = columnReorderProps && columnReorderProps.frozenColumnCountFromEnd ? columnReorderProps.frozenColumnCountFromEnd : 0;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      isAllSelected: isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing: isSizing,\n      isAllCollapsed: isAllCollapsed,\n      isCheckboxHidden: isCheckboxHidden,\n      className: className\n    });\n    var classNames = this._classNames;\n    var IconComponent = useFastIcons ? FontIcon : Icon;\n    var showGroupExpander = groupNestingDepth > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible;\n    var columnIndexOffset = 1 + (showCheckbox ? 1 : 0) + (showGroupExpander ? 1 : 0);\n    var isRTL = getRTL(theme);\n    return React.createElement(FocusZone, {\n      role: \"row\",\n      \"aria-label\": ariaLabel,\n      className: classNames.root,\n      componentRef: this._rootComponent,\n      elementRef: this._rootElement,\n      onMouseMove: this._onRootMouseMove,\n      \"data-automationid\": \"DetailsHeader\",\n      direction: FocusZoneDirection.horizontal\n    }, showCheckbox ? [React.createElement(\"div\", {\n      key: \"__checkbox\",\n      className: classNames.cellIsCheck,\n      \"aria-labelledby\": this._id + \"-checkTooltip\",\n      onClick: !isCheckboxHidden ? this._onSelectAllClicked : undefined,\n      role: 'columnheader'\n    }, onRenderColumnHeaderTooltip({\n      hostClassName: classNames.checkTooltip,\n      id: this._id + \"-checkTooltip\",\n      setAriaDescribedBy: false,\n      content: ariaLabelForSelectAllCheckbox,\n      children: React.createElement(DetailsRowCheck, {\n        id: this._id + \"-check\",\n        \"aria-label\": selectionMode === SelectionMode.multiple ? ariaLabelForSelectAllCheckbox : ariaLabelForSelectionColumn,\n        \"data-is-focusable\": !isCheckboxHidden || undefined,\n        isHeader: true,\n        selected: isAllSelected,\n        anySelected: false,\n        canSelect: !isCheckboxHidden,\n        className: classNames.check,\n        onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n        useFastIcons: useFastIcons,\n        isVisible: isCheckboxAlwaysVisible\n      })\n    }, this._onRenderColumnHeaderTooltip)), !this.props.onRenderColumnHeaderTooltip ? ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? React.createElement(\"label\", {\n      key: \"__checkboxLabel\",\n      id: this._id + \"-checkTooltip\",\n      className: classNames.accessibleLabel,\n      \"aria-hidden\": true\n    }, ariaLabelForSelectAllCheckbox) : ariaLabelForSelectionColumn && isCheckboxHidden ? React.createElement(\"label\", {\n      key: \"__checkboxLabel\",\n      id: this._id + \"-checkTooltip\",\n      className: classNames.accessibleLabel,\n      \"aria-hidden\": true\n    }, ariaLabelForSelectionColumn) : null : null] : null, showGroupExpander ? React.createElement(\"div\", {\n      className: classNames.cellIsGroupExpander,\n      onClick: this._onToggleCollapseAll,\n      \"data-is-focusable\": true,\n      \"aria-label\": ariaLabelForToggleAllGroupsButton,\n      \"aria-expanded\": !isAllCollapsed,\n      role: \"columnheader\"\n    }, React.createElement(IconComponent, {\n      className: classNames.collapseButton,\n      iconName: isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'\n    }), React.createElement(\"span\", {\n      className: classNames.accessibleLabel\n    }, ariaLabelForToggleAllGroupsButton)) : null, React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      role: \"gridcell\",\n      count: groupNestingDepth - 1\n    }), columns.map(function (column, columnIndex) {\n      var _isDraggable = columnReorderProps ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd : false;\n\n      return [columnReorderProps && (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) && _this._renderDropHint(columnIndex), React.createElement(DetailsColumn, {\n        column: column,\n        styles: column.styles,\n        key: column.key,\n        columnIndex: columnIndexOffset + columnIndex,\n        parentId: _this._id,\n        isDraggable: _isDraggable,\n        updateDragInfo: _this._updateDragInfo,\n        dragDropHelper: _this._dragDropHelper,\n        onColumnClick: onColumnClick,\n        onColumnContextMenu: onColumnContextMenu,\n        // Do not render tooltips by default, but allow for override via props.\n        onRenderColumnHeaderTooltip: _this.props.onRenderColumnHeaderTooltip,\n        isDropped: _this._onDropIndexInfo.targetIndex === columnIndex,\n        cellStyleProps: _this.props.cellStyleProps,\n        useFastIcons: useFastIcons\n      }), _this._renderColumnDivider(columnIndex)];\n    }), columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length), isSizing && React.createElement(Layer, null, React.createElement(\"div\", {\n      className: classNames.sizingOverlay,\n      onMouseMove: this._onSizerMouseMove,\n      onMouseUp: this._onSizerMouseUp\n    })));\n  };\n  /** Set focus to the active thing in the focus area. */\n\n\n  DetailsHeaderBase.prototype.focus = function () {\n    var _a;\n\n    return !!((_a = this._rootComponent.current) === null || _a === void 0 ? void 0 : _a.focus());\n  };\n  /**\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\n   * (because drag/drop handling will only be set up if reorder props are given).\n   */\n\n\n  DetailsHeaderBase.prototype._getColumnReorderProps = function () {\n    var _a = this.props,\n        columnReorderOptions = _a.columnReorderOptions,\n        columnReorderProps = _a.columnReorderProps;\n    return columnReorderProps || columnReorderOptions && __assign(__assign({}, columnReorderOptions), {\n      onColumnDragEnd: undefined\n    });\n  };\n\n  DetailsHeaderBase.prototype._getHeaderDragDropOptions = function () {\n    var options = {\n      selectionIndex: 1,\n      context: {\n        data: this,\n        index: 0\n      },\n      canDrag: function canDrag() {\n        return false;\n      },\n      canDrop: function canDrop() {\n        return true;\n      },\n      onDragStart: function onDragStart() {\n        return undefined;\n      },\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: function onDragEnd() {\n        return undefined;\n      },\n      onDragOver: this._onDragOver\n    };\n    return options;\n  };\n\n  DetailsHeaderBase.prototype._isValidCurrentDropHintIndex = function () {\n    return this._currentDropHintIndex >= 0;\n  };\n  /**\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\n   */\n\n\n  DetailsHeaderBase.prototype._isCheckboxColumnHidden = function () {\n    var _a = this.props,\n        selectionMode = _a.selectionMode,\n        checkboxVisibility = _a.checkboxVisibility;\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  };\n\n  DetailsHeaderBase.prototype._resetDropHints = function () {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n\n      this._currentDropHintIndex = -1;\n    }\n  };\n\n  DetailsHeaderBase.prototype._updateDropHintElement = function (element, displayProperty) {\n    element.childNodes[1].style.display = displayProperty;\n    element.childNodes[0].style.display = displayProperty;\n  };\n\n  DetailsHeaderBase.prototype._isEventOnHeader = function (event) {\n    if (this._rootElement.current) {\n      var clientRect = this._rootElement.current.getBoundingClientRect();\n\n      if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  };\n\n  DetailsHeaderBase.prototype._renderColumnDivider = function (columnIndex) {\n    var _a = this.props.columns,\n        columns = _a === void 0 ? NO_COLUMNS : _a;\n    var column = columns[columnIndex];\n    var onRenderDivider = column.onRenderDivider;\n    return onRenderDivider ? onRenderDivider({\n      column: column,\n      columnIndex: columnIndex\n    }, this._renderColumnSizer) : this._renderColumnSizer({\n      column: column,\n      columnIndex: columnIndex\n    });\n  };\n\n  DetailsHeaderBase.prototype._renderDropHint = function (dropHintIndex) {\n    var classNames = this._classNames;\n    var IconComponent = this.props.useFastIcons ? FontIcon : Icon;\n    return React.createElement(\"div\", {\n      key: 'dropHintKey',\n      className: classNames.dropHintStyle,\n      id: \"columnDropHint_\" + dropHintIndex\n    }, React.createElement(\"div\", {\n      role: \"presentation\",\n      key: \"dropHintCircleKey\",\n      className: classNames.dropHintCaretStyle,\n      \"data-is-focusable\": false,\n      \"data-sizer-index\": dropHintIndex,\n      \"aria-hidden\": true\n    }, React.createElement(IconComponent, {\n      iconName: 'CircleShapeSolid'\n    })), React.createElement(\"div\", {\n      key: \"dropHintLineKey\",\n      \"aria-hidden\": true,\n      \"data-is-focusable\": false,\n      \"data-sizer-index\": dropHintIndex,\n      className: classNames.dropHintLineStyle\n    }));\n  };\n  /**\n   * double click on the column sizer will auto ajust column width\n   * to fit the longest content among current rendered rows.\n   *\n   * @param columnIndex - index of the column user double clicked\n   * @param ev - mouse double click event\n   */\n\n\n  DetailsHeaderBase.prototype._onSizerDoubleClick = function (columnIndex, ev) {\n    var _a = this.props,\n        onColumnAutoResized = _a.onColumnAutoResized,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b;\n\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  };\n\n  DetailsHeaderBase.prototype._onSelectionChanged = function () {\n    var isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected: isAllSelected\n      });\n    }\n  };\n\n  DetailsHeaderBase.defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible,\n    useFastIcons: true\n  };\n  return DetailsHeaderBase;\n}(React.Component);\n\nexport { DetailsHeaderBase };\n\nfunction _liesBetween(rtl, target, left, right) {\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\n\nfunction _isBefore(rtl, a, b) {\n  return rtl ? a >= b : a <= b;\n}\n\nfunction _isAfter(rtl, a, b) {\n  return rtl ? a <= b : a >= b;\n}\n\nfunction _stopPropagation(ev) {\n  ev.stopPropagation();\n}","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","EventGroup","css","getRTL","getId","KeyCodes","classNamesFunction","ColumnDragEndLocation","CheckboxVisibility","FocusZone","FocusZoneDirection","Icon","FontIcon","Layer","GroupSpacer","CollapseAllVisibility","DetailsRowCheck","SelectionMode","SELECTION_CHANGE","DragDropHelper","DetailsColumn","SelectAllVisibility","getClassNames","MOUSEDOWN_PRIMARY_BUTTON","MOUSEMOVE_PRIMARY_BUTTON","NO_COLUMNS","__extends","props","_super","_this","createRef","newValue","event","_draggedColumnIndex","type","_resetDropHints","item","stopPropagation","_computeDropHintToBeShown","clientX","columnReorderProps","_getColumnReorderProps","targetIndex","_currentDropHintIndex","isValidDrop","_isValidCurrentDropHintIndex","_onDropIndexInfo","sourceIndex","onColumnDrop","dragDropDetails","draggedIndex","handleColumnReorder","_dropHintDetails","itemIndex","_isCheckboxColumnHidden","_getDropHintPositions","onColumnDragStart","onColumnDragEnd","columnDragEndLocation","_isEventOnHeader","dropLocation","columns","_a","prevX","prevMid","prevRef","frozenColumnCountFromStart","frozenColumnCountFromEnd","i","length","_rootElement","current","dropHintElement","querySelectorAll","offsetLeft","newMid","originX","startX","endX","dropHintElementRef","isRtl","theme","clientRect","getBoundingClientRect","headerOriginX","left","eventXRelativePosition","currentDropHintIndex","_liesBetween","currentIndex","lastValidColumn","indexToUpdate","_isBefore","_isAfter","startIndex","endIndex","middleIndex","Math","ceil","_updateDropHintElement","columnIndex","_c","column","state","columnResizeDetails","classNames","_classNames","isResizable","key","role","onClick","_stopPropagation","onBlur","_onSizerBlur","className","cellSizer","cellSizerStart","cellSizerEnd","_b","cellIsResizing","onDoubleClick","_onSizerDoubleClick","bind","tooltipHostProps","hostClassName","children","selection","toggleAllSelected","ev","columnIndexAttr","target","getAttribute","Number","button","setState","columnMinWidth","calculatedWidth","preventDefault","isSizing","onColumnResized","which","enter","increment","undefined","right","shiftKey","buttons","onColumnIsSizingChanged","_onSizerMouseUp","movement","onToggleCollapseAll","newCollapsed","isAllCollapsed","_events","isAllSelected","_id","_dragDropHelper","getSelection","minimumPixelsForDrag","DetailsHeaderBase","on","_onSelectionChanged","_onRootMouseDown","_onRootKeyDown","_subscriptionObject","subscribe","_getHeaderDragDropOptions","prevProps","dispose","previousColumns","ariaLabel","ariaLabelForToggleAllGroupsButton","ariaLabelForSelectAllCheckbox","selectAllVisibility","ariaLabelForSelectionColumn","indentWidth","onColumnClick","onColumnContextMenu","onRenderColumnHeaderTooltip","_onRenderColumnHeaderTooltip","styles","selectionMode","onRenderDetailsCheckbox","groupNestingDepth","useFastIcons","checkboxVisibility","showCheckbox","none","isCheckboxHidden","hidden","isCheckboxAlwaysVisible","always","isSelectAllHidden","isResizingColumn","IconComponent","showGroupExpander","collapseAllVisibility","visible","columnIndexOffset","isRTL","root","componentRef","_rootComponent","elementRef","onMouseMove","_onRootMouseMove","direction","horizontal","cellIsCheck","_onSelectAllClicked","checkTooltip","id","setAriaDescribedBy","content","multiple","isHeader","selected","anySelected","canSelect","check","isVisible","accessibleLabel","cellIsGroupExpander","_onToggleCollapseAll","collapseButton","iconName","count","map","_isDraggable","_renderDropHint","parentId","isDraggable","updateDragInfo","_updateDragInfo","dragDropHelper","isDropped","cellStyleProps","_renderColumnDivider","sizingOverlay","_onSizerMouseMove","onMouseUp","focus","columnReorderOptions","options","selectionIndex","context","data","index","canDrag","canDrop","onDragStart","updateDropState","_updateDroppingState","onDrop","_onDrop","onDragEnd","onDragOver","_onDragOver","element","displayProperty","childNodes","style","display","clientY","top","bottom","header","onRenderDivider","_renderColumnSizer","dropHintIndex","dropHintStyle","dropHintCaretStyle","dropHintLineStyle","onColumnAutoResized","Component","rtl","a","b"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsHeader.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, getRTL, getId, KeyCodes, classNamesFunction } from '../../Utilities';\nimport { ColumnDragEndLocation, CheckboxVisibility } from './DetailsList.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon, FontIcon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { DragDropHelper } from '../../DragDrop';\nimport { DetailsColumn } from '../../components/DetailsList/DetailsColumn';\nimport { SelectAllVisibility } from './DetailsHeader.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IDisposable } from '../../Utilities';\nimport type { IColumn, IDetailsHeaderBaseProps, IColumnDragDropDetails } from './DetailsList.types';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { ITooltipHostProps } from '../../Tooltip';\nimport type { ISelection } from '../../Selection';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type { IDetailsColumnProps } from '../../components/DetailsList/DetailsColumn';\nimport type {\n  IDropHintDetails,\n  IColumnReorderHeaderProps,\n  IDetailsHeaderState,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles,\n  IDetailsHeader,\n} from './DetailsHeader.types';\n\nconst getClassNames = classNamesFunction<IDetailsHeaderStyleProps, IDetailsHeaderStyles>();\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsHeaderBase\n  extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState>\n  implements IDetailsHeader {\n  public static defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible,\n    useFastIcons: true,\n  };\n\n  private _classNames: IProcessedStyleSet<IDetailsHeaderStyles>;\n  private _rootElement = React.createRef<HTMLElement>();\n  private _events: EventGroup;\n  private _rootComponent = React.createRef<IFocusZone>();\n  private _id: string;\n  private _draggedColumnIndex = -1;\n  private _dropHintDetails: { [key: number]: IDropHintDetails } = {};\n  private _dragDropHelper: DragDropHelper;\n  private _currentDropHintIndex: number;\n  private _subscriptionObject?: IDisposable;\n  private _onDropIndexInfo: {\n    sourceIndex: number;\n    targetIndex: number;\n  };\n\n  constructor(props: IDetailsHeaderBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      columnResizeDetails: undefined,\n      isAllCollapsed: this.props.isAllCollapsed,\n      isAllSelected: !!this.props.selection && this.props.selection.isAllSelected(),\n    };\n\n    this._onDropIndexInfo = {\n      sourceIndex: -1,\n      targetIndex: -1,\n    };\n    this._id = getId('header');\n    this._currentDropHintIndex = -1;\n\n    // The drag drop handler won't do any work until subscribe() is called,\n    // so always set it up for convenience\n    this._dragDropHelper = new DragDropHelper({\n      selection: {\n        getSelection: () => {\n          return;\n        },\n      } as ISelection,\n      minimumPixelsForDrag: this.props.minimumPixelsForDrag,\n    });\n  }\n\n  public componentDidMount(): void {\n    const { selection } = this.props;\n\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n\n    // this._rootElement.current will be null in tests using react-test-renderer\n    if (this._rootElement.current) {\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n\n      if (this._getColumnReorderProps()) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void {\n    if (this._getColumnReorderProps()) {\n      if (!this._subscriptionObject && this._rootElement.current) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    } else if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      const { columns: previousColumns = NO_COLUMNS } = prevProps;\n      const { columns = NO_COLUMNS } = this.props;\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: -1,\n          targetIndex: -1,\n        };\n      }\n    }\n\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n      this.setState({ isAllCollapsed: this.props.isAllCollapsed });\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    this._dragDropHelper.dispose();\n\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element {\n    const {\n      columns = NO_COLUMNS,\n      ariaLabel,\n      ariaLabelForToggleAllGroupsButton,\n      ariaLabelForSelectAllCheckbox,\n      selectAllVisibility,\n      ariaLabelForSelectionColumn,\n      indentWidth,\n      onColumnClick,\n      onColumnContextMenu,\n      onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip,\n      styles,\n      selectionMode,\n      theme,\n      onRenderDetailsCheckbox,\n      groupNestingDepth,\n      useFastIcons,\n      checkboxVisibility,\n      className,\n    } = this.props;\n    const { isAllSelected, columnResizeDetails, isSizing, isAllCollapsed } = this.state;\n    const showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    const isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n    const isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\n\n    const columnReorderProps = this._getColumnReorderProps();\n    const frozenColumnCountFromStart =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromStart\n        ? columnReorderProps.frozenColumnCountFromStart\n        : 0;\n    const frozenColumnCountFromEnd =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\n        ? columnReorderProps.frozenColumnCountFromEnd\n        : 0;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing,\n      isAllCollapsed,\n      isCheckboxHidden,\n      className,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n    const showGroupExpander =\n      groupNestingDepth! > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible;\n    const columnIndexOffset = 1 + (showCheckbox ? 1 : 0) + (showGroupExpander ? 1 : 0);\n\n    const isRTL = getRTL(theme);\n    return (\n      <FocusZone\n        role=\"row\"\n        aria-label={ariaLabel}\n        className={classNames.root}\n        componentRef={this._rootComponent}\n        elementRef={this._rootElement}\n        onMouseMove={this._onRootMouseMove}\n        data-automationid=\"DetailsHeader\"\n        direction={FocusZoneDirection.horizontal}\n      >\n        {showCheckbox\n          ? [\n              <div\n                key=\"__checkbox\"\n                className={classNames.cellIsCheck}\n                aria-labelledby={`${this._id}-checkTooltip`}\n                onClick={!isCheckboxHidden ? this._onSelectAllClicked : undefined}\n                role={'columnheader'}\n              >\n                {onRenderColumnHeaderTooltip(\n                  {\n                    hostClassName: classNames.checkTooltip,\n                    id: `${this._id}-checkTooltip`,\n                    setAriaDescribedBy: false,\n                    content: ariaLabelForSelectAllCheckbox,\n                    children: (\n                      <DetailsRowCheck\n                        id={`${this._id}-check`}\n                        aria-label={\n                          selectionMode === SelectionMode.multiple\n                            ? ariaLabelForSelectAllCheckbox\n                            : ariaLabelForSelectionColumn\n                        }\n                        data-is-focusable={!isCheckboxHidden || undefined}\n                        isHeader={true}\n                        selected={isAllSelected}\n                        anySelected={false}\n                        canSelect={!isCheckboxHidden}\n                        className={classNames.check}\n                        onRenderDetailsCheckbox={onRenderDetailsCheckbox}\n                        useFastIcons={useFastIcons}\n                        isVisible={isCheckboxAlwaysVisible}\n                      />\n                    ),\n                  },\n                  this._onRenderColumnHeaderTooltip,\n                )}\n              </div>,\n              !this.props.onRenderColumnHeaderTooltip ? (\n                ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectAllCheckbox}\n                  </label>\n                ) : ariaLabelForSelectionColumn && isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectionColumn}\n                  </label>\n                ) : null\n              ) : null,\n            ]\n          : null}\n        {showGroupExpander ? (\n          <div\n            className={classNames.cellIsGroupExpander}\n            onClick={this._onToggleCollapseAll}\n            data-is-focusable={true}\n            aria-label={ariaLabelForToggleAllGroupsButton}\n            aria-expanded={!isAllCollapsed}\n            role=\"columnheader\"\n          >\n            <IconComponent\n              className={classNames.collapseButton}\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\n            />\n            {/* Use this span in addition to aria-label, otherwise VoiceOver ignores the column */}\n            <span className={classNames.accessibleLabel}>{ariaLabelForToggleAllGroupsButton}</span>\n          </div>\n        ) : null}\n        <GroupSpacer indentWidth={indentWidth} role=\"gridcell\" count={groupNestingDepth! - 1} />\n        {columns.map((column: IColumn, columnIndex: number) => {\n          const _isDraggable = columnReorderProps\n            ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\n            : false;\n          return [\n            columnReorderProps &&\n              (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\n              this._renderDropHint(columnIndex),\n            <DetailsColumn\n              column={column}\n              styles={column.styles}\n              key={column.key}\n              columnIndex={columnIndexOffset + columnIndex}\n              parentId={this._id}\n              isDraggable={_isDraggable}\n              updateDragInfo={this._updateDragInfo}\n              dragDropHelper={this._dragDropHelper}\n              onColumnClick={onColumnClick}\n              onColumnContextMenu={onColumnContextMenu}\n              // Do not render tooltips by default, but allow for override via props.\n              onRenderColumnHeaderTooltip={this.props.onRenderColumnHeaderTooltip}\n              isDropped={this._onDropIndexInfo.targetIndex === columnIndex}\n              cellStyleProps={this.props.cellStyleProps}\n              useFastIcons={useFastIcons}\n            />,\n            this._renderColumnDivider(columnIndex),\n          ];\n        })}\n        {columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length)}\n        {isSizing && (\n          <Layer>\n            <div\n              className={classNames.sizingOverlay}\n              onMouseMove={this._onSizerMouseMove}\n              onMouseUp={this._onSizerMouseUp}\n            />\n          </Layer>\n        )}\n      </FocusZone>\n    );\n  }\n\n  /** Set focus to the active thing in the focus area. */\n  public focus(): boolean {\n    return !!this._rootComponent.current?.focus();\n  }\n\n  /**\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\n   * (because drag/drop handling will only be set up if reorder props are given).\n   */\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\n    const { columnReorderOptions, columnReorderProps } = this.props;\n    return columnReorderProps || (columnReorderOptions && { ...columnReorderOptions, onColumnDragEnd: undefined });\n  }\n\n  private _getHeaderDragDropOptions(): IDragDropOptions {\n    const options = {\n      selectionIndex: 1,\n      context: { data: this, index: 0 },\n      canDrag: () => false,\n      canDrop: () => true,\n      onDragStart: () => undefined,\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: () => undefined,\n      onDragOver: this._onDragOver,\n    };\n    return options;\n  }\n\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n      this._resetDropHints();\n    }\n  };\n\n  private _isValidCurrentDropHintIndex() {\n    return this._currentDropHintIndex >= 0;\n  }\n\n  private _onDragOver = (item: any, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0) {\n      event.stopPropagation();\n      this._computeDropHintToBeShown(event.clientX);\n    }\n  };\n\n  private _onDrop = (item?: any, event?: DragEvent): void => {\n    // Safe to assume this is defined since we're handling a drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n\n    // Target index will not get changed if draggeditem is after target item.\n    if (this._draggedColumnIndex >= 0 && event) {\n      const targetIndex =\n        this._draggedColumnIndex > this._currentDropHintIndex\n          ? this._currentDropHintIndex\n          : this._currentDropHintIndex - 1;\n      const isValidDrop = this._isValidCurrentDropHintIndex();\n      event.stopPropagation();\n      if (isValidDrop) {\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\n        this._onDropIndexInfo.targetIndex = targetIndex;\n\n        if (columnReorderProps.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex: this._draggedColumnIndex,\n            targetIndex: targetIndex,\n          };\n          columnReorderProps.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderProps.handleColumnReorder) {\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n\n    this._resetDropHints();\n    this._dropHintDetails = {};\n    this._draggedColumnIndex = -1;\n  };\n\n  /**\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\n   */\n  private _isCheckboxColumnHidden(): boolean {\n    const { selectionMode, checkboxVisibility } = this.props;\n\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  }\n\n  private _updateDragInfo = (props: { itemIndex: number }, event?: MouseEvent) => {\n    // Safe to assume this is defined since we're handling a drag event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    const itemIndex = props.itemIndex;\n    if (itemIndex >= 0) {\n      // Column index is set based on the checkbox\n      this._draggedColumnIndex = this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\n      this._getDropHintPositions();\n      if (columnReorderProps.onColumnDragStart) {\n        columnReorderProps.onColumnDragStart(true);\n      }\n    } else if (event && this._draggedColumnIndex >= 0) {\n      this._resetDropHints();\n      this._draggedColumnIndex = -1;\n      this._dropHintDetails = {};\n      if (columnReorderProps.onColumnDragEnd) {\n        const columnDragEndLocation = this._isEventOnHeader(event);\n        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\n      }\n    }\n  };\n\n  private _resetDropHints(): void {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n      this._currentDropHintIndex = -1;\n    }\n  }\n\n  private _updateDropHintElement(element: HTMLElement, displayProperty: string) {\n    (element.childNodes[1] as HTMLElement).style.display = displayProperty;\n    (element.childNodes[0] as HTMLElement).style.display = displayProperty;\n  }\n\n  private _getDropHintPositions = (): void => {\n    const { columns = NO_COLUMNS } = this.props;\n    // Safe to assume this is defined since we're handling a drag/drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    let prevX = 0;\n    let prevMid = 0;\n    let prevRef: HTMLElement;\n    const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n    const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n    for (let i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n      if (this._rootElement.current) {\n        const dropHintElement = this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0] as HTMLElement;\n        if (dropHintElement) {\n          if (i === frozenColumnCountFromStart) {\n            prevX = dropHintElement.offsetLeft;\n            prevMid = dropHintElement.offsetLeft;\n            prevRef = dropHintElement;\n          } else {\n            const newMid = (dropHintElement.offsetLeft + prevX!) / 2;\n            this._dropHintDetails[i - 1] = {\n              originX: prevX,\n              startX: prevMid!,\n              endX: newMid,\n              dropHintElementRef: prevRef!,\n            };\n            prevMid = newMid;\n            prevRef = dropHintElement;\n            prevX = dropHintElement.offsetLeft;\n            if (i === columns.length - frozenColumnCountFromEnd) {\n              this._dropHintDetails[i] = {\n                originX: prevX,\n                startX: prevMid!,\n                endX: dropHintElement.offsetLeft,\n                dropHintElementRef: prevRef,\n              };\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n   */\n  private _computeDropHintToBeShown = (clientX: number): void => {\n    const isRtl = getRTL(this.props.theme);\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      const headerOriginX = clientRect.left;\n      const eventXRelativePosition = clientX - headerOriginX;\n      const currentDropHintIndex = this._currentDropHintIndex;\n      if (this._isValidCurrentDropHintIndex()) {\n        if (\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex!].startX,\n            this._dropHintDetails[currentDropHintIndex!].endX,\n          )\n        ) {\n          return;\n        }\n      }\n      const { columns = NO_COLUMNS } = this.props;\n      // Safe to assume this is defined since we're handling a drag/drop event\n      const columnReorderProps = this._getColumnReorderProps()!;\n      const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n      const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n      const currentIndex: number = frozenColumnCountFromStart;\n      const lastValidColumn = columns.length - frozenColumnCountFromEnd;\n      let indexToUpdate = -1;\n      if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[currentIndex].endX)) {\n        indexToUpdate = currentIndex;\n      } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[lastValidColumn].startX)) {\n        indexToUpdate = lastValidColumn;\n      } else if (this._isValidCurrentDropHintIndex()) {\n        if (\n          this._dropHintDetails[currentDropHintIndex! + 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! + 1].startX,\n            this._dropHintDetails[currentDropHintIndex! + 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! + 1;\n        } else if (\n          this._dropHintDetails[currentDropHintIndex! - 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! - 1].startX,\n            this._dropHintDetails[currentDropHintIndex! - 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! - 1;\n        }\n      }\n      if (indexToUpdate === -1) {\n        let startIndex = frozenColumnCountFromStart;\n        let endIndex = lastValidColumn;\n        while (startIndex < endIndex) {\n          const middleIndex = Math.ceil((endIndex + startIndex!) / 2);\n          if (\n            _liesBetween(\n              isRtl,\n              eventXRelativePosition,\n              this._dropHintDetails[middleIndex].startX,\n              this._dropHintDetails[middleIndex].endX,\n            )\n          ) {\n            indexToUpdate = middleIndex;\n            break;\n          } else if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            endIndex = middleIndex;\n          } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            startIndex = middleIndex;\n          }\n        }\n      }\n\n      if (indexToUpdate === this._draggedColumnIndex || indexToUpdate === this._draggedColumnIndex + 1) {\n        if (this._isValidCurrentDropHintIndex()) {\n          this._resetDropHints();\n        }\n      } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n        this._resetDropHints();\n        this._updateDropHintElement(this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n        this._currentDropHintIndex = indexToUpdate;\n      }\n    }\n  };\n\n  private _isEventOnHeader(event: MouseEvent): ColumnDragEndLocation | undefined {\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      if (\n        event.clientX > clientRect.left &&\n        event.clientX < clientRect.right &&\n        event.clientY > clientRect.top &&\n        event.clientY < clientRect.bottom\n      ) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  }\n\n  private _renderColumnSizer = ({ columnIndex }: IDetailsColumnProps): JSX.Element | null => {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { columnResizeDetails } = this.state;\n    const classNames = this._classNames;\n\n    return column.isResizable ? (\n      <div\n        key={`${column.key}_sizer`}\n        aria-hidden={true}\n        role=\"button\"\n        data-is-focusable={false}\n        onClick={_stopPropagation}\n        data-sizer-index={columnIndex}\n        onBlur={this._onSizerBlur}\n        className={css(\n          classNames.cellSizer,\n          columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd,\n          {\n            [classNames.cellIsResizing]: columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\n          },\n        )}\n        onDoubleClick={this._onSizerDoubleClick.bind(this, columnIndex)}\n      />\n    ) : null;\n  };\n\n  private _renderColumnDivider(columnIndex: number): JSX.Element | null {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { onRenderDivider } = column;\n    return onRenderDivider\n      ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer)\n      : this._renderColumnSizer({ column, columnIndex });\n  }\n\n  private _renderDropHint(dropHintIndex: number): JSX.Element {\n    const classNames = this._classNames;\n    const IconComponent = this.props.useFastIcons ? FontIcon : Icon;\n    return (\n      <div key={'dropHintKey'} className={classNames.dropHintStyle} id={`columnDropHint_${dropHintIndex}`}>\n        <div\n          role=\"presentation\"\n          key={`dropHintCircleKey`}\n          className={classNames.dropHintCaretStyle}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          aria-hidden={true}\n        >\n          <IconComponent iconName={'CircleShapeSolid'} />\n        </div>\n        <div\n          key={`dropHintLineKey`}\n          aria-hidden={true}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          className={classNames.dropHintLineStyle}\n        />\n      </div>\n    );\n  }\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: ITooltipHostProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  /**\n   * double click on the column sizer will auto ajust column width\n   * to fit the longest content among current rendered rows.\n   *\n   * @param columnIndex - index of the column user double clicked\n   * @param ev - mouse double click event\n   */\n  private _onSizerDoubleClick(columnIndex: number, ev: React.MouseEvent<HTMLElement>): void {\n    const { onColumnAutoResized, columns = NO_COLUMNS } = this.props;\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  }\n\n  /**\n   * Called when the select all toggle is clicked.\n   */\n  private _onSelectAllClicked = (): void => {\n    const { selection } = this.props;\n\n    if (selection) {\n      selection.toggleAllSelected();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n    const columnIndex = Number(columnIndexAttr);\n    const { columns = NO_COLUMNS } = this.props;\n\n    if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    this.setState({\n      columnResizeDetails: {\n        columnIndex: columnIndex,\n        columnMinWidth: columns[columnIndex].calculatedWidth!,\n        originX: ev.clientX,\n      },\n    });\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onRootMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n\n    if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n      this.setState({ isSizing: true });\n    }\n  };\n\n  private _onRootKeyDown = (ev: KeyboardEvent): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n    const { columns = NO_COLUMNS, onColumnResized } = this.props;\n\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n\n    if (!columnIndexAttr || isSizing) {\n      return;\n    }\n\n    const columnIndex = Number(columnIndexAttr);\n\n    if (!columnResizeDetails) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: {\n            columnIndex: columnIndex,\n            columnMinWidth: columns[columnIndex].calculatedWidth!,\n          },\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    } else {\n      let increment: number | undefined;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: undefined,\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.left) {\n        increment = getRTL(this.props.theme) ? 1 : -1;\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.right) {\n        increment = getRTL(this.props.theme) ? -1 : 1;\n      }\n\n      if (increment) {\n        if (!ev.shiftKey) {\n          increment *= 10;\n        }\n\n        this.setState({\n          columnResizeDetails: {\n            ...columnResizeDetails,\n            columnMinWidth: columnResizeDetails.columnMinWidth + increment,\n          },\n        });\n\n        if (onColumnResized) {\n          onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n\n  /**\n   * mouse move event handler in the header\n   * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n   *\n   * @param ev - mouse move event\n   */\n  private _onSizerMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const {\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons,\n    } = ev;\n    const { onColumnIsSizingChanged, onColumnResized, columns = NO_COLUMNS } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onSizerMouseUp(ev);\n      return;\n    }\n\n    if (ev.clientX !== columnResizeDetails!.originX) {\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], true);\n      }\n    }\n\n    if (onColumnResized) {\n      let movement = ev.clientX - columnResizeDetails!.originX!;\n\n      if (getRTL(this.props.theme)) {\n        movement = -movement;\n      }\n\n      onColumnResized(\n        columns[columnResizeDetails!.columnIndex],\n        columnResizeDetails!.columnMinWidth + movement,\n        columnResizeDetails!.columnIndex,\n      );\n    }\n  };\n\n  private _onSizerBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { columnResizeDetails } = this.state;\n\n    if (columnResizeDetails) {\n      this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false,\n      });\n    }\n  };\n\n  /**\n   * mouse up event handler in the header\n   * clear the resize related state.\n   * This is to ensure we can catch double click event\n   *\n   * @param ev - mouse up event\n   */\n  private _onSizerMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columns = NO_COLUMNS, onColumnIsSizingChanged } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    this.setState({\n      columnResizeDetails: undefined,\n      isSizing: false,\n    });\n\n    if (onColumnIsSizingChanged) {\n      onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], false);\n    }\n  };\n\n  private _onSelectionChanged(): void {\n    const isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected: isAllSelected,\n      });\n    }\n  }\n\n  private _onToggleCollapseAll = (): void => {\n    const { onToggleCollapseAll } = this.props;\n    const newCollapsed = !this.state.isAllCollapsed;\n    this.setState({\n      isAllCollapsed: newCollapsed,\n    });\n    if (onToggleCollapseAll) {\n      onToggleCollapseAll(newCollapsed);\n    }\n  };\n}\n\nfunction _liesBetween(rtl: boolean, target: number, left: number, right: number): boolean {\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\nfunction _isBefore(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a >= b : a <= b;\n}\nfunction _isAfter(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a <= b : a >= b;\n}\n\nfunction _stopPropagation(ev: React.MouseEvent<HTMLElement>): void {\n  ev.stopPropagation();\n}\n"]},"metadata":{},"sourceType":"module"}