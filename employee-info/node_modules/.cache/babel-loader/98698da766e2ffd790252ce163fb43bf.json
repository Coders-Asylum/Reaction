{"ast":null,"code":"export var TextStyles = function TextStyles(props, theme) {\n  var as = props.as,\n      className = props.className,\n      block = props.block,\n      nowrap = props.nowrap,\n      variant = props.variant;\n  var fonts = theme.fonts,\n      semanticColors = theme.semanticColors;\n  var variantObject = fonts[variant || 'medium'];\n  return {\n    root: [variantObject, {\n      color: variantObject.color || semanticColors.bodyText,\n      display: block ? as === 'td' ? 'table-cell' : 'block' : 'inline',\n      mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n      webkitFontSmoothing: variantObject.WebkitFontSmoothing\n    }, nowrap && {\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    }, className]\n  };\n};","map":{"version":3,"mappings":"AAGA,OAAO,IAAMA,UAAU,GAA6B,SAAvCA,UAAuC,CAACC,KAAD,EAAoBC,KAApB,EAAiC;AAC3E,QAAE,GAAwCD,KAAK,GAA/C;AAAA,MAAIE,SAAS,GAA6BF,KAAK,UAA/C;AAAA,MAAeG,KAAK,GAAsBH,KAAK,MAA/C;AAAA,MAAsBI,MAAM,GAAcJ,KAAK,OAA/C;AAAA,MAA8BK,OAAO,GAAKL,KAAK,QAA/C;AACA,WAAK,GAAqBC,KAAK,MAA/B;AAAA,MAAOK,cAAc,GAAKL,KAAK,eAA/B;AACR,MAAMM,aAAa,GAAGC,KAAK,CAACH,OAAO,IAAI,QAAZ,CAA3B;AAEA,SAAO;AACLI,QAAI,EAAE,CACJF,aADI,EAEJ;AACEG,WAAK,EAAEH,aAAa,CAACG,KAAd,IAAuBJ,cAAc,CAACK,QAD/C;AAEEC,aAAO,EAAET,KAAK,GAAIU,EAAE,KAAK,IAAP,GAAc,YAAd,GAA6B,OAAjC,GAA4C,QAF5D;AAGEC,yBAAmB,EAAEP,aAAa,CAACQ,mBAHrC;AAIEC,yBAAmB,EAAET,aAAa,CAACU;AAJrC,KAFI,EAQJb,MAAM,IAAI;AACRc,gBAAU,EAAE,QADJ;AAERC,cAAQ,EAAE,QAFF;AAGRC,kBAAY,EAAE;AAHN,KARN,EAaJlB,SAbI;AADD,GAAP;AAiBD,CAtBM","names":["TextStyles","props","theme","className","block","nowrap","variant","semanticColors","variantObject","fonts","root","color","bodyText","display","as","mozOsxFontSmoothing","MozOsxFontSmoothing","webkitFontSmoothing","WebkitFontSmoothing","whiteSpace","overflow","textOverflow"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/Text/Text.styles.ts"],"sourcesContent":["import type { ITextComponent, ITextStyles, ITextStylesReturnType, ITextProps } from './Text.types';\nimport type { ITheme } from '../../Styling';\n\nexport const TextStyles: ITextComponent['styles'] = (props: ITextProps, theme: ITheme): ITextStylesReturnType => {\n  const { as, className, block, nowrap, variant } = props;\n  const { fonts, semanticColors } = theme;\n  const variantObject = fonts[variant || 'medium'];\n\n  return {\n    root: [\n      variantObject,\n      {\n        color: variantObject.color || semanticColors.bodyText,\n        display: block ? (as === 'td' ? 'table-cell' : 'block') : 'inline',\n        mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n        webkitFontSmoothing: variantObject.WebkitFontSmoothing,\n      },\n      nowrap && {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      },\n      className,\n    ],\n  } as ITextStyles;\n};\n"]},"metadata":{},"sourceType":"module"}