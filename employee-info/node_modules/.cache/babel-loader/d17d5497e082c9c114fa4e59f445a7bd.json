{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { DayOfWeek, FirstWeekOfYear, DateRangeType, addMonths, addYears, DEFAULT_CALENDAR_STRINGS, DEFAULT_DATE_FORMATTING } from '@fluentui/date-time-utilities';\nimport { CalendarDay } from './CalendarDay/CalendarDay';\nimport { CalendarMonth } from './CalendarMonth/CalendarMonth';\nimport { css, KeyCodes, classNamesFunction, focusAsync, format, FocusRects, getPropsWithDefaults, getWindow } from '@fluentui/utilities';\nimport { useControllableValue } from '@fluentui/react-hooks';\nimport { defaultCalendarNavigationIcons } from './defaults';\nvar MIN_SIZE_FORCE_OVERLAY = 440;\nvar getClassNames = classNamesFunction();\nvar defaultWorkWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\nvar DEFAULT_PROPS = {\n  isMonthPickerVisible: true,\n  isDayPickerVisible: true,\n  showMonthPickerAsOverlay: false,\n  today: new Date(),\n  firstDayOfWeek: DayOfWeek.Sunday,\n  dateRangeType: DateRangeType.Day,\n  showGoToToday: true,\n  strings: DEFAULT_CALENDAR_STRINGS,\n  highlightCurrentMonth: false,\n  highlightSelectedMonth: false,\n  navigationIcons: defaultCalendarNavigationIcons,\n  showWeekNumbers: false,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  dateTimeFormatter: DEFAULT_DATE_FORMATTING,\n  showSixWeeksByDefault: false,\n  workWeekDays: defaultWorkWeekDays,\n  showCloseButton: false,\n  allFocusable: false\n};\n\nfunction useDateState(_a) {\n  var value = _a.value,\n      _b = _a.today,\n      today = _b === void 0 ? new Date() : _b,\n      onSelectDate = _a.onSelectDate;\n  /** The currently selected date in the calendar */\n\n  var _c = useControllableValue(value, today),\n      _d = _c[0],\n      selectedDate = _d === void 0 ? today : _d,\n      setSelectedDate = _c[1];\n  /** The currently focused date in the day picker, but not necessarily selected */\n\n\n  var _e = React.useState(value),\n      _f = _e[0],\n      navigatedDay = _f === void 0 ? today : _f,\n      setNavigatedDay = _e[1];\n  /** The currently focused date in the month picker, but not necessarily selected */\n\n\n  var _g = React.useState(value),\n      _h = _g[0],\n      navigatedMonth = _h === void 0 ? today : _h,\n      setNavigatedMonth = _g[1];\n  /** If using a controlled value, when that value changes, navigate to that date */\n\n\n  var _j = React.useState(value),\n      _k = _j[0],\n      lastSelectedDate = _k === void 0 ? today : _k,\n      setLastSelectedDate = _j[1];\n\n  if (value && lastSelectedDate.valueOf() !== value.valueOf()) {\n    setNavigatedDay(value);\n    setNavigatedMonth(value);\n    setLastSelectedDate(value);\n  }\n\n  var navigateMonth = function navigateMonth(date) {\n    setNavigatedMonth(date);\n  };\n\n  var navigateDay = function navigateDay(date) {\n    setNavigatedMonth(date);\n    setNavigatedDay(date);\n  };\n\n  var onDateSelected = function onDateSelected(date, selectedDateRangeArray) {\n    setNavigatedMonth(date);\n    setNavigatedDay(date);\n    setSelectedDate(date);\n    onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(date, selectedDateRangeArray);\n  };\n\n  return [selectedDate, navigatedDay, navigatedMonth, onDateSelected, navigateDay, navigateMonth];\n}\n\nfunction useVisibilityState(props) {\n  /** State used to show/hide month picker */\n  var _a = useControllableValue(getShowMonthPickerAsOverlay(props) ? undefined : props.isMonthPickerVisible, false),\n      _b = _a[0],\n      isMonthPickerVisible = _b === void 0 ? true : _b,\n      setIsMonthPickerVisible = _a[1];\n  /** State used to show/hide day picker */\n\n\n  var _c = useControllableValue(getShowMonthPickerAsOverlay(props) ? undefined : props.isDayPickerVisible, true),\n      _d = _c[0],\n      isDayPickerVisible = _d === void 0 ? true : _d,\n      setIsDayPickerVisible = _c[1];\n\n  var toggleDayMonthPickerVisibility = function toggleDayMonthPickerVisibility() {\n    setIsMonthPickerVisible(!isMonthPickerVisible);\n    setIsDayPickerVisible(!isDayPickerVisible);\n  };\n\n  return [isMonthPickerVisible, isDayPickerVisible, toggleDayMonthPickerVisibility];\n}\n\nfunction useFocusLogic(_a, isDayPickerVisible, isMonthPickerVisible) {\n  var componentRef = _a.componentRef;\n  var dayPicker = React.useRef(null);\n  var monthPicker = React.useRef(null);\n  var focusOnUpdate = React.useRef(false);\n  var focus = React.useCallback(function () {\n    if (isDayPickerVisible && dayPicker.current) {\n      focusAsync(dayPicker.current);\n    } else if (isMonthPickerVisible && monthPicker.current) {\n      focusAsync(monthPicker.current);\n    }\n  }, [isDayPickerVisible, isMonthPickerVisible]);\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      focus: focus\n    };\n  }, [focus]);\n  React.useEffect(function () {\n    if (focusOnUpdate.current) {\n      focus();\n      focusOnUpdate.current = false;\n    }\n  });\n\n  var focusOnNextUpdate = function focusOnNextUpdate() {\n    focusOnUpdate.current = true;\n  };\n\n  return [dayPicker, monthPicker, focusOnNextUpdate];\n}\n\nexport var CalendarBase = React.forwardRef(function (propsWithoutDefaults, forwardedRef) {\n  var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n\n  var _a = useDateState(props),\n      selectedDate = _a[0],\n      navigatedDay = _a[1],\n      navigatedMonth = _a[2],\n      onDateSelected = _a[3],\n      navigateDay = _a[4],\n      navigateMonth = _a[5];\n\n  var _b = useVisibilityState(props),\n      isMonthPickerVisible = _b[0],\n      isDayPickerVisible = _b[1],\n      toggleDayMonthPickerVisibility = _b[2];\n\n  var _c = useFocusLogic(props, isDayPickerVisible, isMonthPickerVisible),\n      dayPicker = _c[0],\n      monthPicker = _c[1],\n      focusOnNextUpdate = _c[2];\n\n  var renderGoToTodayButton = function renderGoToTodayButton() {\n    var goTodayEnabled = showGoToToday;\n\n    if (goTodayEnabled && today) {\n      goTodayEnabled = navigatedDay.getFullYear() !== today.getFullYear() || navigatedDay.getMonth() !== today.getMonth() || navigatedMonth.getFullYear() !== today.getFullYear() || navigatedMonth.getMonth() !== today.getMonth();\n    }\n\n    return showGoToToday && React.createElement(\"button\", {\n      className: css('js-goToday', classes.goTodayButton),\n      onClick: onGotoToday,\n      onKeyDown: onButtonKeyDown(onGotoToday),\n      type: \"button\",\n      disabled: !goTodayEnabled\n    }, strings.goToToday);\n  };\n\n  var onNavigateDayDate = function onNavigateDayDate(date, focusOnNavigatedDay) {\n    navigateDay(date);\n\n    if (focusOnNavigatedDay) {\n      focusOnNextUpdate();\n    }\n  };\n\n  var onNavigateMonthDate = function onNavigateMonthDate(date, focusOnNavigatedDay) {\n    if (focusOnNavigatedDay) {\n      focusOnNextUpdate();\n    }\n\n    if (!focusOnNavigatedDay) {\n      navigateMonth(date);\n      return;\n    }\n\n    if (monthPickerOnly) {\n      onDateSelected(date);\n    }\n\n    navigateDay(date);\n  };\n\n  var onHeaderSelect = getShowMonthPickerAsOverlay(props) ? function () {\n    toggleDayMonthPickerVisibility();\n    focusOnNextUpdate();\n  } : undefined;\n\n  var onGotoToday = function onGotoToday() {\n    navigateDay(today);\n    focusOnNextUpdate();\n  };\n\n  var onButtonKeyDown = function onButtonKeyDown(callback) {\n    return function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      switch (ev.which) {\n        case KeyCodes.enter:\n        case KeyCodes.space:\n          callback();\n          break;\n      }\n    };\n  };\n\n  var onDatePickerPopupKeyDown = function onDatePickerPopupKeyDown(ev) {\n    var _a; // eslint-disable-next-line deprecation/deprecation\n\n\n    switch (ev.which) {\n      case KeyCodes.enter:\n        ev.preventDefault();\n        break;\n\n      case KeyCodes.backspace:\n        ev.preventDefault();\n        break;\n\n      case KeyCodes.escape:\n        (_a = props.onDismiss) === null || _a === void 0 ? void 0 : _a.call(props);\n        break;\n\n      case KeyCodes.pageUp:\n        if (ev.ctrlKey) {\n          // go to next year\n          navigateDay(addYears(navigatedDay, 1));\n        } else {\n          // go to next month\n          navigateDay(addMonths(navigatedDay, 1));\n        }\n\n        ev.preventDefault();\n        break;\n\n      case KeyCodes.pageDown:\n        if (ev.ctrlKey) {\n          // go to previous year\n          navigateDay(addYears(navigatedDay, -1));\n        } else {\n          // go to previous month\n          navigateDay(addMonths(navigatedDay, -1));\n        }\n\n        ev.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var rootClass = 'ms-DatePicker';\n  var firstDayOfWeek = props.firstDayOfWeek,\n      dateRangeType = props.dateRangeType,\n      strings = props.strings,\n      showGoToToday = props.showGoToToday,\n      highlightCurrentMonth = props.highlightCurrentMonth,\n      highlightSelectedMonth = props.highlightSelectedMonth,\n      navigationIcons = props.navigationIcons,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      restrictedDates = props.restrictedDates,\n      className = props.className,\n      showCloseButton = props.showCloseButton,\n      allFocusable = props.allFocusable,\n      styles = props.styles,\n      showWeekNumbers = props.showWeekNumbers,\n      theme = props.theme,\n      calendarDayProps = props.calendarDayProps,\n      calendarMonthProps = props.calendarMonthProps,\n      dateTimeFormatter = props.dateTimeFormatter,\n      _d = props.today,\n      today = _d === void 0 ? new Date() : _d;\n  var showMonthPickerAsOverlay = getShowMonthPickerAsOverlay(props);\n  var monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;\n  var overlaidWithButton = showMonthPickerAsOverlay && showGoToToday;\n  var classes = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    isMonthPickerVisible: isMonthPickerVisible,\n    isDayPickerVisible: isDayPickerVisible,\n    monthPickerOnly: monthPickerOnly,\n    showMonthPickerAsOverlay: showMonthPickerAsOverlay,\n    overlaidWithButton: overlaidWithButton,\n    overlayedWithButton: overlaidWithButton,\n    showGoToToday: showGoToToday,\n    showWeekNumbers: showWeekNumbers\n  });\n  var todayDateString = '';\n  var selectedDateString = '';\n\n  if (dateTimeFormatter && strings.todayDateFormatString) {\n    todayDateString = format(strings.todayDateFormatString, dateTimeFormatter.formatMonthDayYear(today, strings));\n  }\n\n  if (dateTimeFormatter && strings.selectedDateFormatString) {\n    selectedDateString = format(strings.selectedDateFormatString, dateTimeFormatter.formatMonthDayYear(selectedDate, strings));\n  }\n\n  var selectionAndTodayString = selectedDateString + ', ' + todayDateString;\n  return React.createElement(\"div\", {\n    ref: forwardedRef,\n    role: \"group\",\n    \"aria-label\": selectionAndTodayString,\n    className: css(rootClass, classes.root, className, 'ms-slideDownIn10'),\n    onKeyDown: onDatePickerPopupKeyDown\n  }, React.createElement(\"div\", {\n    className: classes.liveRegion,\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\"\n  }, React.createElement(\"span\", null, selectedDateString)), isDayPickerVisible && React.createElement(CalendarDay, __assign({\n    selectedDate: selectedDate,\n    navigatedDate: navigatedDay,\n    today: props.today,\n    onSelectDate: onDateSelected,\n    // eslint-disable-next-line react/jsx-no-bind\n    onNavigateDate: onNavigateDayDate,\n    onDismiss: props.onDismiss,\n    firstDayOfWeek: firstDayOfWeek,\n    dateRangeType: dateRangeType,\n    strings: strings,\n    // eslint-disable-next-line react/jsx-no-bind\n    onHeaderSelect: onHeaderSelect,\n    navigationIcons: navigationIcons,\n    showWeekNumbers: props.showWeekNumbers,\n    firstWeekOfYear: props.firstWeekOfYear,\n    dateTimeFormatter: props.dateTimeFormatter,\n    showSixWeeksByDefault: props.showSixWeeksByDefault,\n    minDate: minDate,\n    maxDate: maxDate,\n    restrictedDates: restrictedDates,\n    workWeekDays: props.workWeekDays,\n    componentRef: dayPicker,\n    showCloseButton: showCloseButton,\n    allFocusable: allFocusable\n  }, calendarDayProps)), isDayPickerVisible && isMonthPickerVisible && React.createElement(\"div\", {\n    className: classes.divider\n  }), isMonthPickerVisible ? React.createElement(\"div\", {\n    className: classes.monthPickerWrapper\n  }, React.createElement(CalendarMonth, __assign({\n    navigatedDate: navigatedMonth,\n    selectedDate: navigatedDay,\n    strings: strings,\n    // eslint-disable-next-line react/jsx-no-bind\n    onNavigateDate: onNavigateMonthDate,\n    today: props.today,\n    highlightCurrentMonth: highlightCurrentMonth,\n    highlightSelectedMonth: highlightSelectedMonth,\n    // eslint-disable-next-line react/jsx-no-bind\n    onHeaderSelect: onHeaderSelect,\n    navigationIcons: navigationIcons,\n    dateTimeFormatter: props.dateTimeFormatter,\n    minDate: minDate,\n    maxDate: maxDate,\n    componentRef: monthPicker\n  }, calendarMonthProps)), renderGoToTodayButton()) : renderGoToTodayButton(), React.createElement(FocusRects, null));\n});\nCalendarBase.displayName = 'CalendarBase';\n\nfunction getShowMonthPickerAsOverlay(props) {\n  var win = getWindow();\n  return props.showMonthPickerAsOverlay || win && win.innerWidth <= MIN_SIZE_FORCE_OVERLAY;\n}","map":{"version":3,"mappings":"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","names":["React","DayOfWeek","FirstWeekOfYear","DateRangeType","addMonths","addYears","DEFAULT_CALENDAR_STRINGS","DEFAULT_DATE_FORMATTING","CalendarDay","CalendarMonth","css","KeyCodes","classNamesFunction","focusAsync","format","FocusRects","getPropsWithDefaults","getWindow","useControllableValue","defaultCalendarNavigationIcons","MIN_SIZE_FORCE_OVERLAY","getClassNames","defaultWorkWeekDays","Monday","Tuesday","Wednesday","Thursday","Friday","DEFAULT_PROPS","isMonthPickerVisible","isDayPickerVisible","showMonthPickerAsOverlay","today","Date","firstDayOfWeek","Sunday","dateRangeType","Day","showGoToToday","strings","highlightCurrentMonth","highlightSelectedMonth","navigationIcons","showWeekNumbers","firstWeekOfYear","FirstDay","dateTimeFormatter","showSixWeeksByDefault","workWeekDays","showCloseButton","allFocusable","useDateState","_a","value","_b","onSelectDate","_d","selectedDate","setSelectedDate","useState","_f","navigatedDay","setNavigatedDay","_h","navigatedMonth","setNavigatedMonth","_k","lastSelectedDate","setLastSelectedDate","valueOf","navigateMonth","date","navigateDay","onDateSelected","selectedDateRangeArray","useVisibilityState","props","getShowMonthPickerAsOverlay","undefined","setIsMonthPickerVisible","setIsDayPickerVisible","toggleDayMonthPickerVisibility","useFocusLogic","componentRef","dayPicker","useRef","monthPicker","focusOnUpdate","focus","useCallback","current","useImperativeHandle","useEffect","focusOnNextUpdate","CalendarBase","forwardRef","propsWithoutDefaults","forwardedRef","renderGoToTodayButton","goTodayEnabled","getFullYear","getMonth","className","classes","goTodayButton","onClick","onGotoToday","onKeyDown","onButtonKeyDown","type","disabled","goToToday","onNavigateDayDate","focusOnNavigatedDay","onNavigateMonthDate","monthPickerOnly","onHeaderSelect","callback","ev","which","enter","space","onDatePickerPopupKeyDown","preventDefault","backspace","escape","onDismiss","pageUp","ctrlKey","pageDown","rootClass","minDate","maxDate","restrictedDates","styles","theme","calendarDayProps","calendarMonthProps","overlaidWithButton","overlayedWithButton","todayDateString","selectedDateString","todayDateFormatString","formatMonthDayYear","selectedDateFormatString","selectionAndTodayString","ref","role","root","liveRegion","__assign","navigatedDate","onNavigateDate","divider","monthPickerWrapper","displayName","win","innerWidth"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/Calendar/Calendar.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  DayOfWeek,\n  FirstWeekOfYear,\n  DateRangeType,\n  addMonths,\n  addYears,\n  DEFAULT_CALENDAR_STRINGS,\n  DEFAULT_DATE_FORMATTING,\n} from '@fluentui/date-time-utilities';\nimport { CalendarDay } from './CalendarDay/CalendarDay';\nimport { CalendarMonth } from './CalendarMonth/CalendarMonth';\nimport {\n  css,\n  KeyCodes,\n  classNamesFunction,\n  focusAsync,\n  format,\n  FocusRects,\n  getPropsWithDefaults,\n  getWindow,\n} from '@fluentui/utilities';\nimport { useControllableValue } from '@fluentui/react-hooks';\nimport { defaultCalendarNavigationIcons } from './defaults';\nimport type { ICalendarProps, ICalendarStyleProps, ICalendarStyles } from './Calendar.types';\nimport type { ICalendarDay } from './CalendarDay/CalendarDay.types';\nimport type { ICalendarMonth } from './CalendarMonth/CalendarMonth.types';\n\nconst MIN_SIZE_FORCE_OVERLAY = 440;\n\nconst getClassNames = classNamesFunction<ICalendarStyleProps, ICalendarStyles>();\n\nconst defaultWorkWeekDays: DayOfWeek[] = [\n  DayOfWeek.Monday,\n  DayOfWeek.Tuesday,\n  DayOfWeek.Wednesday,\n  DayOfWeek.Thursday,\n  DayOfWeek.Friday,\n];\n\nconst DEFAULT_PROPS: Partial<ICalendarProps> = {\n  isMonthPickerVisible: true,\n  isDayPickerVisible: true,\n  showMonthPickerAsOverlay: false,\n  today: new Date(),\n  firstDayOfWeek: DayOfWeek.Sunday,\n  dateRangeType: DateRangeType.Day,\n  showGoToToday: true,\n  strings: DEFAULT_CALENDAR_STRINGS,\n  highlightCurrentMonth: false,\n  highlightSelectedMonth: false,\n  navigationIcons: defaultCalendarNavigationIcons,\n  showWeekNumbers: false,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  dateTimeFormatter: DEFAULT_DATE_FORMATTING,\n  showSixWeeksByDefault: false,\n  workWeekDays: defaultWorkWeekDays,\n  showCloseButton: false,\n  allFocusable: false,\n};\n\nfunction useDateState({ value, today = new Date(), onSelectDate }: ICalendarProps) {\n  /** The currently selected date in the calendar */\n  const [selectedDate = today, setSelectedDate] = useControllableValue(value, today);\n\n  /** The currently focused date in the day picker, but not necessarily selected */\n  const [navigatedDay = today, setNavigatedDay] = React.useState(value);\n\n  /** The currently focused date in the month picker, but not necessarily selected */\n  const [navigatedMonth = today, setNavigatedMonth] = React.useState(value);\n\n  /** If using a controlled value, when that value changes, navigate to that date */\n  const [lastSelectedDate = today, setLastSelectedDate] = React.useState(value);\n  if (value && lastSelectedDate.valueOf() !== value.valueOf()) {\n    setNavigatedDay(value);\n    setNavigatedMonth(value);\n    setLastSelectedDate(value);\n  }\n\n  const navigateMonth = (date: Date) => {\n    setNavigatedMonth(date);\n  };\n\n  const navigateDay = (date: Date) => {\n    setNavigatedMonth(date);\n    setNavigatedDay(date);\n  };\n\n  const onDateSelected = (date: Date, selectedDateRangeArray?: Date[]) => {\n    setNavigatedMonth(date);\n    setNavigatedDay(date);\n    setSelectedDate(date);\n    onSelectDate?.(date, selectedDateRangeArray);\n  };\n\n  return [selectedDate, navigatedDay, navigatedMonth, onDateSelected, navigateDay, navigateMonth] as const;\n}\n\nfunction useVisibilityState(props: ICalendarProps) {\n  /** State used to show/hide month picker */\n  const [isMonthPickerVisible = true, setIsMonthPickerVisible] = useControllableValue(\n    getShowMonthPickerAsOverlay(props) ? undefined : props.isMonthPickerVisible,\n    false,\n  );\n  /** State used to show/hide day picker */\n  const [isDayPickerVisible = true, setIsDayPickerVisible] = useControllableValue(\n    getShowMonthPickerAsOverlay(props) ? undefined : props.isDayPickerVisible,\n    true,\n  );\n\n  const toggleDayMonthPickerVisibility = () => {\n    setIsMonthPickerVisible(!isMonthPickerVisible);\n    setIsDayPickerVisible(!isDayPickerVisible);\n  };\n\n  return [isMonthPickerVisible, isDayPickerVisible, toggleDayMonthPickerVisibility] as const;\n}\n\nfunction useFocusLogic({ componentRef }: ICalendarProps, isDayPickerVisible: boolean, isMonthPickerVisible: boolean) {\n  const dayPicker = React.useRef<ICalendarDay>(null);\n  const monthPicker = React.useRef<ICalendarMonth>(null);\n  const focusOnUpdate = React.useRef(false);\n\n  const focus = React.useCallback(() => {\n    if (isDayPickerVisible && dayPicker.current) {\n      focusAsync(dayPicker.current);\n    } else if (isMonthPickerVisible && monthPicker.current) {\n      focusAsync(monthPicker.current);\n    }\n  }, [isDayPickerVisible, isMonthPickerVisible]);\n\n  React.useImperativeHandle(componentRef, () => ({ focus }), [focus]);\n\n  React.useEffect(() => {\n    if (focusOnUpdate.current) {\n      focus();\n      focusOnUpdate.current = false;\n    }\n  });\n\n  const focusOnNextUpdate = () => {\n    focusOnUpdate.current = true;\n  };\n\n  return [dayPicker, monthPicker, focusOnNextUpdate] as const;\n}\n\nexport const CalendarBase: React.FunctionComponent<ICalendarProps> = React.forwardRef<HTMLDivElement, ICalendarProps>(\n  (propsWithoutDefaults, forwardedRef) => {\n    const props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n\n    const [selectedDate, navigatedDay, navigatedMonth, onDateSelected, navigateDay, navigateMonth] = useDateState(\n      props,\n    );\n    const [isMonthPickerVisible, isDayPickerVisible, toggleDayMonthPickerVisibility] = useVisibilityState(props);\n    const [dayPicker, monthPicker, focusOnNextUpdate] = useFocusLogic(props, isDayPickerVisible, isMonthPickerVisible);\n\n    const renderGoToTodayButton = () => {\n      let goTodayEnabled = showGoToToday;\n\n      if (goTodayEnabled && today) {\n        goTodayEnabled =\n          navigatedDay.getFullYear() !== today.getFullYear() ||\n          navigatedDay.getMonth() !== today.getMonth() ||\n          navigatedMonth.getFullYear() !== today.getFullYear() ||\n          navigatedMonth.getMonth() !== today.getMonth();\n      }\n\n      return (\n        showGoToToday && (\n          <button\n            className={css('js-goToday', classes.goTodayButton)}\n            onClick={onGotoToday}\n            onKeyDown={onButtonKeyDown(onGotoToday)}\n            type=\"button\"\n            disabled={!goTodayEnabled}\n          >\n            {strings!.goToToday}\n          </button>\n        )\n      );\n    };\n\n    const onNavigateDayDate = (date: Date, focusOnNavigatedDay: boolean): void => {\n      navigateDay(date);\n      if (focusOnNavigatedDay) {\n        focusOnNextUpdate();\n      }\n    };\n\n    const onNavigateMonthDate = (date: Date, focusOnNavigatedDay: boolean): void => {\n      if (focusOnNavigatedDay) {\n        focusOnNextUpdate();\n      }\n\n      if (!focusOnNavigatedDay) {\n        navigateMonth(date);\n        return;\n      }\n\n      if (monthPickerOnly) {\n        onDateSelected(date);\n      }\n\n      navigateDay(date);\n    };\n\n    const onHeaderSelect = getShowMonthPickerAsOverlay(props)\n      ? (): void => {\n          toggleDayMonthPickerVisibility();\n\n          focusOnNextUpdate();\n        }\n      : undefined;\n\n    const onGotoToday = (): void => {\n      navigateDay(today!);\n      focusOnNextUpdate();\n    };\n\n    const onButtonKeyDown = (callback: () => void): ((ev: React.KeyboardEvent<HTMLButtonElement>) => void) => {\n      return (ev: React.KeyboardEvent<HTMLButtonElement>) => {\n        // eslint-disable-next-line deprecation/deprecation\n        switch (ev.which) {\n          case KeyCodes.enter:\n          case KeyCodes.space:\n            callback();\n            break;\n        }\n      };\n    };\n\n    const onDatePickerPopupKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      switch (ev.which) {\n        case KeyCodes.enter:\n          ev.preventDefault();\n          break;\n\n        case KeyCodes.backspace:\n          ev.preventDefault();\n          break;\n\n        case KeyCodes.escape:\n          props.onDismiss?.();\n          break;\n\n        case KeyCodes.pageUp:\n          if (ev.ctrlKey) {\n            // go to next year\n            navigateDay(addYears(navigatedDay, 1));\n          } else {\n            // go to next month\n            navigateDay(addMonths(navigatedDay, 1));\n          }\n          ev.preventDefault();\n          break;\n        case KeyCodes.pageDown:\n          if (ev.ctrlKey) {\n            // go to previous year\n            navigateDay(addYears(navigatedDay, -1));\n          } else {\n            // go to previous month\n            navigateDay(addMonths(navigatedDay, -1));\n          }\n          ev.preventDefault();\n          break;\n        default:\n          break;\n      }\n    };\n    const rootClass = 'ms-DatePicker';\n    const {\n      firstDayOfWeek,\n      dateRangeType,\n      strings,\n      showGoToToday,\n      highlightCurrentMonth,\n      highlightSelectedMonth,\n      navigationIcons,\n      minDate,\n      maxDate,\n      restrictedDates,\n      className,\n      showCloseButton,\n      allFocusable,\n      styles,\n      showWeekNumbers,\n      theme,\n      calendarDayProps,\n      calendarMonthProps,\n      dateTimeFormatter,\n      today = new Date(),\n    } = props;\n\n    const showMonthPickerAsOverlay = getShowMonthPickerAsOverlay(props);\n\n    const monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;\n    const overlaidWithButton = showMonthPickerAsOverlay && showGoToToday;\n\n    const classes = getClassNames(styles, {\n      theme: theme!,\n      className,\n      isMonthPickerVisible: isMonthPickerVisible,\n      isDayPickerVisible: isDayPickerVisible,\n      monthPickerOnly: monthPickerOnly,\n      showMonthPickerAsOverlay: showMonthPickerAsOverlay,\n      overlaidWithButton: overlaidWithButton,\n      overlayedWithButton: overlaidWithButton,\n      showGoToToday: showGoToToday,\n      showWeekNumbers: showWeekNumbers,\n    });\n\n    let todayDateString: string = '';\n    let selectedDateString: string = '';\n    if (dateTimeFormatter && strings!.todayDateFormatString) {\n      todayDateString = format(strings!.todayDateFormatString, dateTimeFormatter.formatMonthDayYear(today, strings!));\n    }\n    if (dateTimeFormatter && strings!.selectedDateFormatString) {\n      selectedDateString = format(\n        strings!.selectedDateFormatString,\n        dateTimeFormatter.formatMonthDayYear(selectedDate, strings!),\n      );\n    }\n    const selectionAndTodayString = selectedDateString + ', ' + todayDateString;\n\n    return (\n      <div\n        ref={forwardedRef}\n        role=\"group\"\n        aria-label={selectionAndTodayString}\n        className={css(rootClass, classes.root, className, 'ms-slideDownIn10')}\n        onKeyDown={onDatePickerPopupKeyDown}\n      >\n        <div className={classes.liveRegion} aria-live=\"polite\" aria-atomic=\"true\">\n          <span>{selectedDateString}</span>\n        </div>\n        {isDayPickerVisible && (\n          <CalendarDay\n            selectedDate={selectedDate!}\n            navigatedDate={navigatedDay!}\n            today={props.today}\n            onSelectDate={onDateSelected}\n            // eslint-disable-next-line react/jsx-no-bind\n            onNavigateDate={onNavigateDayDate}\n            onDismiss={props.onDismiss}\n            firstDayOfWeek={firstDayOfWeek!}\n            dateRangeType={dateRangeType!}\n            strings={strings!}\n            // eslint-disable-next-line react/jsx-no-bind\n            onHeaderSelect={onHeaderSelect}\n            navigationIcons={navigationIcons!}\n            showWeekNumbers={props.showWeekNumbers}\n            firstWeekOfYear={props.firstWeekOfYear!}\n            dateTimeFormatter={props.dateTimeFormatter!}\n            showSixWeeksByDefault={props.showSixWeeksByDefault}\n            minDate={minDate}\n            maxDate={maxDate}\n            restrictedDates={restrictedDates}\n            workWeekDays={props.workWeekDays}\n            componentRef={dayPicker}\n            showCloseButton={showCloseButton}\n            allFocusable={allFocusable}\n            {...calendarDayProps} // at end of list so consumer's custom functions take precedence\n          />\n        )}\n        {isDayPickerVisible && isMonthPickerVisible && <div className={classes.divider} />}\n        {isMonthPickerVisible ? (\n          <div className={classes.monthPickerWrapper}>\n            <CalendarMonth\n              navigatedDate={navigatedMonth}\n              selectedDate={navigatedDay}\n              strings={strings!}\n              // eslint-disable-next-line react/jsx-no-bind\n              onNavigateDate={onNavigateMonthDate}\n              today={props.today}\n              highlightCurrentMonth={highlightCurrentMonth!}\n              highlightSelectedMonth={highlightSelectedMonth!}\n              // eslint-disable-next-line react/jsx-no-bind\n              onHeaderSelect={onHeaderSelect}\n              navigationIcons={navigationIcons!}\n              dateTimeFormatter={props.dateTimeFormatter!}\n              minDate={minDate}\n              maxDate={maxDate}\n              componentRef={monthPicker}\n              {...calendarMonthProps} // at end of list so consumer's custom functions take precedence\n            />\n            {renderGoToTodayButton()}\n          </div>\n        ) : (\n          renderGoToTodayButton()\n        )}\n        <FocusRects />\n      </div>\n    );\n  },\n);\nCalendarBase.displayName = 'CalendarBase';\n\nfunction getShowMonthPickerAsOverlay(props: ICalendarProps) {\n  const win = getWindow();\n  return props.showMonthPickerAsOverlay || (win && win.innerWidth <= MIN_SIZE_FORCE_OVERLAY);\n}\n"]},"metadata":{},"sourceType":"module"}