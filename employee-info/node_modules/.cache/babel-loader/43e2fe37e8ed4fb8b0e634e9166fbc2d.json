{"ast":null,"code":"import { __assign, __extends, __rest, __spreadArray } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, getRTL, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nimport { composeRenderFunction } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar OVERFLOW_KEY = 'overflow';\n\nvar nullFunction = function nullFunction() {\n  return null;\n};\n\nvar nonActionableItemProps = {\n  styles: function styles(props) {\n    var theme = props.theme;\n    return {\n      root: {\n        selectors: {\n          '&.is-disabled': {\n            color: theme.semanticColors.bodyText\n          }\n        }\n      }\n    };\n  }\n};\n/**\n * {@docCategory Breadcrumb}\n */\n\nvar BreadcrumbBase =\n/** @class */\nfunction (_super) {\n  __extends(BreadcrumbBase, _super);\n\n  function BreadcrumbBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusZone = React.createRef();\n    /**\n     * Remove the first rendered item past the overlow point and put it and the end the overflow set.\n     */\n\n    _this._onReduceData = function (data) {\n      var renderedItems = data.renderedItems,\n          renderedOverflowItems = data.renderedOverflowItems;\n      var overflowIndex = data.props.overflowIndex;\n      var movedItem = renderedItems[overflowIndex];\n\n      if (!movedItem) {\n        return undefined;\n      }\n\n      renderedItems = __spreadArray([], renderedItems);\n      renderedItems.splice(overflowIndex, 1);\n      renderedOverflowItems = __spreadArray(__spreadArray([], renderedOverflowItems), [movedItem]);\n      return __assign(__assign({}, data), {\n        renderedItems: renderedItems,\n        renderedOverflowItems: renderedOverflowItems\n      });\n    };\n    /**\n     * Remove the last item of the overflow set and insert the item as the start of the rendered set past the overflow\n     * point.\n     */\n\n\n    _this._onGrowData = function (data) {\n      var renderedItems = data.renderedItems,\n          renderedOverflowItems = data.renderedOverflowItems;\n      var _a = data.props,\n          overflowIndex = _a.overflowIndex,\n          maxDisplayedItems = _a.maxDisplayedItems;\n      renderedOverflowItems = __spreadArray([], renderedOverflowItems);\n      var movedItem = renderedOverflowItems.pop();\n\n      if (!movedItem || renderedItems.length >= maxDisplayedItems) {\n        return undefined;\n      }\n\n      renderedItems = __spreadArray([], renderedItems);\n      renderedItems.splice(overflowIndex, 0, movedItem);\n      return __assign(__assign({}, data), {\n        renderedItems: renderedItems,\n        renderedOverflowItems: renderedOverflowItems\n      });\n    };\n\n    _this._onRenderBreadcrumb = function (data) {\n      var _a = data.props,\n          ariaLabel = _a.ariaLabel,\n          _b = _a.dividerAs,\n          DividerType = _b === void 0 ? Icon : _b,\n          onRenderItem = _a.onRenderItem,\n          overflowAriaLabel = _a.overflowAriaLabel,\n          overflowIndex = _a.overflowIndex,\n          onRenderOverflowIcon = _a.onRenderOverflowIcon,\n          overflowButtonAs = _a.overflowButtonAs;\n      var renderedOverflowItems = data.renderedOverflowItems,\n          renderedItems = data.renderedItems;\n      var contextualItems = renderedOverflowItems.map(function (item) {\n        var isActionable = !!(item.onClick || item.href);\n        return {\n          text: item.text,\n          name: item.text,\n          key: item.key,\n          onClick: item.onClick ? _this._onBreadcrumbClicked.bind(_this, item) : null,\n          href: item.href,\n          disabled: !isActionable,\n          itemProps: isActionable ? undefined : nonActionableItemProps\n        };\n      }); // Find index of last rendered item so the divider icon\n      // knows not to render on that item\n\n      var lastItemIndex = renderedItems.length - 1;\n      var hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n      var itemElements = renderedItems.map(function (item, index) {\n        var finalOnRenderItem = _this._onRenderItem;\n\n        if (item.onRender) {\n          finalOnRenderItem = composeRenderFunction(item.onRender, finalOnRenderItem);\n        }\n\n        if (onRenderItem) {\n          finalOnRenderItem = composeRenderFunction(onRenderItem, finalOnRenderItem);\n        }\n\n        return React.createElement(\"li\", {\n          className: _this._classNames.listItem,\n          key: item.key || String(index)\n        }, finalOnRenderItem(item), (index !== lastItemIndex || hasOverflowItems && index === overflowIndex - 1) && React.createElement(DividerType, {\n          className: _this._classNames.chevron,\n          iconName: getRTL(_this.props.theme) ? 'ChevronLeft' : 'ChevronRight',\n          item: item\n        }));\n      });\n\n      if (hasOverflowItems) {\n        var iconProps = !onRenderOverflowIcon ? {\n          iconName: 'More'\n        } : {};\n        var onRenderMenuIcon = onRenderOverflowIcon ? onRenderOverflowIcon : nullFunction;\n        var OverflowButton = overflowButtonAs ? overflowButtonAs : IconButton;\n        itemElements.splice(overflowIndex, 0, React.createElement(\"li\", {\n          className: _this._classNames.overflow,\n          key: OVERFLOW_KEY\n        }, React.createElement(OverflowButton, {\n          className: _this._classNames.overflowButton,\n          iconProps: iconProps,\n          role: \"button\",\n          \"aria-haspopup\": \"true\",\n          ariaLabel: overflowAriaLabel,\n          onRenderMenuIcon: onRenderMenuIcon,\n          menuProps: {\n            items: contextualItems,\n            directionalHint: DirectionalHint.bottomLeftEdge\n          }\n        }), overflowIndex !== lastItemIndex + 1 && React.createElement(DividerType, {\n          className: _this._classNames.chevron,\n          iconName: getRTL(_this.props.theme) ? 'ChevronLeft' : 'ChevronRight',\n          item: renderedOverflowItems[renderedOverflowItems.length - 1]\n        })));\n      }\n\n      var nativeProps = getNativeProps(_this.props, htmlElementProperties, ['className']);\n      return React.createElement(\"div\", __assign({\n        className: _this._classNames.root,\n        role: \"navigation\",\n        \"aria-label\": ariaLabel\n      }, nativeProps), React.createElement(FocusZone, __assign({\n        componentRef: _this._focusZone,\n        direction: FocusZoneDirection.horizontal\n      }, _this.props.focusZoneProps), React.createElement(\"ol\", {\n        className: _this._classNames.list\n      }, itemElements)));\n    };\n\n    _this._onRenderItem = function (item) {\n      if (!item) {\n        return null;\n      }\n\n      var as = item.as,\n          href = item.href,\n          onClick = item.onClick,\n          isCurrentItem = item.isCurrentItem,\n          text = item.text,\n          onRenderContent = item.onRenderContent,\n          additionalProps = __rest(item, [\"as\", \"href\", \"onClick\", \"isCurrentItem\", \"text\", \"onRenderContent\"]);\n\n      var finalOnRenderContent = defaultOnRenderCrumbContent;\n\n      if (onRenderContent) {\n        finalOnRenderContent = composeRenderFunction(onRenderContent, finalOnRenderContent);\n      }\n\n      if (_this.props.onRenderItemContent) {\n        finalOnRenderContent = composeRenderFunction(_this.props.onRenderItemContent, finalOnRenderContent);\n      }\n\n      if (onClick || href) {\n        return React.createElement(Link, __assign({}, additionalProps, {\n          as: as,\n          className: _this._classNames.itemLink,\n          href: href,\n          \"aria-current\": isCurrentItem ? 'page' : undefined,\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick: _this._onBreadcrumbClicked.bind(_this, item)\n        }), React.createElement(TooltipHost, __assign({\n          content: text,\n          overflowMode: TooltipOverflowMode.Parent\n        }, _this.props.tooltipHostProps), finalOnRenderContent(item)));\n      } else {\n        var Tag = as || 'span';\n        return React.createElement(Tag, __assign({}, additionalProps, {\n          className: _this._classNames.item\n        }), React.createElement(TooltipHost, __assign({\n          content: text,\n          overflowMode: TooltipOverflowMode.Parent\n        }, _this.props.tooltipHostProps), finalOnRenderContent(item)));\n      }\n    };\n\n    _this._onBreadcrumbClicked = function (item, ev) {\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n\n    initializeComponentRef(_this);\n\n    _this._validateProps(props);\n\n    return _this;\n  }\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n\n\n  BreadcrumbBase.prototype.focus = function () {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  };\n\n  BreadcrumbBase.prototype.render = function () {\n    this._validateProps(this.props);\n\n    var _a = this.props,\n        _b = _a.onReduceData,\n        onReduceData = _b === void 0 ? this._onReduceData : _b,\n        _c = _a.onGrowData,\n        onGrowData = _c === void 0 ? this._onGrowData : _c,\n        overflowIndex = _a.overflowIndex,\n        maxDisplayedItems = _a.maxDisplayedItems,\n        items = _a.items,\n        className = _a.className,\n        theme = _a.theme,\n        styles = _a.styles;\n\n    var renderedItems = __spreadArray([], items);\n\n    var renderedOverflowItems = renderedItems.splice(overflowIndex, renderedItems.length - maxDisplayedItems);\n    var breadcrumbData = {\n      props: this.props,\n      renderedItems: renderedItems,\n      renderedOverflowItems: renderedOverflowItems\n    };\n    this._classNames = getClassNames(styles, {\n      className: className,\n      theme: theme\n    });\n    return React.createElement(ResizeGroup, {\n      onRenderData: this._onRenderBreadcrumb,\n      onReduceData: onReduceData,\n      onGrowData: onGrowData,\n      data: breadcrumbData\n    });\n  };\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n\n\n  BreadcrumbBase.prototype._validateProps = function (props) {\n    var maxDisplayedItems = props.maxDisplayedItems,\n        overflowIndex = props.overflowIndex,\n        items = props.items;\n\n    if (overflowIndex < 0 || maxDisplayedItems > 1 && overflowIndex > maxDisplayedItems - 1 || items.length > 0 && overflowIndex > items.length - 1) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  };\n\n  BreadcrumbBase.defaultProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0\n  };\n  return BreadcrumbBase;\n}(React.Component);\n\nexport { BreadcrumbBase };\n\nfunction defaultOnRenderCrumbContent(item) {\n  return item ? React.createElement(React.Fragment, null, item.text) : null;\n}","map":{"version":3,"mappings":"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","names":["React","initializeComponentRef","getRTL","classNamesFunction","getNativeProps","htmlElementProperties","FocusZone","FocusZoneDirection","Link","Icon","IconButton","DirectionalHint","ResizeGroup","TooltipHost","TooltipOverflowMode","composeRenderFunction","getClassNames","OVERFLOW_KEY","nullFunction","nonActionableItemProps","styles","props","root","selectors","color","theme","semanticColors","bodyText","__extends","_super","_this","createRef","data","renderedOverflowItems","overflowIndex","movedItem","renderedItems","undefined","splice","maxDisplayedItems","pop","length","ariaLabel","_b","DividerType","onRenderItem","overflowAriaLabel","onRenderOverflowIcon","overflowButtonAs","contextualItems","map","item","isActionable","onClick","href","text","name","key","_onBreadcrumbClicked","bind","disabled","itemProps","lastItemIndex","hasOverflowItems","itemElements","index","finalOnRenderItem","_onRenderItem","onRender","className","_classNames","listItem","String","chevron","iconName","iconProps","onRenderMenuIcon","OverflowButton","overflow","overflowButton","role","menuProps","items","directionalHint","bottomLeftEdge","nativeProps","__assign","componentRef","_focusZone","direction","horizontal","focusZoneProps","list","isCurrentItem","onRenderContent","additionalProps","finalOnRenderContent","defaultOnRenderCrumbContent","onRenderItemContent","as","itemLink","content","overflowMode","Parent","tooltipHostProps","Tag","ev","_validateProps","BreadcrumbBase","current","focus","onReduceData","_onReduceData","_c","onGrowData","_onGrowData","breadcrumbData","onRenderData","_onRenderBreadcrumb","Error","Component"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/Breadcrumb/Breadcrumb.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  initializeComponentRef,\n  getRTL,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n} from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IContextualMenuItem, IContextualMenuItemProps } from '../../ContextualMenu';\nimport type {\n  IBreadcrumbProps,\n  IBreadcrumbItem,\n  IDividerAsProps,\n  IBreadcrumbData,\n  IBreadcrumbStyleProps,\n  IBreadcrumbStyles,\n} from './Breadcrumb.types';\nimport { composeRenderFunction } from '../../Utilities';\n\n/** @deprecated Use IBreadcrumbData */\nexport type IBreadCrumbData = IBreadcrumbData;\n\nconst getClassNames = classNamesFunction<IBreadcrumbStyleProps, IBreadcrumbStyles>();\n\nconst OVERFLOW_KEY = 'overflow';\nconst nullFunction = (): null => null;\n\nconst nonActionableItemProps: Partial<IContextualMenuItemProps> = {\n  styles: props => {\n    const { theme } = props;\n    return {\n      root: {\n        selectors: {\n          '&.is-disabled': {\n            color: theme.semanticColors.bodyText,\n          },\n        },\n      },\n    };\n  },\n};\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport class BreadcrumbBase extends React.Component<IBreadcrumbProps, any> {\n  public static defaultProps: IBreadcrumbProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0,\n  };\n\n  private _classNames: IProcessedStyleSet<IBreadcrumbStyles>;\n  private _focusZone = React.createRef<FocusZone>();\n\n  constructor(props: IBreadcrumbProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._validateProps(props);\n  }\n\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n  public focus(): void {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    this._validateProps(this.props);\n\n    const {\n      onReduceData = this._onReduceData,\n      onGrowData = this._onGrowData,\n      overflowIndex,\n      maxDisplayedItems,\n      items,\n      className,\n      theme,\n      styles,\n    } = this.props;\n    const renderedItems = [...items];\n    const renderedOverflowItems = renderedItems.splice(overflowIndex!, renderedItems.length - maxDisplayedItems!);\n    const breadcrumbData: IBreadcrumbData = {\n      props: this.props,\n      renderedItems,\n      renderedOverflowItems,\n    };\n\n    this._classNames = getClassNames(styles, {\n      className,\n      theme: theme!,\n    });\n\n    return (\n      <ResizeGroup\n        onRenderData={this._onRenderBreadcrumb}\n        onReduceData={onReduceData}\n        onGrowData={onGrowData}\n        data={breadcrumbData}\n      />\n    );\n  }\n\n  /**\n   * Remove the first rendered item past the overlow point and put it and the end the overflow set.\n   */\n  private _onReduceData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex } = data.props;\n\n    const movedItem = renderedItems[overflowIndex!];\n\n    if (!movedItem) {\n      return undefined;\n    }\n\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 1);\n\n    renderedOverflowItems = [...renderedOverflowItems, movedItem];\n\n    return { ...data, renderedItems, renderedOverflowItems };\n  };\n\n  /**\n   * Remove the last item of the overflow set and insert the item as the start of the rendered set past the overflow\n   * point.\n   */\n  private _onGrowData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex, maxDisplayedItems } = data.props;\n\n    renderedOverflowItems = [...renderedOverflowItems];\n    const movedItem = renderedOverflowItems.pop();\n\n    if (!movedItem || renderedItems.length >= maxDisplayedItems!) {\n      return undefined;\n    }\n\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 0, movedItem);\n\n    return { ...data, renderedItems, renderedOverflowItems };\n  };\n\n  private _onRenderBreadcrumb = (data: IBreadcrumbData) => {\n    const {\n      ariaLabel,\n      dividerAs: DividerType = Icon as React.ElementType<IDividerAsProps>,\n      onRenderItem,\n      overflowAriaLabel,\n      overflowIndex,\n      onRenderOverflowIcon,\n      overflowButtonAs,\n    } = data.props;\n    const { renderedOverflowItems, renderedItems } = data;\n\n    const contextualItems = renderedOverflowItems.map(\n      (item): IContextualMenuItem => {\n        const isActionable = !!(item.onClick || item.href);\n        return {\n          text: item.text,\n          name: item.text,\n          key: item.key,\n          onClick: item.onClick ? this._onBreadcrumbClicked.bind(this, item) : null,\n          href: item.href,\n          disabled: !isActionable,\n          itemProps: isActionable ? undefined : nonActionableItemProps,\n        };\n      },\n    );\n\n    // Find index of last rendered item so the divider icon\n    // knows not to render on that item\n    const lastItemIndex = renderedItems.length - 1;\n    const hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n\n    const itemElements: JSX.Element[] = renderedItems.map((item, index) => {\n      let finalOnRenderItem = this._onRenderItem;\n\n      if (item.onRender) {\n        finalOnRenderItem = composeRenderFunction(item.onRender, finalOnRenderItem);\n      }\n\n      if (onRenderItem) {\n        finalOnRenderItem = composeRenderFunction(onRenderItem, finalOnRenderItem);\n      }\n\n      return (\n        <li className={this._classNames.listItem} key={item.key || String(index)}>\n          {finalOnRenderItem(item)}\n          {(index !== lastItemIndex || (hasOverflowItems && index === overflowIndex! - 1)) && (\n            <DividerType\n              className={this._classNames.chevron}\n              iconName={getRTL(this.props.theme) ? 'ChevronLeft' : 'ChevronRight'}\n              item={item}\n            />\n          )}\n        </li>\n      );\n    });\n\n    if (hasOverflowItems) {\n      const iconProps = !onRenderOverflowIcon ? { iconName: 'More' } : {};\n      const onRenderMenuIcon = onRenderOverflowIcon ? onRenderOverflowIcon : nullFunction;\n      const OverflowButton = overflowButtonAs ? overflowButtonAs : IconButton;\n\n      itemElements.splice(\n        overflowIndex!,\n        0,\n        <li className={this._classNames.overflow} key={OVERFLOW_KEY}>\n          <OverflowButton\n            className={this._classNames.overflowButton}\n            iconProps={iconProps}\n            role=\"button\"\n            aria-haspopup=\"true\"\n            ariaLabel={overflowAriaLabel}\n            onRenderMenuIcon={onRenderMenuIcon}\n            menuProps={{\n              items: contextualItems,\n              directionalHint: DirectionalHint.bottomLeftEdge,\n            }}\n          />\n          {overflowIndex !== lastItemIndex + 1 && (\n            <DividerType\n              className={this._classNames.chevron}\n              iconName={getRTL(this.props.theme) ? 'ChevronLeft' : 'ChevronRight'}\n              item={renderedOverflowItems[renderedOverflowItems.length - 1]}\n            />\n          )}\n        </li>,\n      );\n    }\n\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, [\n      'className',\n    ]);\n\n    return (\n      <div className={this._classNames.root} role=\"navigation\" aria-label={ariaLabel} {...nativeProps}>\n        <FocusZone\n          componentRef={this._focusZone}\n          direction={FocusZoneDirection.horizontal}\n          {...this.props.focusZoneProps}\n        >\n          <ol className={this._classNames.list}>{itemElements}</ol>\n        </FocusZone>\n      </div>\n    );\n  };\n\n  private _onRenderItem = (item?: IBreadcrumbItem) => {\n    if (!item) {\n      return null;\n    }\n\n    const { as, href, onClick, isCurrentItem, text, onRenderContent, ...additionalProps } = item;\n\n    let finalOnRenderContent = defaultOnRenderCrumbContent;\n\n    if (onRenderContent) {\n      finalOnRenderContent = composeRenderFunction(onRenderContent, finalOnRenderContent);\n    }\n\n    if (this.props.onRenderItemContent) {\n      finalOnRenderContent = composeRenderFunction(this.props.onRenderItemContent, finalOnRenderContent);\n    }\n\n    if (onClick || href) {\n      return (\n        <Link\n          {...additionalProps}\n          as={as}\n          className={this._classNames.itemLink}\n          href={href}\n          aria-current={isCurrentItem ? 'page' : undefined}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={this._onBreadcrumbClicked.bind(this, item)}\n        >\n          <TooltipHost content={text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {finalOnRenderContent(item)}\n          </TooltipHost>\n        </Link>\n      );\n    } else {\n      const Tag = as || 'span';\n      return (\n        <Tag {...additionalProps} className={this._classNames.item}>\n          <TooltipHost content={text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {finalOnRenderContent(item)}\n          </TooltipHost>\n        </Tag>\n      );\n    }\n  };\n\n  private _onBreadcrumbClicked = (item: IBreadcrumbItem, ev: React.MouseEvent<HTMLElement>) => {\n    if (item.onClick) {\n      item.onClick(ev, item);\n    }\n  };\n\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n  private _validateProps(props: IBreadcrumbProps): void {\n    const { maxDisplayedItems, overflowIndex, items } = props;\n    if (\n      overflowIndex! < 0 ||\n      (maxDisplayedItems! > 1 && overflowIndex! > maxDisplayedItems! - 1) ||\n      (items.length > 0 && overflowIndex! > items.length - 1)\n    ) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  }\n}\n\nfunction defaultOnRenderCrumbContent(item?: IBreadcrumbItem): JSX.Element | null {\n  return item ? <>{item.text}</> : null;\n}\n"]},"metadata":{},"sourceType":"module"}