{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useControllableValue, useId } from '@fluentui/react-hooks';\nimport { classNamesFunction, css, divProperties, getNativeProps, getRTL, KeyCodes, warn } from '@fluentui/utilities';\nimport { CommandButton } from '../../Button';\nimport { useOverflow } from '../../utilities/useOverflow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { DirectionalHint } from '../ContextualMenu/ContextualMenu.types';\nimport { Icon } from '../Icon/Icon';\nimport { PivotItem } from './PivotItem';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Pivot';\n\nvar getTabId = function getTabId(props, pivotId, itemKey, index) {\n  if (props.getTabId) {\n    return props.getTabId(itemKey, index);\n  }\n\n  return pivotId + (\"-Tab\" + index);\n}; // Gets the set of PivotLinks as array of IPivotItemProps\n// The set of Links is determined by child components of type PivotItem\n\n\nvar getLinkItems = function getLinkItems(props, pivotId) {\n  var result = {\n    links: [],\n    keyToIndexMapping: {},\n    keyToTabIdMapping: {}\n  };\n  React.Children.forEach(React.Children.toArray(props.children), function (child, index) {\n    if (isPivotItem(child)) {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = child.props,\n          linkText = _a.linkText,\n          pivotItemProps = __rest(_a, [\"linkText\"]);\n\n      var itemKey = child.props.itemKey || index.toString();\n      result.links.push(__assign(__assign({\n        headerText: linkText\n      }, pivotItemProps), {\n        itemKey: itemKey\n      }));\n      result.keyToIndexMapping[itemKey] = index;\n      result.keyToTabIdMapping[itemKey] = getTabId(props, pivotId, itemKey, index);\n    } else if (child) {\n      warn('The children of a Pivot component must be of type PivotItem to be rendered.');\n    }\n  });\n  return result;\n};\n\nvar isPivotItem = function isPivotItem(item) {\n  var _a;\n\n  return React.isValidElement(item) && ((_a = item.type) === null || _a === void 0 ? void 0 : _a.name) === PivotItem.name;\n};\n\nexport var PivotBase = React.forwardRef(function (props, ref) {\n  var focusZoneRef = React.useRef(null);\n  var overflowMenuButtonComponentRef = React.useRef(null);\n  var pivotId = useId('Pivot');\n\n  var _a = useControllableValue(props.selectedKey, props.defaultSelectedKey),\n      selectedKey = _a[0],\n      setSelectedKey = _a[1];\n\n  var componentRef = props.componentRef,\n      theme = props.theme,\n      linkSize = props.linkSize,\n      linkFormat = props.linkFormat,\n      overflowBehavior = props.overflowBehavior,\n      overflowAriaLabel = props.overflowAriaLabel,\n      focusZoneProps = props.focusZoneProps;\n  var classNames;\n  var nameProps = {\n    'aria-label': props['aria-label'],\n    'aria-labelledby': props['aria-labelledby']\n  };\n  var divProps = getNativeProps(props, divProperties, ['aria-label', 'aria-labelledby']);\n  var linkCollection = getLinkItems(props, pivotId);\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      focus: function focus() {\n        var _a;\n\n        (_a = focusZoneRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      }\n    };\n  });\n\n  var renderLinkContent = function renderLinkContent(link) {\n    if (!link) {\n      return null;\n    }\n\n    var itemCount = link.itemCount,\n        itemIcon = link.itemIcon,\n        headerText = link.headerText;\n    return React.createElement(\"span\", {\n      className: classNames.linkContent\n    }, itemIcon !== undefined && React.createElement(\"span\", {\n      className: classNames.icon\n    }, React.createElement(Icon, {\n      iconName: itemIcon\n    })), headerText !== undefined && React.createElement(\"span\", {\n      className: classNames.text\n    }, \" \", link.headerText), itemCount !== undefined && React.createElement(\"span\", {\n      className: classNames.count\n    }, \" (\", itemCount, \")\"));\n  };\n\n  var renderPivotLink = function renderPivotLink(renderLinkCollection, link, renderPivotLinkSelectedKey, className) {\n    var itemKey = link.itemKey,\n        headerButtonProps = link.headerButtonProps,\n        onRenderItemLink = link.onRenderItemLink;\n    var tabId = renderLinkCollection.keyToTabIdMapping[itemKey];\n    var linkContent;\n    var isSelected = renderPivotLinkSelectedKey === itemKey;\n\n    if (onRenderItemLink) {\n      linkContent = onRenderItemLink(link, renderLinkContent);\n    } else {\n      linkContent = renderLinkContent(link);\n    }\n\n    var contentString = link.headerText || '';\n    contentString += link.itemCount ? ' (' + link.itemCount + ')' : ''; // Adding space supplementary for icon\n\n    contentString += link.itemIcon ? ' xx' : '';\n    return React.createElement(CommandButton, __assign({}, headerButtonProps, {\n      id: tabId,\n      key: itemKey,\n      className: css(className, isSelected && classNames.linkIsSelected),\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick: function onClick(ev) {\n        return onLinkClick(itemKey, ev);\n      },\n      // eslint-disable-next-line react/jsx-no-bind\n      onKeyDown: function onKeyDown(ev) {\n        return _onKeyDown(itemKey, ev);\n      },\n      \"aria-label\": link.ariaLabel,\n      role: link.role || 'tab',\n      \"aria-selected\": isSelected,\n      name: link.headerText,\n      keytipProps: link.keytipProps,\n      \"data-content\": contentString\n    }), linkContent);\n  };\n\n  var onLinkClick = function onLinkClick(itemKey, ev) {\n    ev.preventDefault();\n    updateSelectedItem(itemKey, ev);\n  };\n\n  var _onKeyDown = function _onKeyDown(itemKey, ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n      updateSelectedItem(itemKey);\n    }\n  };\n\n  var updateSelectedItem = function updateSelectedItem(itemKey, ev) {\n    var _a;\n\n    setSelectedKey(itemKey);\n    linkCollection = getLinkItems(props, pivotId);\n\n    if (props.onLinkClick && linkCollection.keyToIndexMapping[itemKey] >= 0) {\n      var selectedIndex = linkCollection.keyToIndexMapping[itemKey];\n      var item = React.Children.toArray(props.children)[selectedIndex];\n\n      if (isPivotItem(item)) {\n        props.onLinkClick(item, ev);\n      }\n    }\n\n    (_a = overflowMenuButtonComponentRef.current) === null || _a === void 0 ? void 0 : _a.dismissMenu();\n  };\n\n  var renderPivotItem = function renderPivotItem(itemKey, isActive) {\n    if (props.headersOnly || !itemKey) {\n      return null;\n    }\n\n    var index = linkCollection.keyToIndexMapping[itemKey];\n    var selectedTabId = linkCollection.keyToTabIdMapping[itemKey];\n    return React.createElement(\"div\", {\n      role: \"tabpanel\",\n      hidden: !isActive,\n      key: itemKey,\n      \"aria-hidden\": !isActive,\n      \"aria-labelledby\": selectedTabId,\n      className: classNames.itemContainer\n    }, React.Children.toArray(props.children)[index]);\n  };\n\n  var isKeyValid = function isKeyValid(itemKey) {\n    return itemKey === null || itemKey !== undefined && linkCollection.keyToIndexMapping[itemKey] !== undefined;\n  };\n\n  var getSelectedKey = function getSelectedKey() {\n    if (isKeyValid(selectedKey)) {\n      return selectedKey;\n    }\n\n    if (linkCollection.links.length) {\n      return linkCollection.links[0].itemKey;\n    }\n\n    return undefined;\n  };\n\n  classNames = getClassNames(props.styles, {\n    theme: theme,\n    linkSize: linkSize,\n    linkFormat: linkFormat\n  });\n  var renderedSelectedKey = getSelectedKey();\n  var renderedSelectedIndex = renderedSelectedKey ? linkCollection.keyToIndexMapping[renderedSelectedKey] : 0;\n  var items = linkCollection.links.map(function (l) {\n    return renderPivotLink(linkCollection, l, renderedSelectedKey, classNames.link);\n  }); // The overflow menu starts empty and items[] is updated as the overflow items change\n\n  var overflowMenuProps = React.useMemo(function () {\n    return {\n      items: [],\n      alignTargetEdge: true,\n      directionalHint: DirectionalHint.bottomRightEdge\n    };\n  }, []);\n  var overflowMenuButtonRef = useOverflow({\n    onOverflowItemsChanged: function onOverflowItemsChanged(overflowIndex, elements) {\n      // Set data-is-overflowing on each item\n      elements.forEach(function (_a) {\n        var ele = _a.ele,\n            isOverflowing = _a.isOverflowing;\n        return ele.dataset.isOverflowing = \"\" + isOverflowing;\n      }); // Update the menu items\n\n      overflowMenuProps.items = linkCollection.links.slice(overflowIndex).filter(function (link) {\n        return link.itemKey !== renderedSelectedKey;\n      }).map(function (link, index) {\n        return {\n          key: link.itemKey || \"\" + (overflowIndex + index),\n          onRender: function onRender() {\n            return renderPivotLink(linkCollection, link, renderedSelectedKey, classNames.linkInMenu);\n          }\n        };\n      });\n    },\n    rtl: getRTL(theme),\n    pinnedIndex: renderedSelectedIndex\n  }).menuButtonRef;\n  return React.createElement(\"div\", __assign({\n    ref: ref\n  }, divProps), React.createElement(FocusZone, __assign({\n    componentRef: focusZoneRef,\n    role: \"tablist\"\n  }, nameProps, {\n    direction: FocusZoneDirection.horizontal\n  }, focusZoneProps, {\n    className: css(classNames.root, focusZoneProps === null || focusZoneProps === void 0 ? void 0 : focusZoneProps.className)\n  }), items, overflowBehavior === 'menu' && React.createElement(CommandButton, {\n    className: css(classNames.link, classNames.overflowMenuButton),\n    elementRef: overflowMenuButtonRef,\n    componentRef: overflowMenuButtonComponentRef,\n    menuProps: overflowMenuProps,\n    menuIconProps: {\n      iconName: 'More',\n      style: {\n        color: 'inherit'\n      }\n    },\n    ariaLabel: overflowAriaLabel\n  })), renderedSelectedKey && linkCollection.links.map(function (link) {\n    return (link.alwaysRender === true || renderedSelectedKey === link.itemKey) && renderPivotItem(link.itemKey, renderedSelectedKey === link.itemKey);\n  }));\n});\nPivotBase.displayName = COMPONENT_NAME;","map":{"version":3,"mappings":"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","names":["React","useControllableValue","useId","classNamesFunction","css","divProperties","getNativeProps","getRTL","KeyCodes","warn","CommandButton","useOverflow","FocusZone","FocusZoneDirection","DirectionalHint","Icon","PivotItem","getClassNames","COMPONENT_NAME","getTabId","props","pivotId","itemKey","index","getLinkItems","result","links","keyToIndexMapping","keyToTabIdMapping","Children","forEach","toArray","children","child","isPivotItem","_a","linkText","pivotItemProps","toString","push","__assign","headerText","item","isValidElement","type","name","PivotBase","forwardRef","ref","focusZoneRef","useRef","overflowMenuButtonComponentRef","selectedKey","defaultSelectedKey","setSelectedKey","theme","linkSize","linkFormat","overflowBehavior","overflowAriaLabel","focusZoneProps","classNames","nameProps","divProps","linkCollection","useImperativeHandle","componentRef","focus","current","renderLinkContent","link","itemIcon","className","linkContent","undefined","icon","iconName","text","itemCount","count","renderPivotLink","renderLinkCollection","renderPivotLinkSelectedKey","headerButtonProps","onRenderItemLink","tabId","isSelected","contentString","id","key","linkIsSelected","onClick","ev","onKeyDown","ariaLabel","role","keytipProps","onLinkClick","preventDefault","updateSelectedItem","which","enter","selectedIndex","dismissMenu","renderPivotItem","isActive","headersOnly","selectedTabId","hidden","itemContainer","isKeyValid","getSelectedKey","length","styles","renderedSelectedKey","renderedSelectedIndex","items","map","l","overflowMenuProps","useMemo","alignTargetEdge","directionalHint","bottomRightEdge","overflowMenuButtonRef","onOverflowItemsChanged","overflowIndex","elements","ele","isOverflowing","dataset","slice","filter","onRender","linkInMenu","rtl","pinnedIndex","menuButtonRef","direction","horizontal","root","overflowMenuButton","elementRef","menuProps","menuIconProps","style","color","alwaysRender","displayName"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/Pivot/Pivot.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useControllableValue, useId } from '@fluentui/react-hooks';\nimport { classNamesFunction, css, divProperties, getNativeProps, getRTL, KeyCodes, warn } from '@fluentui/utilities';\nimport { CommandButton } from '../../Button';\nimport { useOverflow } from '../../utilities/useOverflow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { DirectionalHint } from '../ContextualMenu/ContextualMenu.types';\nimport { Icon } from '../Icon/Icon';\nimport { PivotItem } from './PivotItem';\nimport type { IButton } from '../../Button';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { IContextualMenuProps } from '../ContextualMenu/ContextualMenu.types';\nimport type { IPivot, IPivotProps, IPivotStyleProps, IPivotStyles } from './Pivot.types';\nimport type { IPivotItemProps } from './PivotItem.types';\n\nconst getClassNames = classNamesFunction<IPivotStyleProps, IPivotStyles>();\n\nconst COMPONENT_NAME = 'Pivot';\n\ntype PivotLinkCollection = {\n  links: IPivotItemProps[];\n  keyToIndexMapping: { [key: string]: number };\n  keyToTabIdMapping: { [key: string]: string };\n};\n\nconst getTabId = (props: IPivotProps, pivotId: string, itemKey: string, index: number): string => {\n  if (props.getTabId) {\n    return props.getTabId(itemKey, index);\n  }\n  return pivotId + `-Tab${index}`;\n};\n\n// Gets the set of PivotLinks as array of IPivotItemProps\n// The set of Links is determined by child components of type PivotItem\nconst getLinkItems = (props: IPivotProps, pivotId: string): PivotLinkCollection => {\n  const result: PivotLinkCollection = {\n    links: [],\n    keyToIndexMapping: {},\n    keyToTabIdMapping: {},\n  };\n\n  React.Children.forEach(React.Children.toArray(props.children), (child: React.ReactNode, index: number) => {\n    if (isPivotItem(child)) {\n      // eslint-disable-next-line deprecation/deprecation\n      const { linkText, ...pivotItemProps } = child.props;\n      const itemKey = child.props.itemKey || index.toString();\n      result.links.push({\n        headerText: linkText,\n        ...pivotItemProps,\n        itemKey: itemKey,\n      });\n      result.keyToIndexMapping[itemKey] = index;\n      result.keyToTabIdMapping[itemKey] = getTabId(props, pivotId, itemKey, index);\n    } else if (child) {\n      warn('The children of a Pivot component must be of type PivotItem to be rendered.');\n    }\n  });\n  return result;\n};\n\nconst isPivotItem = (item: React.ReactNode): item is PivotItem => {\n  return React.isValidElement(item) && (item.type as React.ComponentType)?.name === PivotItem.name;\n};\n\nexport const PivotBase: React.FunctionComponent<IPivotProps> = React.forwardRef<HTMLDivElement, IPivotProps>(\n  (props, ref) => {\n    const focusZoneRef = React.useRef<IFocusZone>(null);\n    const overflowMenuButtonComponentRef = React.useRef<IButton>(null);\n    const pivotId: string = useId('Pivot');\n\n    const [selectedKey, setSelectedKey] = useControllableValue(props.selectedKey, props.defaultSelectedKey);\n\n    const { componentRef, theme, linkSize, linkFormat, overflowBehavior, overflowAriaLabel, focusZoneProps } = props;\n\n    let classNames: { [key in keyof IPivotStyles]: string };\n    const nameProps = {\n      'aria-label': props['aria-label'],\n      'aria-labelledby': props['aria-labelledby'],\n    };\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties, [\n      'aria-label',\n      'aria-labelledby',\n    ]);\n\n    let linkCollection = getLinkItems(props, pivotId);\n\n    React.useImperativeHandle(componentRef as React.RefObject<IPivot>, () => ({\n      focus: () => {\n        focusZoneRef.current?.focus();\n      },\n    }));\n\n    const renderLinkContent = (link?: IPivotItemProps): JSX.Element | null => {\n      if (!link) {\n        return null;\n      }\n\n      const { itemCount, itemIcon, headerText } = link;\n      return (\n        <span className={classNames.linkContent}>\n          {itemIcon !== undefined && (\n            <span className={classNames.icon}>\n              <Icon iconName={itemIcon} />\n            </span>\n          )}\n          {headerText !== undefined && <span className={classNames.text}> {link.headerText}</span>}\n          {itemCount !== undefined && <span className={classNames.count}> ({itemCount})</span>}\n        </span>\n      );\n    };\n\n    const renderPivotLink = (\n      renderLinkCollection: PivotLinkCollection,\n      link: IPivotItemProps,\n      renderPivotLinkSelectedKey: string | null | undefined,\n      className: string,\n    ): JSX.Element => {\n      const { itemKey, headerButtonProps, onRenderItemLink } = link;\n      const tabId = renderLinkCollection.keyToTabIdMapping[itemKey!];\n      let linkContent: JSX.Element | null;\n      const isSelected: boolean = renderPivotLinkSelectedKey === itemKey;\n\n      if (onRenderItemLink) {\n        linkContent = onRenderItemLink(link, renderLinkContent);\n      } else {\n        linkContent = renderLinkContent(link);\n      }\n\n      let contentString = link.headerText || '';\n      contentString += link.itemCount ? ' (' + link.itemCount + ')' : '';\n      // Adding space supplementary for icon\n      contentString += link.itemIcon ? ' xx' : '';\n      return (\n        <CommandButton\n          {...headerButtonProps}\n          id={tabId}\n          key={itemKey}\n          className={css(className, isSelected && classNames.linkIsSelected)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={(ev: React.MouseEvent<HTMLElement>) => onLinkClick(itemKey!, ev)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onKeyDown={(ev: React.KeyboardEvent<HTMLElement>) => onKeyDown(itemKey!, ev)}\n          aria-label={link.ariaLabel}\n          role={link.role || 'tab'}\n          aria-selected={isSelected}\n          name={link.headerText}\n          keytipProps={link.keytipProps}\n          data-content={contentString}\n        >\n          {linkContent}\n        </CommandButton>\n      );\n    };\n\n    const onLinkClick = (itemKey: string, ev: React.MouseEvent<HTMLElement>): void => {\n      ev.preventDefault();\n      updateSelectedItem(itemKey, ev);\n    };\n\n    const onKeyDown = (itemKey: string, ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        ev.preventDefault();\n        updateSelectedItem(itemKey);\n      }\n    };\n\n    const updateSelectedItem = (itemKey: string, ev?: React.MouseEvent<HTMLElement>): void => {\n      setSelectedKey(itemKey);\n      linkCollection = getLinkItems(props, pivotId);\n      if (props.onLinkClick && linkCollection.keyToIndexMapping[itemKey] >= 0) {\n        const selectedIndex = linkCollection.keyToIndexMapping[itemKey];\n        const item = React.Children.toArray(props.children)[selectedIndex];\n        if (isPivotItem(item)) {\n          props.onLinkClick(item, ev);\n        }\n      }\n\n      overflowMenuButtonComponentRef.current?.dismissMenu();\n    };\n\n    const renderPivotItem = (itemKey: string | undefined, isActive: boolean): JSX.Element | null => {\n      if (props.headersOnly || !itemKey) {\n        return null;\n      }\n\n      const index = linkCollection.keyToIndexMapping[itemKey];\n      const selectedTabId = linkCollection.keyToTabIdMapping[itemKey];\n      return (\n        <div\n          role=\"tabpanel\"\n          hidden={!isActive}\n          key={itemKey}\n          aria-hidden={!isActive}\n          aria-labelledby={selectedTabId}\n          className={classNames.itemContainer}\n        >\n          {React.Children.toArray(props.children)[index]}\n        </div>\n      );\n    };\n\n    const isKeyValid = (itemKey: string | null | undefined): boolean => {\n      return itemKey === null || (itemKey !== undefined && linkCollection.keyToIndexMapping[itemKey] !== undefined);\n    };\n\n    const getSelectedKey = () => {\n      if (isKeyValid(selectedKey)) {\n        return selectedKey;\n      }\n      if (linkCollection.links.length) {\n        return linkCollection.links[0].itemKey;\n      }\n      return undefined;\n    };\n\n    classNames = getClassNames(props.styles!, {\n      theme: theme!,\n      linkSize,\n      linkFormat,\n    });\n\n    const renderedSelectedKey = getSelectedKey();\n    const renderedSelectedIndex = renderedSelectedKey ? linkCollection.keyToIndexMapping[renderedSelectedKey] : 0;\n\n    const items = linkCollection.links.map(l =>\n      renderPivotLink(linkCollection, l, renderedSelectedKey, classNames.link),\n    );\n\n    // The overflow menu starts empty and items[] is updated as the overflow items change\n    const overflowMenuProps: IContextualMenuProps = React.useMemo(\n      () => ({\n        items: [],\n        alignTargetEdge: true,\n        directionalHint: DirectionalHint.bottomRightEdge,\n      }),\n      [],\n    );\n\n    const { menuButtonRef: overflowMenuButtonRef } = useOverflow({\n      onOverflowItemsChanged: (overflowIndex, elements) => {\n        // Set data-is-overflowing on each item\n        elements.forEach(({ ele, isOverflowing }) => (ele.dataset.isOverflowing = `${isOverflowing}`));\n\n        // Update the menu items\n        overflowMenuProps.items = linkCollection.links\n          .slice(overflowIndex)\n          .filter(link => link.itemKey !== renderedSelectedKey)\n          .map((link, index) => {\n            return {\n              key: link.itemKey || `${overflowIndex + index}`,\n              onRender: () => renderPivotLink(linkCollection, link, renderedSelectedKey, classNames.linkInMenu),\n            };\n          });\n      },\n      rtl: getRTL(theme),\n      pinnedIndex: renderedSelectedIndex,\n    });\n\n    return (\n      <div ref={ref} {...divProps}>\n        <FocusZone\n          componentRef={focusZoneRef}\n          role=\"tablist\"\n          {...nameProps}\n          direction={FocusZoneDirection.horizontal}\n          {...focusZoneProps}\n          className={css(classNames.root, focusZoneProps?.className)}\n        >\n          {items}\n          {overflowBehavior === 'menu' && (\n            <CommandButton\n              className={css(classNames.link, classNames.overflowMenuButton)}\n              elementRef={overflowMenuButtonRef}\n              componentRef={overflowMenuButtonComponentRef}\n              menuProps={overflowMenuProps}\n              menuIconProps={{ iconName: 'More', style: { color: 'inherit' } }}\n              ariaLabel={overflowAriaLabel}\n            />\n          )}\n        </FocusZone>\n        {renderedSelectedKey &&\n          linkCollection.links.map(\n            link =>\n              (link.alwaysRender === true || renderedSelectedKey === link.itemKey) &&\n              renderPivotItem(link.itemKey, renderedSelectedKey === link.itemKey),\n          )}\n      </div>\n    );\n  },\n);\nPivotBase.displayName = COMPONENT_NAME;\n"]},"metadata":{},"sourceType":"module"}