{"ast":null,"code":"import { compareDatePart } from '../dateMath/dateMath';\n/**\n * Checks if `date` happens later than max date\n * @param date - date to check\n * @param options - object with max date to check against\n */\n\nexport var isAfterMaxDate = function isAfterMaxDate(date, options) {\n  var maxDate = options.maxDate;\n  return maxDate ? compareDatePart(date, maxDate) >= 1 : false;\n};","map":{"version":3,"mappings":"AACA,SAASA,eAAT,QAAgC,sBAAhC;AAEA;;;;;;AAKA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAaC,OAAb,EAA6C;AACjE,aAAO,GAAKA,OAAO,QAAnB;AACR,SAAOC,OAAO,GAAGJ,eAAe,CAACE,IAAD,EAAOE,OAAP,CAAf,IAAkC,CAArC,GAAyC,KAAvD;AACD,CAHM","names":["compareDatePart","isAfterMaxDate","date","options","maxDate"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/date-time-utilities/lib/src/dateGrid/isAfterMaxDate.ts"],"sourcesContent":["import { IRestrictedDatesOptions } from './dateGrid.types';\nimport { compareDatePart } from '../dateMath/dateMath';\n\n/**\n * Checks if `date` happens later than max date\n * @param date - date to check\n * @param options - object with max date to check against\n */\nexport const isAfterMaxDate = (date: Date, options: IRestrictedDatesOptions): boolean => {\n  const { maxDate } = options;\n  return maxDate ? compareDatePart(date, maxDate) >= 1 : false;\n};\n"]},"metadata":{},"sourceType":"module"}