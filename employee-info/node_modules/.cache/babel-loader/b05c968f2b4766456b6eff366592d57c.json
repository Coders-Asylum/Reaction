{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, EventGroup, classNamesFunction } from '../../Utilities';\nimport { initializeComponentRef } from '@fluentui/utilities';\nvar getClassNames = classNamesFunction();\nvar TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD = 5;\n/**\n * {@docCategory DocumentCard}\n */\n\nvar DocumentCardTitleBase =\n/** @class */\nfunction (_super) {\n  __extends(DocumentCardTitleBase, _super);\n\n  function DocumentCardTitleBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._titleElement = React.createRef(); // Truncate logic here way can't handle the case that chars with different widths are mixed very well.\n    // Let _shrinkTitle take care of that.\n\n    _this._truncateTitle = function () {\n      if (!_this._needMeasurement) {\n        return;\n      }\n\n      _this._async.requestAnimationFrame(_this._truncateWhenInAnimation);\n    };\n\n    _this._truncateWhenInAnimation = function () {\n      var originalTitle = _this.props.title;\n      var element = _this._titleElement.current;\n\n      if (element) {\n        var style = getComputedStyle(element);\n\n        if (style.width && style.lineHeight && style.height) {\n          var clientWidth = element.clientWidth,\n              scrollWidth = element.scrollWidth;\n          _this._clientWidth = clientWidth;\n          var lines = Math.floor((parseInt(style.height, 10) + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD) / parseInt(style.lineHeight, 10));\n          element.style.whiteSpace = ''; // Use overflow to predict truncated length.\n          // Take an example.The text is: A text with A very long text that need to be truncated.ppt\n          // if container is like\n          // |A text with A very| long text that need to be truncated.ppt\n          // The scroll width is 58, (take two | out of length)\n          // The client width is 18\n          // the overflow rate is scrollWidth/clientWidth which should be close to length(overflowText)/length(visualText)\n          // And the length of remaining text should be truncated is (original Length)/(58/18) -3 = 15.\n          // So that the logic can predict truncated text well.\n          // first piece will be `A text `, * second piece will be `ated.ppt`\n          // |A text ...ated.ppt|\n\n          var overFlowRate = scrollWidth / (parseInt(style.width, 10) * lines);\n\n          if (overFlowRate > 1) {\n            var truncatedLength = originalTitle.length / overFlowRate - 3;\n            /** Saved for separator */\n\n            return _this.setState({\n              truncatedTitleFirstPiece: originalTitle.slice(0, truncatedLength / 2),\n              truncatedTitleSecondPiece: originalTitle.slice(originalTitle.length - truncatedLength / 2)\n            });\n          }\n        }\n      }\n    };\n\n    _this._shrinkTitle = function () {\n      var _a = _this.state,\n          truncatedTitleFirstPiece = _a.truncatedTitleFirstPiece,\n          truncatedTitleSecondPiece = _a.truncatedTitleSecondPiece;\n\n      if (truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n        var titleElement = _this._titleElement.current;\n\n        if (!titleElement) {\n          return;\n        }\n\n        if (titleElement.scrollHeight > titleElement.clientHeight + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD || titleElement.scrollWidth > titleElement.clientWidth) {\n          _this.setState({\n            truncatedTitleFirstPiece: truncatedTitleFirstPiece.slice(0, truncatedTitleFirstPiece.length - 1),\n            truncatedTitleSecondPiece: truncatedTitleSecondPiece.slice(1)\n          });\n        }\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    _this._clientWidth = undefined;\n    _this.state = {\n      truncatedTitleFirstPiece: undefined,\n      truncatedTitleSecondPiece: undefined\n    };\n    return _this;\n  }\n\n  DocumentCardTitleBase.prototype.componentDidUpdate = function (prevProps) {\n    var _this = this;\n\n    if (this.props.title !== prevProps.title) {\n      this.setState({\n        truncatedTitleFirstPiece: undefined,\n        truncatedTitleSecondPiece: undefined\n      });\n    }\n\n    if (prevProps.shouldTruncate !== this.props.shouldTruncate) {\n      if (this.props.shouldTruncate) {\n        this._truncateTitle();\n\n        this._async.requestAnimationFrame(this._shrinkTitle);\n\n        this._events.on(window, 'resize', this._updateTruncation);\n      } else {\n        this._events.off(window, 'resize', this._updateTruncation);\n      }\n    } else if (this._needMeasurement) {\n      this._async.requestAnimationFrame(function () {\n        _this._truncateWhenInAnimation();\n\n        _this._shrinkTitle();\n      });\n    }\n  };\n\n  DocumentCardTitleBase.prototype.componentDidMount = function () {\n    if (this.props.shouldTruncate) {\n      this._truncateTitle();\n\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  };\n\n  DocumentCardTitleBase.prototype.componentWillUnmount = function () {\n    this._events.dispose();\n\n    this._async.dispose();\n  };\n\n  DocumentCardTitleBase.prototype.render = function () {\n    var _a = this.props,\n        title = _a.title,\n        shouldTruncate = _a.shouldTruncate,\n        showAsSecondaryTitle = _a.showAsSecondaryTitle,\n        styles = _a.styles,\n        theme = _a.theme,\n        className = _a.className;\n    var _b = this.state,\n        truncatedTitleFirstPiece = _b.truncatedTitleFirstPiece,\n        truncatedTitleSecondPiece = _b.truncatedTitleSecondPiece;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      showAsSecondaryTitle: showAsSecondaryTitle\n    });\n\n    if (shouldTruncate && truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n      return React.createElement(\"div\", {\n        className: this._classNames.root,\n        ref: this._titleElement,\n        title: title\n      }, truncatedTitleFirstPiece, \"\\u2026\", truncatedTitleSecondPiece);\n    } else {\n      return React.createElement(\"div\", {\n        className: this._classNames.root,\n        ref: this._titleElement,\n        title: title,\n        style: this._needMeasurement ? {\n          whiteSpace: 'nowrap'\n        } : undefined\n      }, title);\n    }\n  };\n\n  Object.defineProperty(DocumentCardTitleBase.prototype, \"_needMeasurement\", {\n    /**\n     * In measuring, it will render a same style text with whiteSpace: 'nowrap', to get overflow rate.\n     * So that the logic can predict truncated text well.\n     */\n    get: function get() {\n      return !!this.props.shouldTruncate && this._clientWidth === undefined;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DocumentCardTitleBase.prototype._updateTruncation = function () {\n    var _this = this;\n\n    if (this._timerId) {\n      return;\n    }\n\n    this._timerId = this._async.setTimeout(function () {\n      delete _this._timerId;\n      _this._clientWidth = undefined;\n\n      _this.setState({\n        truncatedTitleFirstPiece: undefined,\n        truncatedTitleSecondPiece: undefined\n      });\n    }, 250);\n  };\n\n  return DocumentCardTitleBase;\n}(React.Component);\n\nexport { DocumentCardTitleBase };","map":{"version":3,"mappings":"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","names":["React","Async","EventGroup","classNamesFunction","initializeComponentRef","getClassNames","TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD","__extends","props","_super","_this","createRef","_needMeasurement","_async","requestAnimationFrame","_truncateWhenInAnimation","originalTitle","title","element","_titleElement","current","style","getComputedStyle","width","lineHeight","height","scrollWidth","_clientWidth","clientWidth","lines","Math","floor","parseInt","whiteSpace","overFlowRate","truncatedLength","length","setState","truncatedTitleFirstPiece","slice","truncatedTitleSecondPiece","state","titleElement","scrollHeight","clientHeight","_events","undefined","DocumentCardTitleBase","prevProps","shouldTruncate","_truncateTitle","_shrinkTitle","on","window","_updateTruncation","off","dispose","showAsSecondaryTitle","styles","theme","className","_classNames","root","ref","Object","_timerId","setTimeout","Component"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/DocumentCard/DocumentCardTitle.base.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Async, EventGroup, classNamesFunction } from '../../Utilities';\nimport { initializeComponentRef } from '@fluentui/utilities';\nimport type {\n  IDocumentCardTitleProps,\n  IDocumentCardTitleStyleProps,\n  IDocumentCardTitleStyles,\n} from './DocumentCardTitle.types';\nimport type { IProcessedStyleSet } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDocumentCardTitleStyleProps, IDocumentCardTitleStyles>();\n\nexport interface IDocumentCardTitleState {\n  truncatedTitleFirstPiece?: string;\n  truncatedTitleSecondPiece?: string;\n}\n\nconst TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD = 5;\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardTitleBase extends React.Component<IDocumentCardTitleProps, IDocumentCardTitleState> {\n  private _titleElement = React.createRef<HTMLDivElement>();\n  private _classNames: IProcessedStyleSet<IDocumentCardTitleStyles>;\n  private _async: Async;\n  private _events: EventGroup;\n  private _clientWidth: number | undefined;\n  private _timerId: number | undefined;\n\n  constructor(props: IDocumentCardTitleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    this._clientWidth = undefined;\n\n    this.state = {\n      truncatedTitleFirstPiece: undefined,\n      truncatedTitleSecondPiece: undefined,\n    };\n  }\n\n  public componentDidUpdate(prevProps: IDocumentCardTitleProps): void {\n    if (this.props.title !== prevProps.title) {\n      this.setState({\n        truncatedTitleFirstPiece: undefined,\n        truncatedTitleSecondPiece: undefined,\n      });\n    }\n\n    if (prevProps.shouldTruncate !== this.props.shouldTruncate) {\n      if (this.props.shouldTruncate) {\n        this._truncateTitle();\n        this._async.requestAnimationFrame(this._shrinkTitle);\n        this._events.on(window, 'resize', this._updateTruncation);\n      } else {\n        this._events.off(window, 'resize', this._updateTruncation);\n      }\n    } else if (this._needMeasurement) {\n      this._async.requestAnimationFrame(() => {\n        this._truncateWhenInAnimation();\n        this._shrinkTitle();\n      });\n    }\n  }\n\n  public componentDidMount(): void {\n    if (this.props.shouldTruncate) {\n      this._truncateTitle();\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { title, shouldTruncate, showAsSecondaryTitle, styles, theme, className } = this.props;\n    const { truncatedTitleFirstPiece, truncatedTitleSecondPiece } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      showAsSecondaryTitle,\n    });\n\n    if (shouldTruncate && truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n      return (\n        <div className={this._classNames.root} ref={this._titleElement} title={title}>\n          {truncatedTitleFirstPiece}\n          &hellip;\n          {truncatedTitleSecondPiece}\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className={this._classNames.root}\n          ref={this._titleElement}\n          title={title}\n          style={this._needMeasurement ? { whiteSpace: 'nowrap' } : undefined}\n        >\n          {title}\n        </div>\n      );\n    }\n  }\n\n  /**\n   * In measuring, it will render a same style text with whiteSpace: 'nowrap', to get overflow rate.\n   * So that the logic can predict truncated text well.\n   */\n  private get _needMeasurement(): boolean {\n    return !!this.props.shouldTruncate && this._clientWidth === undefined;\n  }\n\n  // Truncate logic here way can't handle the case that chars with different widths are mixed very well.\n  // Let _shrinkTitle take care of that.\n  private _truncateTitle = (): void => {\n    if (!this._needMeasurement) {\n      return;\n    }\n\n    this._async.requestAnimationFrame(this._truncateWhenInAnimation);\n  };\n\n  private _truncateWhenInAnimation: () => void = () => {\n    const originalTitle = this.props.title;\n    const element: HTMLDivElement | null = this._titleElement.current;\n\n    if (element) {\n      const style: CSSStyleDeclaration = getComputedStyle(element);\n      if (style.width && style.lineHeight && style.height) {\n        const { clientWidth, scrollWidth } = element;\n\n        this._clientWidth = clientWidth;\n\n        const lines: number = Math.floor(\n          (parseInt(style.height, 10) + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD) / parseInt(style.lineHeight, 10),\n        );\n\n        element.style.whiteSpace = '';\n\n        // Use overflow to predict truncated length.\n        // Take an example.The text is: A text with A very long text that need to be truncated.ppt\n        // if container is like\n        // |A text with A very| long text that need to be truncated.ppt\n        // The scroll width is 58, (take two | out of length)\n        // The client width is 18\n        // the overflow rate is scrollWidth/clientWidth which should be close to length(overflowText)/length(visualText)\n        // And the length of remaining text should be truncated is (original Length)/(58/18) -3 = 15.\n        // So that the logic can predict truncated text well.\n        // first piece will be `A text `, * second piece will be `ated.ppt`\n        // |A text ...ated.ppt|\n        const overFlowRate: number = scrollWidth / (parseInt(style.width, 10) * lines);\n\n        if (overFlowRate > 1) {\n          const truncatedLength: number = originalTitle.length / overFlowRate - 3; /** Saved for separator */\n          return this.setState({\n            truncatedTitleFirstPiece: originalTitle.slice(0, truncatedLength / 2),\n            truncatedTitleSecondPiece: originalTitle.slice(originalTitle.length - truncatedLength / 2),\n          });\n        }\n      }\n    }\n  };\n\n  private _shrinkTitle: () => void = () => {\n    const { truncatedTitleFirstPiece, truncatedTitleSecondPiece } = this.state;\n    if (truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n      const titleElement = this._titleElement.current;\n\n      if (!titleElement) {\n        return;\n      }\n\n      if (\n        titleElement.scrollHeight > titleElement.clientHeight + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD ||\n        titleElement.scrollWidth > titleElement.clientWidth\n      ) {\n        this.setState({\n          truncatedTitleFirstPiece: truncatedTitleFirstPiece.slice(0, truncatedTitleFirstPiece.length - 1),\n          truncatedTitleSecondPiece: truncatedTitleSecondPiece.slice(1),\n        });\n      }\n    }\n  };\n\n  private _updateTruncation(): void {\n    if (this._timerId) {\n      return;\n    }\n\n    this._timerId = this._async.setTimeout(() => {\n      delete this._timerId;\n      this._clientWidth = undefined;\n      this.setState({\n        truncatedTitleFirstPiece: undefined,\n        truncatedTitleSecondPiece: undefined,\n      });\n    }, 250);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}