{"ast":null,"code":"import { Stylesheet, mergeCssSets, fontFace as mergeFontFace, keyframes as mergeKeyframes } from '@fluentui/merge-styles';\nvar _seed = 0;\nexport var mergeStylesRenderer = {\n  reset: function reset() {\n    // If the stylesheet reset call is made, invalidate the cache keys.\n    Stylesheet.getInstance().onReset(function () {\n      return _seed++;\n    });\n  },\n  getId: function getId() {\n    return _seed;\n  },\n  renderStyles: function renderStyles(styleSet, options) {\n    return mergeCssSets(Array.isArray(styleSet) ? styleSet : [styleSet], options);\n  },\n  renderFontFace: function renderFontFace(fontFace, options) {\n    return mergeFontFace(fontFace);\n  },\n  renderKeyframes: function renderKeyframes(keyframes) {\n    return mergeKeyframes(keyframes);\n  }\n};","map":{"version":3,"mappings":"AAAA,SACEA,UADF,EAEEC,YAFF,EAGEC,QAAQ,IAAIC,aAHd,EAIEC,SAAS,IAAIC,cAJf,QAKO,wBALP;AAQA,IAAIC,KAAK,GAAG,CAAZ;AAEA,OAAO,IAAMC,mBAAmB,GAAkB;AAChDC,OAAK,EAAE;AACL;AACAR,cAAU,CAACS,WAAX,GAAyBC,OAAzB,CAAiC;AAAM,kBAAK,EAAL;AAAO,KAA9C;AACD,GAJ+C;AAMhDC,OAAK,EAAE;AAAM;AAAK,GAN8B;AAQhDC,cAAY,EAAE,sBAACC,QAAD,EAAWC,OAAX,EAAkB;AAC9B,WAAOb,YAAY,CAAEc,KAAK,CAACC,OAAN,CAAcH,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAvC,EAA2DC,OAA3D,CAAnB;AACD,GAV+C;AAYhDG,gBAAc,EAAE,wBAACf,QAAD,EAAWY,OAAX,EAAkB;AAChC,WAAOX,aAAa,CAACD,QAAD,CAApB;AACD,GAd+C;AAgBhDgB,iBAAe,EAAE,oCAAS;AACxB,WAAOb,cAAc,CAACD,SAAD,CAArB;AACD;AAlB+C,CAA3C","names":["Stylesheet","mergeCssSets","fontFace","mergeFontFace","keyframes","mergeKeyframes","_seed","mergeStylesRenderer","reset","getInstance","onReset","getId","renderStyles","styleSet","options","Array","isArray","renderFontFace","renderKeyframes"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/utilities/ThemeProvider/src/utilities/ThemeProvider/styleRenderers/mergeStylesRenderer.tsx"],"sourcesContent":["import {\n  Stylesheet,\n  mergeCssSets,\n  fontFace as mergeFontFace,\n  keyframes as mergeKeyframes,\n} from '@fluentui/merge-styles';\nimport type { StyleRenderer } from './types';\n\nlet _seed = 0;\n\nexport const mergeStylesRenderer: StyleRenderer = {\n  reset: () => {\n    // If the stylesheet reset call is made, invalidate the cache keys.\n    Stylesheet.getInstance().onReset(() => _seed++);\n  },\n\n  getId: () => _seed,\n\n  renderStyles: (styleSet, options) => {\n    return mergeCssSets((Array.isArray(styleSet) ? styleSet : [styleSet]) as any, options) as any;\n  },\n\n  renderFontFace: (fontFace, options) => {\n    return mergeFontFace(fontFace);\n  },\n\n  renderKeyframes: keyframes => {\n    return mergeKeyframes(keyframes as any);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}