{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Selection } from '../../Selection';\nimport { initializeComponentRef } from '../../Utilities';\n\nvar BaseSelectedItemsList =\n/** @class */\nfunction (_super) {\n  __extends(BaseSelectedItemsList, _super);\n\n  function BaseSelectedItemsList(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this;\n\n    _this.addItems = function (items) {\n      var processedItems = _this.props.onItemSelected ? _this.props.onItemSelected(items) : items;\n      var processedItemObjects = processedItems;\n      var processedItemPromiseLikes = processedItems;\n\n      if (processedItemPromiseLikes && processedItemPromiseLikes.then) {\n        processedItemPromiseLikes.then(function (resolvedProcessedItems) {\n          var newItems = _this.state.items.concat(resolvedProcessedItems);\n\n          _this.updateItems(newItems);\n        });\n      } else {\n        var newItems = _this.state.items.concat(processedItemObjects);\n\n        _this.updateItems(newItems);\n      }\n    };\n\n    _this.removeItemAt = function (index) {\n      var items = _this.state.items;\n\n      if (_this._canRemoveItem(items[index])) {\n        if (index > -1) {\n          if (_this.props.onItemsDeleted) {\n            _this.props.onItemsDeleted([items[index]]);\n          }\n\n          var newItems = items.slice(0, index).concat(items.slice(index + 1));\n\n          _this.updateItems(newItems);\n        }\n      }\n    };\n\n    _this.removeItem = function (item) {\n      var items = _this.state.items;\n      var index = items.indexOf(item);\n\n      _this.removeItemAt(index);\n    };\n\n    _this.replaceItem = function (itemToReplace, itemsToReplaceWith) {\n      var items = _this.state.items;\n      var index = items.indexOf(itemToReplace);\n\n      if (index > -1) {\n        var newItems = items.slice(0, index).concat(itemsToReplaceWith).concat(items.slice(index + 1));\n\n        _this.updateItems(newItems);\n      }\n    };\n\n    _this.removeItems = function (itemsToRemove) {\n      var items = _this.state.items;\n      var itemsCanRemove = itemsToRemove.filter(function (item) {\n        return _this._canRemoveItem(item);\n      });\n      var newItems = items.filter(function (item) {\n        return itemsCanRemove.indexOf(item) === -1;\n      });\n      var firstItemToRemove = itemsCanRemove[0];\n      var index = items.indexOf(firstItemToRemove);\n\n      if (_this.props.onItemsDeleted) {\n        _this.props.onItemsDeleted(itemsCanRemove);\n      }\n\n      _this.updateItems(newItems, index);\n    };\n\n    _this.onCopy = function (ev) {\n      if (_this.props.onCopyItems && _this.selection.getSelectedCount() > 0) {\n        var selectedItems = _this.selection.getSelection();\n\n        _this.copyItems(selectedItems);\n      }\n    };\n\n    _this.renderItems = function () {\n      var removeButtonAriaLabel = _this.props.removeButtonAriaLabel;\n      var onRenderItem = _this.props.onRenderItem;\n      var items = _this.state.items;\n      return items.map(function (item, index) {\n        return onRenderItem({\n          item: item,\n          index: index,\n          key: item.key ? item.key : index,\n          selected: _this.selection.isIndexSelected(index),\n          onRemoveItem: function onRemoveItem() {\n            return _this.removeItem(item);\n          },\n          onItemChange: _this.onItemChange,\n          removeButtonAriaLabel: removeButtonAriaLabel,\n          onCopyItem: function onCopyItem(itemToCopy) {\n            return _this.copyItems([itemToCopy]);\n          }\n        });\n      });\n    };\n\n    _this.onSelectionChanged = function () {\n      _this.forceUpdate();\n    };\n\n    _this.onItemChange = function (changedItem, index) {\n      var items = _this.state.items;\n\n      if (index >= 0) {\n        var newItems = items;\n        newItems[index] = changedItem;\n\n        _this.updateItems(newItems);\n      }\n    };\n\n    initializeComponentRef(_this);\n    var items = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n    _this.state = {\n      items: items\n    }; // Create a new selection if one is not specified\n\n    _this._defaultSelection = new Selection({\n      onSelectionChanged: _this.onSelectionChanged\n    });\n    return _this;\n  }\n\n  BaseSelectedItemsList.getDerivedStateFromProps = function (newProps) {\n    if (newProps.selectedItems) {\n      return {\n        items: newProps.selectedItems\n      };\n    }\n\n    return null;\n  };\n\n  Object.defineProperty(BaseSelectedItemsList.prototype, \"items\", {\n    get: function get() {\n      return this.state.items;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BaseSelectedItemsList.prototype.removeSelectedItems = function () {\n    if (this.state.items.length && this.selection.getSelectedCount() > 0) {\n      this.removeItems(this.selection.getSelection());\n    }\n  };\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If selectedItems is provided, this will act as a controlled component and will not update its own state.\n   */\n\n\n  BaseSelectedItemsList.prototype.updateItems = function (items, focusIndex) {\n    var _this = this;\n\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to pass the new props\n      this.onChange(items);\n    } else {\n      this.setState({\n        items: items\n      }, function () {\n        _this._onSelectedItemsUpdated(items, focusIndex);\n      });\n    }\n  };\n\n  BaseSelectedItemsList.prototype.hasSelectedItems = function () {\n    return this.selection.getSelectedCount() > 0;\n  };\n\n  BaseSelectedItemsList.prototype.componentDidUpdate = function (oldProps, oldState) {\n    if (this.state.items && this.state.items !== oldState.items) {\n      this.selection.setItems(this.state.items);\n    }\n  };\n\n  BaseSelectedItemsList.prototype.unselectAll = function () {\n    this.selection.setAllSelected(false);\n  };\n\n  BaseSelectedItemsList.prototype.highlightedItems = function () {\n    return this.selection.getSelection();\n  };\n\n  BaseSelectedItemsList.prototype.componentDidMount = function () {\n    this.selection.setItems(this.state.items);\n  };\n\n  Object.defineProperty(BaseSelectedItemsList.prototype, \"selection\", {\n    get: function get() {\n      var _a;\n\n      return (_a = this.props.selection) !== null && _a !== void 0 ? _a : this._defaultSelection;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BaseSelectedItemsList.prototype.render = function () {\n    return this.renderItems();\n  };\n\n  BaseSelectedItemsList.prototype.onChange = function (items) {\n    if (this.props.onChange) {\n      this.props.onChange(items);\n    }\n  };\n\n  BaseSelectedItemsList.prototype.copyItems = function (items) {\n    if (this.props.onCopyItems) {\n      var copyText = this.props.onCopyItems(items);\n      var copyInput = document.createElement('input');\n      document.body.appendChild(copyInput);\n\n      try {\n        // Try to copy the text directly to the clipboard\n        copyInput.value = copyText;\n        copyInput.select();\n\n        if (!document.execCommand('copy')) {\n          // The command failed. Fallback to the method below.\n          throw new Error();\n        }\n      } catch (err) {// no op\n      } finally {\n        document.body.removeChild(copyInput);\n      }\n    }\n  };\n\n  BaseSelectedItemsList.prototype._onSelectedItemsUpdated = function (items, focusIndex) {\n    this.onChange(items);\n  };\n\n  BaseSelectedItemsList.prototype._canRemoveItem = function (item) {\n    return !this.props.canRemoveItem || this.props.canRemoveItem(item);\n  };\n\n  return BaseSelectedItemsList;\n}(React.Component);\n\nexport { BaseSelectedItemsList };","map":{"version":3,"mappings":"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","names":["React","Selection","initializeComponentRef","__extends","basePickerProps","_super","_this","items","processedItems","props","onItemSelected","processedItemObjects","processedItemPromiseLikes","then","resolvedProcessedItems","newItems","state","concat","updateItems","index","_canRemoveItem","onItemsDeleted","slice","item","indexOf","removeItemAt","itemToReplace","itemsToReplaceWith","itemsToRemove","itemsCanRemove","filter","firstItemToRemove","ev","onCopyItems","selection","getSelectedCount","selectedItems","getSelection","copyItems","removeButtonAriaLabel","onRenderItem","map","key","selected","isIndexSelected","onRemoveItem","removeItem","onItemChange","onCopyItem","itemToCopy","forceUpdate","changedItem","defaultSelectedItems","_defaultSelection","onSelectionChanged","BaseSelectedItemsList","newProps","Object","length","removeItems","focusIndex","onChange","setState","_onSelectedItemsUpdated","oldProps","oldState","setItems","setAllSelected","_a","renderItems","copyText","copyInput","document","createElement","body","appendChild","value","select","execCommand","Error","err","removeChild","canRemoveItem","Component"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/SelectedItemsList/BaseSelectedItemsList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Selection } from '../../Selection';\nimport { initializeComponentRef } from '../../Utilities';\nimport type {\n  IBaseSelectedItemsList,\n  IBaseSelectedItemsListProps,\n  ISelectedItemProps,\n} from './BaseSelectedItemsList.types';\nimport type { IObjectWithKey } from '../../Utilities';\n\nexport interface IBaseSelectedItemsListState<T> {\n  items: T[];\n}\n\nexport class BaseSelectedItemsList<T, P extends IBaseSelectedItemsListProps<T>>\n  extends React.Component<P, IBaseSelectedItemsListState<T>>\n  implements IBaseSelectedItemsList<T> {\n  protected root: HTMLElement;\n  private _defaultSelection: Selection;\n\n  public static getDerivedStateFromProps(newProps: IBaseSelectedItemsListProps<any>) {\n    if (newProps.selectedItems) {\n      return { items: newProps.selectedItems };\n    }\n\n    return null;\n  }\n\n  constructor(basePickerProps: P) {\n    super(basePickerProps);\n\n    initializeComponentRef(this);\n    const items: T[] = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n    this.state = {\n      items: items,\n    };\n\n    // Create a new selection if one is not specified\n    this._defaultSelection = new Selection({ onSelectionChanged: this.onSelectionChanged });\n  }\n\n  public get items(): T[] {\n    return this.state.items;\n  }\n\n  public addItems = (items: T[]): void => {\n    const processedItems: T[] | PromiseLike<T[]> = this.props.onItemSelected\n      ? (this.props.onItemSelected as any)(items)\n      : items;\n\n    const processedItemObjects: T[] = processedItems as T[];\n    const processedItemPromiseLikes: PromiseLike<T[]> = processedItems as PromiseLike<T[]>;\n\n    if (processedItemPromiseLikes && processedItemPromiseLikes.then) {\n      processedItemPromiseLikes.then((resolvedProcessedItems: T[]) => {\n        const newItems: T[] = this.state.items.concat(resolvedProcessedItems);\n        this.updateItems(newItems);\n      });\n    } else {\n      const newItems: T[] = this.state.items.concat(processedItemObjects);\n      this.updateItems(newItems);\n    }\n  };\n\n  public removeItemAt = (index: number): void => {\n    const { items } = this.state;\n\n    if (this._canRemoveItem(items[index])) {\n      if (index > -1) {\n        if (this.props.onItemsDeleted) {\n          (this.props.onItemsDeleted as (item: T[]) => void)([items[index]]);\n        }\n\n        const newItems = items.slice(0, index).concat(items.slice(index + 1));\n        this.updateItems(newItems);\n      }\n    }\n  };\n\n  public removeItem = (item: T): void => {\n    const { items } = this.state;\n    const index: number = items.indexOf(item);\n\n    this.removeItemAt(index);\n  };\n\n  public replaceItem = (itemToReplace: T, itemsToReplaceWith: T[]): void => {\n    const { items } = this.state;\n    const index: number = items.indexOf(itemToReplace);\n    if (index > -1) {\n      const newItems = items\n        .slice(0, index)\n        .concat(itemsToReplaceWith)\n        .concat(items.slice(index + 1));\n      this.updateItems(newItems);\n    }\n  };\n\n  public removeItems = (itemsToRemove: any[]): void => {\n    const { items } = this.state;\n    const itemsCanRemove = itemsToRemove.filter(item => this._canRemoveItem(item));\n    const newItems: T[] = items.filter(item => itemsCanRemove.indexOf(item) === -1);\n    const firstItemToRemove = itemsCanRemove[0];\n    const index: number = items.indexOf(firstItemToRemove);\n\n    if (this.props.onItemsDeleted) {\n      (this.props.onItemsDeleted as (item: T[]) => void)(itemsCanRemove);\n    }\n\n    this.updateItems(newItems, index);\n  };\n\n  public removeSelectedItems(): void {\n    if (this.state.items.length && this.selection.getSelectedCount() > 0) {\n      this.removeItems(this.selection.getSelection());\n    }\n  }\n\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If selectedItems is provided, this will act as a controlled component and will not update its own state.\n   */\n  public updateItems(items: T[], focusIndex?: number): void {\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to pass the new props\n      this.onChange(items);\n    } else {\n      this.setState({ items: items }, () => {\n        this._onSelectedItemsUpdated(items, focusIndex);\n      });\n    }\n  }\n\n  public onCopy = (ev: React.ClipboardEvent<HTMLElement>): void => {\n    if (this.props.onCopyItems && this.selection.getSelectedCount() > 0) {\n      const selectedItems: T[] = this.selection.getSelection() as T[];\n      this.copyItems(selectedItems);\n    }\n  };\n\n  public hasSelectedItems(): boolean {\n    return this.selection.getSelectedCount() > 0;\n  }\n\n  public componentDidUpdate(oldProps: P, oldState: IBaseSelectedItemsListState<IObjectWithKey>): void {\n    if (this.state.items && this.state.items !== oldState.items) {\n      this.selection.setItems(this.state.items);\n    }\n  }\n\n  public unselectAll(): void {\n    this.selection.setAllSelected(false);\n  }\n\n  public highlightedItems(): T[] {\n    return this.selection.getSelection() as T[];\n  }\n\n  public componentDidMount(): void {\n    this.selection.setItems(this.state.items);\n  }\n\n  protected get selection(): Selection {\n    return this.props.selection ?? this._defaultSelection;\n  }\n\n  public render(): any {\n    return this.renderItems();\n  }\n\n  protected renderItems = (): JSX.Element[] => {\n    const { removeButtonAriaLabel } = this.props;\n    const onRenderItem = this.props.onRenderItem as (props: ISelectedItemProps<T>) => JSX.Element;\n\n    const { items } = this.state;\n    return items.map((item: any, index: number) =>\n      onRenderItem({\n        item,\n        index,\n        key: item.key ? item.key : index,\n        selected: this.selection.isIndexSelected(index),\n        onRemoveItem: () => this.removeItem(item),\n        onItemChange: this.onItemChange,\n        removeButtonAriaLabel: removeButtonAriaLabel,\n        onCopyItem: (itemToCopy: T) => this.copyItems([itemToCopy]),\n      }),\n    );\n  };\n\n  protected onSelectionChanged = (): void => {\n    this.forceUpdate();\n  };\n\n  protected onChange(items?: T[]): void {\n    if (this.props.onChange) {\n      (this.props.onChange as (items?: T[]) => void)(items);\n    }\n  }\n\n  protected onItemChange = (changedItem: T, index: number): void => {\n    const { items } = this.state;\n\n    if (index >= 0) {\n      const newItems: T[] = items;\n      newItems[index] = changedItem;\n\n      this.updateItems(newItems);\n    }\n  };\n\n  protected copyItems(items: T[]): void {\n    if (this.props.onCopyItems) {\n      const copyText = (this.props.onCopyItems as any)(items);\n\n      const copyInput = document.createElement('input') as HTMLInputElement;\n      document.body.appendChild(copyInput);\n\n      try {\n        // Try to copy the text directly to the clipboard\n        copyInput.value = copyText;\n        copyInput.select();\n        if (!document.execCommand('copy')) {\n          // The command failed. Fallback to the method below.\n          throw new Error();\n        }\n      } catch (err) {\n        // no op\n      } finally {\n        document.body.removeChild(copyInput);\n      }\n    }\n  }\n\n  private _onSelectedItemsUpdated(items?: T[], focusIndex?: number): void {\n    this.onChange(items);\n  }\n\n  private _canRemoveItem(item: T): boolean {\n    return !this.props.canRemoveItem || this.props.canRemoveItem(item);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}