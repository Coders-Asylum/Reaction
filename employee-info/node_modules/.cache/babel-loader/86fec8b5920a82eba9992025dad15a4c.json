{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { Modal } from '../../Modal';\nimport { withResponsiveMode } from '../../ResponsiveMode';\nvar getClassNames = classNamesFunction();\nimport { DialogContent } from './DialogContent';\nvar DefaultModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false,\n  enableAriaHiddenSiblings: true\n};\nvar DefaultDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: []\n}; // eslint-disable-next-line deprecation/deprecation\n\nvar DialogBase =\n/** @class */\nfunction (_super) {\n  __extends(DialogBase, _super);\n\n  function DialogBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._getSubTextId = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          ariaDescribedById = _a.ariaDescribedById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          subText = _a.subText;\n      var id = modalProps && modalProps.subtitleAriaId || ariaDescribedById;\n\n      if (!id) {\n        id = (dialogContentProps && dialogContentProps.subText || subText) && _this._defaultSubTextId;\n      }\n\n      return id;\n    };\n\n    _this._getTitleTextId = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          ariaLabelledById = _a.ariaLabelledById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          title = _a.title;\n      var id = modalProps && modalProps.titleAriaId || ariaLabelledById;\n\n      if (!id) {\n        id = (dialogContentProps && dialogContentProps.title || title) && _this._defaultTitleTextId;\n      }\n\n      return id;\n    };\n\n    _this._id = getId('Dialog');\n    _this._defaultTitleTextId = _this._id + '-title';\n    _this._defaultSubTextId = _this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId'\n      });\n    }\n\n    return _this;\n  }\n\n  DialogBase.prototype.render = function () {\n    var _a, _b;\n\n    var props = this.props;\n    var\n    /* eslint-disable deprecation/deprecation */\n    className = props.className,\n        containerClassName = props.containerClassName,\n        contentClassName = props.contentClassName,\n        elementToFocusOnDismiss = props.elementToFocusOnDismiss,\n        firstFocusableSelector = props.firstFocusableSelector,\n        forceFocusInsideTrap = props.forceFocusInsideTrap,\n        styles = props.styles,\n        hidden = props.hidden,\n        ignoreExternalFocusing = props.ignoreExternalFocusing,\n        isBlocking = props.isBlocking,\n        isClickableOutsideFocusTrap = props.isClickableOutsideFocusTrap,\n        isDarkOverlay = props.isDarkOverlay,\n        _c = props.isOpen,\n        isOpen = _c === void 0 ? !hidden : _c,\n        onDismiss = props.onDismiss,\n        onDismissed = props.onDismissed,\n        onLayerDidMount = props.onLayerDidMount,\n        responsiveMode = props.responsiveMode,\n        subText = props.subText,\n        theme = props.theme,\n        title = props.title,\n        topButtonsProps = props.topButtonsProps,\n        type = props.type,\n\n    /* eslint-enable deprecation/deprecation */\n    minWidth = props.minWidth,\n        maxWidth = props.maxWidth,\n        modalProps = props.modalProps;\n\n    var mergedLayerProps = __assign({\n      onLayerDidMount: onLayerDidMount\n    }, modalProps === null || modalProps === void 0 ? void 0 : modalProps.layerProps);\n\n    var dialogDraggableClassName;\n    var dragOptions = modalProps === null || modalProps === void 0 ? void 0 : modalProps.dragOptions; // if we are draggable, make sure we are using the correct\n    // draggable classname and selectors\n\n    if (dragOptions && !dragOptions.dragHandleSelector) {\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions.dragHandleSelector = \".\" + dialogDraggableClassName;\n    }\n\n    var mergedModalProps = __assign(__assign(__assign(__assign({}, DefaultModalProps), {\n      elementToFocusOnDismiss: elementToFocusOnDismiss,\n      firstFocusableSelector: firstFocusableSelector,\n      forceFocusInsideTrap: forceFocusInsideTrap,\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      isClickableOutsideFocusTrap: isClickableOutsideFocusTrap,\n      responsiveMode: responsiveMode,\n      className: className,\n      containerClassName: containerClassName,\n      isBlocking: isBlocking,\n      isDarkOverlay: isDarkOverlay,\n      onDismissed: onDismissed\n    }), modalProps), {\n      layerProps: mergedLayerProps,\n      dragOptions: dragOptions,\n      isOpen: isOpen\n    });\n\n    var dialogContentProps = __assign(__assign(__assign({\n      className: contentClassName,\n      subText: subText,\n      title: title,\n      topButtonsProps: topButtonsProps,\n      type: type\n    }, DefaultDialogContentProps), props.dialogContentProps), {\n      draggableHeaderClassName: dialogDraggableClassName,\n      titleProps: __assign({\n        // eslint-disable-next-line deprecation/deprecation\n        id: ((_a = props.dialogContentProps) === null || _a === void 0 ? void 0 : _a.titleId) || this._defaultTitleTextId\n      }, (_b = props.dialogContentProps) === null || _b === void 0 ? void 0 : _b.titleProps)\n    });\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: mergedModalProps.className,\n      containerClassName: mergedModalProps.containerClassName,\n      hidden: hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth\n    });\n    return React.createElement(Modal, __assign({}, mergedModalProps, {\n      className: classNames.root,\n      containerClassName: classNames.main,\n      onDismiss: onDismiss || mergedModalProps.onDismiss,\n      subtitleAriaId: this._getSubTextId(),\n      titleAriaId: this._getTitleTextId()\n    }), React.createElement(DialogContent, __assign({\n      subTextId: this._defaultSubTextId,\n      showCloseButton: mergedModalProps.isBlocking,\n      onDismiss: onDismiss\n    }, dialogContentProps), props.children));\n  };\n\n  DialogBase.defaultProps = {\n    hidden: true\n  };\n  DialogBase = __decorate([withResponsiveMode], DialogBase);\n  return DialogBase;\n}(React.Component);\n\nexport { DialogBase };","map":{"version":3,"mappings":"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","names":["React","warnDeprecations","classNamesFunction","getId","DialogType","Modal","withResponsiveMode","getClassNames","DialogContent","DefaultModalProps","isDarkOverlay","isBlocking","className","containerClassName","topOffsetFixed","enableAriaHiddenSiblings","DefaultDialogContentProps","type","normal","topButtonsProps","__extends","props","_super","_this","ariaDescribedById","modalProps","dialogContentProps","subText","id","subtitleAriaId","_defaultSubTextId","ariaLabelledById","title","titleAriaId","_defaultTitleTextId","_id","process","env","NODE_ENV","isOpen","contentClassName","onDismissed","onLayerDidMount","DialogBase","elementToFocusOnDismiss","firstFocusableSelector","forceFocusInsideTrap","styles","hidden","ignoreExternalFocusing","isClickableOutsideFocusTrap","_c","onDismiss","responsiveMode","theme","minWidth","maxWidth","mergedLayerProps","layerProps","dialogDraggableClassName","dragOptions","dragHandleSelector","mergedModalProps","draggableHeaderClassName","titleProps","_a","titleId","_b","classNames","dialogDefaultMinWidth","dialogDefaultMaxWidth","__assign","root","main","_getSubTextId","_getTitleTextId","subTextId","showCloseButton","children","Component"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/Dialog/Dialog.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { Modal } from '../../Modal';\nimport { withResponsiveMode } from '../../ResponsiveMode';\n\nconst getClassNames = classNamesFunction<IDialogStyleProps, IDialogStyles>();\n\nimport { DialogContent } from './DialogContent';\nimport type { IDialogProps, IDialogStyleProps, IDialogStyles } from './Dialog.types';\nimport type { IDialogContentProps } from './DialogContent.types';\nimport type { IModalProps } from '../../Modal';\nimport type { ILayerProps } from '../../Layer';\n\nconst DefaultModalProps: IModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false,\n  enableAriaHiddenSiblings: true,\n};\n\nconst DefaultDialogContentProps: IDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: [],\n};\n\n// eslint-disable-next-line deprecation/deprecation\n@withResponsiveMode\nexport class DialogBase extends React.Component<IDialogProps, {}> {\n  public static defaultProps: IDialogProps = {\n    hidden: true,\n  };\n\n  private _id: string;\n  private _defaultTitleTextId: string;\n  private _defaultSubTextId: string;\n\n  constructor(props: IDialogProps) {\n    super(props);\n\n    this._id = getId('Dialog');\n    this._defaultTitleTextId = this._id + '-title';\n    this._defaultSubTextId = this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId',\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n    const {\n      /* eslint-disable deprecation/deprecation */\n      className,\n      containerClassName,\n      contentClassName,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      styles,\n      hidden,\n      ignoreExternalFocusing,\n      isBlocking,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      isOpen = !hidden,\n      onDismiss,\n      onDismissed,\n      onLayerDidMount,\n      responsiveMode,\n      subText,\n      theme,\n      title,\n      topButtonsProps,\n      type,\n      /* eslint-enable deprecation/deprecation */\n      minWidth,\n      maxWidth,\n      modalProps,\n    } = props;\n\n    const mergedLayerProps: ILayerProps = {\n      onLayerDidMount,\n      ...modalProps?.layerProps,\n    };\n\n    let dialogDraggableClassName: string | undefined;\n    const dragOptions = modalProps?.dragOptions;\n\n    // if we are draggable, make sure we are using the correct\n    // draggable classname and selectors\n    if (dragOptions && !dragOptions.dragHandleSelector) {\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions.dragHandleSelector = `.${dialogDraggableClassName}`;\n    }\n\n    const mergedModalProps = {\n      ...DefaultModalProps,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      ignoreExternalFocusing,\n      isClickableOutsideFocusTrap,\n      responsiveMode,\n      className,\n      containerClassName,\n      isBlocking,\n      isDarkOverlay,\n      onDismissed,\n      ...modalProps,\n      layerProps: mergedLayerProps,\n      dragOptions,\n      isOpen,\n    };\n\n    const dialogContentProps: IDialogContentProps = {\n      className: contentClassName,\n      subText,\n      title,\n      topButtonsProps,\n      type,\n      ...DefaultDialogContentProps,\n      ...props.dialogContentProps,\n      draggableHeaderClassName: dialogDraggableClassName,\n      titleProps: {\n        // eslint-disable-next-line deprecation/deprecation\n        id: props.dialogContentProps?.titleId || this._defaultTitleTextId,\n        ...props.dialogContentProps?.titleProps,\n      },\n    };\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: mergedModalProps.className,\n      containerClassName: mergedModalProps.containerClassName,\n      hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth,\n    });\n\n    return (\n      <Modal\n        {...mergedModalProps}\n        className={classNames.root}\n        containerClassName={classNames.main}\n        onDismiss={onDismiss || mergedModalProps.onDismiss}\n        subtitleAriaId={this._getSubTextId()}\n        titleAriaId={this._getTitleTextId()}\n      >\n        <DialogContent\n          subTextId={this._defaultSubTextId}\n          showCloseButton={mergedModalProps.isBlocking}\n          onDismiss={onDismiss}\n          {...dialogContentProps}\n        >\n          {props.children}\n        </DialogContent>\n      </Modal>\n    );\n  }\n\n  private _getSubTextId = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaDescribedById, modalProps, dialogContentProps, subText } = this.props;\n    let id = (modalProps && modalProps.subtitleAriaId) || ariaDescribedById;\n\n    if (!id) {\n      id = ((dialogContentProps && dialogContentProps.subText) || subText) && this._defaultSubTextId;\n    }\n\n    return id;\n  };\n\n  private _getTitleTextId = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaLabelledById, modalProps, dialogContentProps, title } = this.props;\n    let id = (modalProps && modalProps.titleAriaId) || ariaLabelledById;\n\n    if (!id) {\n      id = ((dialogContentProps && dialogContentProps.title) || title) && this._defaultTitleTextId;\n    }\n\n    return id;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}