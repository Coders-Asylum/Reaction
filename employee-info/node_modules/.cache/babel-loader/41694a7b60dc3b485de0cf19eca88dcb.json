{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getFocusStyle, getGlobalClassNames, hiddenContentStyle, FontWeights } from '../../Styling';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { getCellStyles } from './DetailsHeader.styles';\nvar GlobalClassNames = {\n  isActionable: 'is-actionable',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  isEmpty: 'is-empty',\n  isIconVisible: 'is-icon-visible',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVerticalStyle: 'ms-DetailsColumn-gripperBar',\n  nearIcon: 'ms-DetailsColumn-nearIcon'\n};\nexport var getStyles = function getStyles(props) {\n  var _a;\n\n  var theme = props.theme,\n      headerClassName = props.headerClassName,\n      iconClassName = props.iconClassName,\n      isActionable = props.isActionable,\n      isEmpty = props.isEmpty,\n      isIconVisible = props.isIconVisible,\n      isPadded = props.isPadded,\n      isIconOnly = props.isIconOnly,\n      _b = props.cellStyleProps,\n      cellStyleProps = _b === void 0 ? DEFAULT_CELL_STYLE_PROPS : _b,\n      transitionDurationDrag = props.transitionDurationDrag,\n      transitionDurationDrop = props.transitionDurationDrop;\n  var semanticColors = theme.semanticColors,\n      palette = theme.palette,\n      fonts = theme.fonts;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    dropdownChevronForegroundColor: palette.neutralSecondary,\n    resizerColor: palette.neutralTertiaryAlt\n  };\n  var nearIconStyle = {\n    color: colors.iconForegroundColor,\n    opacity: 1,\n    paddingLeft: 8\n  };\n  var borderWhileDragging = {\n    outline: \"1px solid \" + palette.themePrimary\n  };\n  var borderAfterDragOrDrop = {\n    outlineColor: 'transparent'\n  };\n  return {\n    root: [getCellStyles(props), fonts.small, isActionable && [classNames.isActionable, {\n      selectors: {\n        ':hover': {\n          color: semanticColors.bodyText,\n          background: semanticColors.listHeaderBackgroundHovered\n        },\n        ':active': {\n          background: semanticColors.listHeaderBackgroundPressed\n        }\n      }\n    }], isEmpty && [classNames.isEmpty, {\n      textOverflow: 'clip'\n    }], isIconVisible && classNames.isIconVisible, isPadded && {\n      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding\n    }, {\n      selectors: {\n        ':hover i[data-icon-name=\"GripperBarVertical\"]': {\n          display: 'block'\n        }\n      }\n    }, headerClassName],\n    gripperBarVerticalStyle: {\n      display: 'none',\n      position: 'absolute',\n      textAlign: 'left',\n      color: palette.neutralTertiary,\n      left: 1\n    },\n    nearIcon: [classNames.nearIcon, nearIconStyle],\n    sortIcon: [nearIconStyle, {\n      paddingLeft: 4,\n      position: 'relative',\n      top: 1\n    }],\n    iconClassName: [{\n      color: colors.iconForegroundColor,\n      opacity: 1\n    }, iconClassName],\n    filterChevron: [classNames.filterChevron, {\n      color: colors.dropdownChevronForegroundColor,\n      paddingLeft: 6,\n      verticalAlign: 'middle',\n      fontSize: fonts.small.fontSize\n    }],\n    cellTitle: [classNames.cellTitle, getFocusStyle(theme), __assign({\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      alignItems: 'stretch',\n      boxSizing: 'border-box',\n      overflow: 'hidden',\n      padding: \"0 \" + cellStyleProps.cellRightPadding + \"px 0 \" + cellStyleProps.cellLeftPadding + \"px\"\n    }, isIconOnly ? {\n      alignContent: 'flex-end',\n      maxHeight: '100%',\n      flexWrap: 'wrap-reverse'\n    } : {})],\n    cellName: [classNames.cellName, {\n      flex: '0 1 auto',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      fontWeight: FontWeights.semibold,\n      fontSize: fonts.medium.fontSize\n    }, isIconOnly && {\n      selectors: (_a = {}, _a[\".\" + classNames.nearIcon] = {\n        paddingLeft: 0\n      }, _a)\n    }],\n    cellTooltip: {\n      display: 'block',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0\n    },\n    accessibleLabel: hiddenContentStyle,\n    borderWhileDragging: borderWhileDragging,\n    noBorderWhileDragging: [borderAfterDragOrDrop, {\n      transition: \"outline \" + transitionDurationDrag + \"ms ease\"\n    }],\n    borderAfterDropping: borderWhileDragging,\n    noBorderAfterDropping: [borderAfterDragOrDrop, {\n      transition: \"outline  \" + transitionDurationDrop + \"ms ease\"\n    }]\n  };\n};","map":{"version":3,"mappings":"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","names":["getFocusStyle","getGlobalClassNames","hiddenContentStyle","FontWeights","DEFAULT_CELL_STYLE_PROPS","getCellStyles","GlobalClassNames","isActionable","cellIsCheck","collapseButton","isCollapsed","isAllSelected","isSelectAllHidden","isResizingColumn","isEmpty","isIconVisible","cellSizer","isResizing","dropHintCircleStyle","dropHintLineStyle","cellTitle","cellName","filterChevron","gripperBarVerticalStyle","nearIcon","getStyles","props","headerClassName","iconClassName","isPadded","isIconOnly","_b","cellStyleProps","transitionDurationDrag","transitionDurationDrop","theme","palette","fonts","classNames","colors","iconForegroundColor","semanticColors","bodySubtext","headerForegroundColor","bodyText","headerBackgroundColor","bodyBackground","dropdownChevronForegroundColor","neutralSecondary","resizerColor","neutralTertiaryAlt","nearIconStyle","color","opacity","paddingLeft","borderWhileDragging","outline","themePrimary","borderAfterDragOrDrop","outlineColor","root","small","selectors","background","listHeaderBackgroundHovered","listHeaderBackgroundPressed","textOverflow","paddingRight","cellExtraRightPadding","cellRightPadding","display","position","textAlign","neutralTertiary","left","sortIcon","top","verticalAlign","fontSize","flexDirection","justifyContent","alignItems","boxSizing","overflow","padding","cellLeftPadding","alignContent","maxHeight","flexWrap","flex","fontWeight","semibold","medium","_a","cellTooltip","bottom","right","accessibleLabel","noBorderWhileDragging","transition","borderAfterDropping","noBorderAfterDropping"],"sources":["/home/runner/work/Reaction/Reaction/employee-info/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsColumn.styles.ts"],"sourcesContent":["import { getFocusStyle, getGlobalClassNames, hiddenContentStyle, FontWeights } from '../../Styling';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { getCellStyles } from './DetailsHeader.styles';\nimport type { IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\nimport type { IStyle } from '../../Styling';\n\nconst GlobalClassNames = {\n  isActionable: 'is-actionable',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  isEmpty: 'is-empty',\n  isIconVisible: 'is-icon-visible',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVerticalStyle: 'ms-DetailsColumn-gripperBar',\n  nearIcon: 'ms-DetailsColumn-nearIcon',\n};\n\nexport const getStyles = (props: IDetailsColumnStyleProps): IDetailsColumnStyles => {\n  const {\n    theme,\n    headerClassName,\n    iconClassName,\n    isActionable,\n    isEmpty,\n    isIconVisible,\n    isPadded,\n    isIconOnly,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    transitionDurationDrag,\n    transitionDurationDrop,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    dropdownChevronForegroundColor: palette.neutralSecondary,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const nearIconStyle: IStyle = {\n    color: colors.iconForegroundColor,\n    opacity: 1,\n    paddingLeft: 8,\n  };\n\n  const borderWhileDragging: IStyle = {\n    outline: `1px solid ${palette.themePrimary}`,\n  };\n\n  const borderAfterDragOrDrop: IStyle = {\n    outlineColor: 'transparent',\n  };\n\n  return {\n    root: [\n      getCellStyles(props),\n      fonts.small,\n      isActionable && [\n        classNames.isActionable,\n        {\n          selectors: {\n            ':hover': {\n              color: semanticColors.bodyText,\n              background: semanticColors.listHeaderBackgroundHovered,\n            },\n            ':active': {\n              background: semanticColors.listHeaderBackgroundPressed,\n            },\n          },\n        },\n      ],\n      isEmpty && [\n        classNames.isEmpty,\n        {\n          textOverflow: 'clip',\n        },\n      ],\n      isIconVisible && classNames.isIconVisible,\n      isPadded && {\n        paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n      },\n      {\n        selectors: {\n          ':hover i[data-icon-name=\"GripperBarVertical\"]': {\n            display: 'block',\n          },\n        },\n      },\n      headerClassName,\n    ],\n\n    gripperBarVerticalStyle: {\n      display: 'none',\n      position: 'absolute',\n      textAlign: 'left',\n      color: palette.neutralTertiary,\n      left: 1,\n    },\n\n    nearIcon: [classNames.nearIcon, nearIconStyle],\n\n    sortIcon: [\n      nearIconStyle,\n      {\n        paddingLeft: 4,\n        position: 'relative',\n        top: 1,\n      },\n    ],\n\n    iconClassName: [\n      {\n        color: colors.iconForegroundColor,\n        opacity: 1,\n      },\n      iconClassName,\n    ],\n\n    filterChevron: [\n      classNames.filterChevron,\n      {\n        color: colors.dropdownChevronForegroundColor,\n        paddingLeft: 6,\n        verticalAlign: 'middle',\n        fontSize: fonts.small.fontSize,\n      },\n    ],\n\n    cellTitle: [\n      classNames.cellTitle,\n      getFocusStyle(theme),\n      {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'stretch',\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n        padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n        ...(isIconOnly\n          ? {\n              alignContent: 'flex-end',\n              maxHeight: '100%',\n              flexWrap: 'wrap-reverse',\n            }\n          : {}),\n      },\n    ],\n\n    cellName: [\n      classNames.cellName,\n      {\n        flex: '0 1 auto',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontWeight: FontWeights.semibold,\n        fontSize: fonts.medium.fontSize,\n      },\n      isIconOnly && {\n        selectors: {\n          [`.${classNames.nearIcon}`]: {\n            paddingLeft: 0,\n          },\n        },\n      },\n    ],\n\n    cellTooltip: {\n      display: 'block',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    borderWhileDragging: borderWhileDragging,\n\n    noBorderWhileDragging: [borderAfterDragOrDrop, { transition: `outline ${transitionDurationDrag}ms ease` }],\n\n    borderAfterDropping: borderWhileDragging,\n\n    noBorderAfterDropping: [borderAfterDragOrDrop, { transition: `outline  ${transitionDurationDrop}ms ease` }],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}